<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Learn Elixir Language]]></title>
  <link href="http://learnelixir.com/atom.xml" rel="self"/>
  <link href="http://learnelixir.com/"/>
  <updated>2014-11-02T12:34:32+08:00</updated>
  <id>http://learnelixir.com/</id>
  <author>
    <name><![CDATA[Learn Elixir]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Real Time To-Do List With Phoenix Channel]]></title>
    <link href="http://learnelixir.com/blog/2014/10/30/real-time-to-do-list-with-phoenix-channel/"/>
    <updated>2014-10-30T21:44:38+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/30/real-time-to-do-list-with-phoenix-channel</id>
    <content type="html"><![CDATA[<p>Channel websocket is a pretty cool feature built in Phoenix framework. It is like a controller, but bidirectional and the connection stay alive after server response. The server can push information to the browser without browser asking for it unlike traditional web server. To fully understand and make use of this awesome feature, let&#39;s try to build a Real Time To Do List application in this article. This will be basically a To Do list but it can be shared among your team. Hence everytime a person inside your team check / uncheck a To Do Item, everyone will see that without refreshing the page. </p>

<!-- more -->

<h3>Setup a Phoenix project</h3>

<p>Before we start any thing on this. Let&#39;s look at the end result:</p>

<p><img src="http://learnelixir.com/images/real-time-to-do-app/first_version.gif" alt="Demo" title="Demo"></p>

<p>The source code is available at: <a href="https://github.com/learnelixir/real-time-to-do-app">https://github.com/learnelixir/real-time-to-do-app</a></p>

<hr style='border: 0 none; border-top: 1px dashed #ccc; margin-bottom: 20px;'/>

<p>Now let&#39;s start by setting up a Phoenix project. From Phoenix source folder, key in the following command on your terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix phoenix.new real-time-to-do ../real-time-to-do
</span></code></pre></td></tr></table></div></figure>

<p>And enter that project folder:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ../real-time-to-do
</span></code></pre></td></tr></table></div></figure>

<p>Let&#39;s edit <code>mix.exs</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim mix.exs
</span></code></pre></td></tr></table></div></figure>

<p>Then add in 2 dependencies <code>postgrex</code> and <code>ecto</code>. Remember to include them in the application function as well.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">def</span> <span class="n">application</span> <span class="k">do</span>
</span><span class='line'>  <span class="p">[</span><span class="ss">mod</span><span class="p">:</span> <span class="p">{</span><span class="n">realtimetodo</span><span class="p">,</span> <span class="p">[]},</span>
</span><span class='line'>   <span class="ss">applications</span><span class="p">:</span> <span class="p">[</span><span class="ss">:phoenix</span><span class="p">,</span> <span class="ss">:cowboy</span><span class="p">,</span> <span class="ss">:logger</span><span class="p">,</span> <span class="ss">:ecto</span><span class="p">,</span> <span class="ss">:postgrex</span><span class="p">]]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># specifies your project dependencies</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># type `mix help deps` for examples and options</span>
</span><span class='line'><span class="kd">defp</span> <span class="n">deps</span> <span class="k">do</span>
</span><span class='line'>  <span class="p">[{</span><span class="ss">:phoenix</span><span class="p">,</span> <span class="s2">&quot;0.5.0&quot;</span><span class="p">},</span>
</span><span class='line'>   <span class="p">{</span><span class="ss">:cowboy</span><span class="p">,</span> <span class="s2">&quot;~&gt; 1.0&quot;</span><span class="p">},</span>
</span><span class='line'>   <span class="p">{</span><span class="ss">:ecto</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.2.0&quot;</span><span class="p">},</span>
</span><span class='line'>   <span class="p">{</span><span class="ss">:postgrex</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.6.0&quot;</span><span class="p">}]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Next, install all the dependencies for the project:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix <span class="k">do</span> deps.get, compile
</span></code></pre></td></tr></table></div></figure>

<p>We are done with the setting up. Let&#39;s move on to prepare our views. </p>

<h3>Setup views for our to-do list</h3>

<p>open <code>application.html.eex</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/templates/layout/application.html.eex
</span></code></pre></td></tr></table></div></figure>

<p>and replace its content with the below code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;X-UA-Compatible&quot;</span> <span class="na">content=</span><span class="s">&quot;IE=edge&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width, initial-scale=1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;description&quot;</span> <span class="na">content=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;author&quot;</span> <span class="na">content=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>Awesome To Do List<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://code.jquery.com/jquery-1.11.1.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/js/phoenix.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/js/Sortable.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/js/app.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;/css/phoenix.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;/css/app.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="err">&lt;</span>%= @inner %&gt;
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span> <span class="c">&lt;!-- /container --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>The followings have been changed in this file:</p>

<ul>
<li>Remove phoenix header and footer</li>
<li>Include jquery library on line 11</li>
<li>Include phoenix library on line 12. Note that <code>phoenix.js</code> is available in <code>priv/static/js</code> folder.</li>
<li>Include <code>Sortable.min.js</code> on line 13. The sortable is a library from this site <a href="http://rubaxa.github.io/Sortable/">http://rubaxa.github.io/Sortable/</a>.</li>
<li>Include <code>app.js</code> on line 14.</li>
<li>Include <code>app.css</code> on line 16.</li>
</ul>

<p>We will need to create an empty <code>app.js</code> file for now inside <code>priv/static/js</code> folder. For <code>app.css</code>, we will not go through the css code in this article. However you can grab the source code for <code>/css/app.css</code> at <a href="https://raw.githubusercontent.com/learnelixir/real-time-to-do-app/master/priv/static/css/app.css">https://raw.githubusercontent.com/learnelixir/real-time-to-do-app/master/priv/static/css/app.css</a> and put inside the <code>priv/static/css</code> folder.</p>

<p>Let&#39;s move on to creating a channel in our router.</p>

<h3>Set up a Channel in router</h3>

<p>First open <code>web/router.ex</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/router.ex
</span></code></pre></td></tr></table></div></figure>

<p>we will need to add in the following line to use of phoenix socket:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kn">use</span> <span class="nc">Phoenix.Router.Socket</span><span class="p">,</span> <span class="ss">mount</span><span class="p">:</span> <span class="s2">&quot;/ws&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then add in the following 2 things:</p>

<ul>
<li>An <code>index</code> page for our app, which will link to one of our controllers.</li>
<li>Create a channel so that everybody can subscribe to this channel to see our awesome to do list.</li>
</ul>

<p>These can be achieved by adding 2 lines below under <code>scope &quot;/&quot;</code> do block</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">get</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="nc">RealTimeToDo.ToDosController</span><span class="p">,</span> <span class="ss">:index</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:root</span>
</span><span class='line'><span class="n">channel</span> <span class="s2">&quot;to_dos&quot;</span><span class="p">,</span> <span class="nc">RealTimeToDo.ToDoChannel</span>
</span></code></pre></td></tr></table></div></figure>

<p>Our final router will look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">RealTimeToDo.Router</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Phoenix.Router</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Phoenix.Router.Socket</span><span class="p">,</span> <span class="ss">mount</span><span class="p">:</span> <span class="s2">&quot;/ws&quot;</span>
</span><span class='line'>  <span class="n">scope</span> <span class="s2">&quot;/&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># Use the default browser stack.</span>
</span><span class='line'>    <span class="n">pipe_through</span> <span class="ss">:browser</span>
</span><span class='line'>    <span class="n">get</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="nc">RealTimeToDo.ToDosController</span><span class="p">,</span> <span class="ss">:index</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:root</span>
</span><span class='line'>    <span class="n">channel</span> <span class="s2">&quot;to_dos&quot;</span><span class="p">,</span> <span class="nc">RealTimeToDo.ToDoChannel</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>We are done with router for now. Let&#39;s move to create a <code>Repo</code> and <code>Item</code> model</p>

<h3>Create Repo and Item model</h3>

<p>First create a database name <code>to_dos</code> from your terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>createdb to_dos --encoding<span class="o">=</span><span class="s1">&#39;utf-8&#39;</span> --locale<span class="o">=</span>en_US.UTF-8 --template<span class="o">=</span>template0<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Next, create a Repo by creating file <code>web/models/repo.ex</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/models/repo.ex
</span></code></pre></td></tr></table></div></figure>

<p>Paste in the following code. You will need to change <code>postgresuser</code> and <code>password</code> according to your database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">RealTimeToDo.Repo</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Ecto.Repo</span><span class="p">,</span> <span class="ss">adapter</span><span class="p">:</span> <span class="nc">Ecto.Adapters.Postgres</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">conf</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">parse_url</span> <span class="s2">&quot;ecto://postgresuser:password@localhost/to_dos&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">priv</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">app_dir</span><span class="p">(</span><span class="ss">:real_time_to_do</span><span class="p">,</span> <span class="s2">&quot;priv/repo&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Next, create <code>Item</code> model:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/models/item.ex
</span></code></pre></td></tr></table></div></figure>

<p>and add in the code below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">Item</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Ecto.Model</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">schema</span> <span class="s2">&quot;items&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">field</span> <span class="ss">:description</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>    <span class="n">field</span> <span class="ss">:position</span><span class="p">,</span> <span class="ss">:integer</span>
</span><span class='line'>    <span class="n">field</span> <span class="ss">:done</span><span class="p">,</span> <span class="ss">:boolean</span>
</span><span class='line'>    <span class="n">field</span> <span class="ss">:updated_at</span><span class="p">,</span> <span class="ss">:datetime</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Next, trigger the following command to create Item migration from your terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix ecto.gen.migration RealTimeToDo.Repo create_item
</span></code></pre></td></tr></table></div></figure>

<p>Open the newly created migration file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim priv/repo/migrations/20141031230205_create_item.exs
</span></code></pre></td></tr></table></div></figure>

<p>And paste in the code below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">RealTimeToDo.Repo.Migrations.CreateItem</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Ecto.Migration</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">up</span> <span class="k">do</span>
</span><span class='line'>    <span class="s2">&quot;CREATE TABLE items( </span><span class="err">\</span><span class="s2"></span>
</span><span class='line'><span class="s2">          id serial primary key, </span><span class="err">\</span><span class="s2"></span>
</span><span class='line'><span class="s2">          description text, </span><span class="err">\</span><span class="s2"></span>
</span><span class='line'><span class="s2">          position integer,</span>
</span><span class='line'><span class="s2">          done boolean, </span><span class="err">\</span><span class="s2"></span>
</span><span class='line'><span class="s2">          updated_at timestamp)&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">down</span> <span class="k">do</span>
</span><span class='line'>    <span class="s2">&quot;DROP TABLE items&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Lastly for this section, let&#39;s run the migration</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix ecto.migrate RealTimeToDo.Repo
</span></code></pre></td></tr></table></div></figure>

<p>Next we will create <code>RealTimeToDo.ToDosController</code> in order to show the index page for our app.</p>

<h3>Create TodosController for index page</h3>

<p>Let&#39;s start by creating the controller file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/controllers/to_dos_controller.ex
</span></code></pre></td></tr></table></div></figure>

<p>We will only need an <code>index</code> action, which will retrieve all the to-do items and done items sorted by position attribute and render the <code>index</code> page. The code for this controller is presented below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">RealTimeToDo.ToDosController</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Phoenix.Controller</span>
</span><span class='line'>  <span class="kn">alias</span> <span class="nc">RealTimeToDo.Repo</span>
</span><span class='line'>  <span class="kn">import</span> <span class="nc">Ecto.Query</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">plug</span> <span class="ss">:action</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">index</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="n">_params</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">to_do_items</span> <span class="p">=</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="nc">Item</span>
</span><span class='line'>                            <span class="o">|&gt;</span> <span class="n">where</span><span class="p">([</span><span class="n">item</span><span class="p">],</span> <span class="n">item</span><span class="p">.</span><span class="n">done</span> <span class="o">==</span> <span class="no">false</span><span class="p">)</span>
</span><span class='line'>                            <span class="o">|&gt;</span> <span class="n">order_by</span><span class="p">([</span><span class="n">item</span><span class="p">],</span> <span class="ss">asc</span><span class="p">:</span> <span class="n">item</span><span class="p">.</span><span class="n">position</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">done_items</span> <span class="p">=</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="nc">Item</span>
</span><span class='line'>                            <span class="o">|&gt;</span> <span class="n">where</span><span class="p">([</span><span class="n">item</span><span class="p">],</span> <span class="n">item</span><span class="p">.</span><span class="n">done</span> <span class="o">==</span> <span class="no">true</span><span class="p">)</span>
</span><span class='line'>                            <span class="o">|&gt;</span> <span class="n">order_by</span><span class="p">([</span><span class="n">item</span><span class="p">],</span> <span class="ss">asc</span><span class="p">:</span> <span class="n">item</span><span class="p">.</span><span class="n">position</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">render</span> <span class="n">conn</span><span class="p">,</span> <span class="s2">&quot;index&quot;</span><span class="p">,</span> <span class="ss">to_do_items</span><span class="p">:</span> <span class="n">to_do_items</span><span class="p">,</span> <span class="ss">done_items</span><span class="p">:</span> <span class="n">done_items</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Note that we are querying for <code>to_do_item</code> from line 9 - 11 and querying for <code>done_items</code> from line 13 - 15.</p>

<p>Now, let&#39;s move on to create <code>index</code> page:</p>

<h3>Create index page for items list</h3>

<p>First we will need to create <code>to_dos_view.ex</code> file under <code>web/views</code> folder:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/views/to_dos_view.ex
</span></code></pre></td></tr></table></div></figure>

<p>and paste in the code below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">RealTimeToDo.ToDosView</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">RealTimeToDo.Views</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Next create a folder <code>to_dos</code> under <code>web/templates</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir web/templates/to_dos
</span></code></pre></td></tr></table></div></figure>

<p>Then create <code>index.html.eex</code> under this folder:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/templates/to_dos/index.html.eex
</span></code></pre></td></tr></table></div></figure>

<p>Inside this view we will need to list down all the items that are not yet done and are done grouped into 2 sections. Each displayed item is then rendered using a partial view <code>item.html.eex</code>, which will be described shortly. There is also a textbox on top to let user key in anew item and a link for arranging the items within each of the to-do and done lists mentioned above:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;description&quot;</span> <span class="na">id=</span><span class="s">&quot;new_item&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;New Item&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&#39;to_do_list_container&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h3&gt;</span>
</span><span class='line'>    To Do List
</span><span class='line'>    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&#39;arrange-items&#39;</span> <span class="na">for=</span><span class="s">&quot;#to_do_list&quot;</span><span class="nt">&gt;</span>Arrange items<span class="nt">&lt;span&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/h3&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&#39;to_do_list&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="err">&lt;</span>%= for item <span class="nt">&lt;-</span> <span class="err">@</span><span class="na">to_do_items</span> <span class="na">do</span> <span class="err">%</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="err">&lt;</span>%= render &quot;item.html&quot;, item: item %&gt;
</span><span class='line'>    <span class="err">&lt;</span>% end %&gt;
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;h3&gt;</span>
</span><span class='line'>    Done List
</span><span class='line'>    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&#39;arrange-items&#39;</span> <span class="na">for=</span><span class="s">&quot;#done_list&quot;</span><span class="nt">&gt;</span>Arrange items<span class="nt">&lt;span&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/h3&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&#39;done_list&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="err">&lt;</span>%= for item <span class="nt">&lt;-</span> <span class="err">@</span><span class="na">done_items</span> <span class="na">do</span> <span class="err">%</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="err">&lt;</span>%= render &quot;item.html&quot;, item: item %&gt;
</span><span class='line'>    <span class="err">&lt;</span>% end %&gt;
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">language=</span><span class="s">&#39;javascript&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nx">ToDoApp</span><span class="p">.</span><span class="nx">init</span><span class="p">();</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>The partial view <code>item.html.eex</code> file can be created in the same folder <code>web/templates/todos</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/templates/to_dos/item.html.eex
</span></code></pre></td></tr></table></div></figure>

<p>with the content:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;li</span> <span class="na">data-id=</span><span class="s">&#39;&lt;%= @item.id %&gt;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&#39;checkbox&#39;</span> <span class="na">id=</span><span class="s">&#39;item_&lt;%= @item.id %&gt;&#39;</span>
</span><span class='line'>         <span class="na">class=</span><span class="s">&#39;item-done&#39;</span> <span class="err">&lt;%=</span> <span class="na">if</span> <span class="err">@</span><span class="na">item</span><span class="err">.</span><span class="na">done</span><span class="err">,</span> <span class="na">do:</span> <span class="err">&quot;</span><span class="na">checked</span><span class="err">&quot;</span> <span class="err">%</span><span class="nt">&gt;</span> /&gt;
</span><span class='line'>  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&#39;item-description&#39;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= @item.description %&gt;<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&#39;edit-item-description hidden&#39;</span><span class="nt">&gt;&lt;input</span> <span class="na">type=</span><span class="s">&#39;text&#39;</span> <span class="nt">/&gt;&lt;/span&gt;</span>
</span><span class='line'>  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&#39;edit-item&#39;</span><span class="nt">&gt;</span>edit<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&#39;delete-item&#39;</span><span class="nt">&gt;</span>remove<span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;/li&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<ul>
<li>On line 1, we include <code>data-id</code> attribute with rendering item&#39;s id. This is for the sort function described in the next section.</li>
<li>On line 2, we have a check box, which will be checked if the item is marked as done.</li>
<li>On line 4, we are showing item description.</li>
<li>On line 5, we are having an hidden textbox. This is going to be shown when the edit link is clicked by a user.</li>
<li>On line 6, we are showing the edit button for this item.</li>
<li>On line 7, we are showing the remove button for this item.</li>
</ul>

<h4>To Do List Channel</h4>

<p>Let&#39;s start by creating a channel file <code>web/channels/to_do_channel.ex</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/channels/to_do_channel.ex
</span></code></pre></td></tr></table></div></figure>

<p>with the initial code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">RealTimeToDo.ToDoChannel</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Phoenix.Channel</span>
</span><span class='line'>  <span class="kn">alias</span> <span class="nc">RealTimeToDo.Repo</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">join</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="s2">&quot;list&quot;</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">socket</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">defp</span> <span class="n">atomize_keys</span><span class="p">(</span><span class="n">struct</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="nc">Enum</span><span class="p">.</span><span class="n">reduce</span> <span class="n">struct</span><span class="p">,</span> <span class="p">%{},</span> <span class="k">fn</span><span class="p">({</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">},</span> <span class="n">map</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nc">Map</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">map</span><span class="p">,</span> <span class="nc">String</span><span class="p">.</span><span class="n">to_atom</span><span class="p">(</span><span class="n">k</span><span class="p">),</span> <span class="n">v</span><span class="p">)</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Note that the action <code>join</code> must always be there for Phoenix Channel. This is to authorize users joining this socket. In order to let someone pass the check and join the channel, we will only need to return <code>{:ok, socket}</code>. Otherwise, you will need to return <code>{:error, socket, :unauthorized}</code>. For this case, just let our awesome list open to public by returning <code>{:ok, socket}</code> without any checking. This can be easily extended when we have a login function, we can check if the current logged in user is authorized to subscribe to a list&#39;s events.</p>

<p>As mentioned earlier, we will need to think Channel as Controller. Hence, there will be somewhat similar CRUD actions inside Channel&#39;s code. On top of that is the implementation for the information pushing to channel subscribers. Let&#39;s first list down all the actions that the user will take when dealing with a To-do list. These actions a user takes will then trigger corresponding events in a channel. This channel will then reply to the client or broadcast an event to everyone. The required list of actions is as following:</p>

<ul>
<li>Create a New Item.</li>
<li>Mark an Item as done by clicking on the unchecked check box.</li>
<li>Mark an Item as undone by clicking on the checked check box.</li>
<li>Delete an item.</li>
<li>Update an item description.</li>
<li>Arrange items in a certain order</li>
</ul>

<p>These actions will be mapped to 6 events in a Channel. For action 2 and 3, let&#39;s group them under toggle an item done status. Now, let&#39;s list them all in the channel <code>defmodule</code> created earlier:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">def</span> <span class="n">event</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="s2">&quot;create:item&quot;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">socket</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">def</span> <span class="n">event</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="s2">&quot;toggle:item&quot;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">socket</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">def</span> <span class="n">event</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="s2">&quot;delete:item&quot;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">socket</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">def</span> <span class="n">event</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="s2">&quot;update:item&quot;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">socket</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">def</span> <span class="n">event</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="s2">&quot;arrange:items&quot;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">socket</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Note that for each socket, there is a need to return <code>socket</code> so that it can take effect. Now, let&#39;s go through each event and put in the implementation for each. As you will notice, the implementation for each of the events is quite closed to the implementation described in the corresponding actions of the CRUD actions implemented in a controler.</p>

<h4>create:item event</h4>

<p>This event is triggered when a user submits a new item to the channel. The app needs to insert the new item into the database and then broadcast this newly created item to everyone in the channel [Line 5]. The code for this event is presented below: </p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">def</span> <span class="n">event</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="s2">&quot;create:item&quot;</span><span class="p">,</span> <span class="p">%{</span><span class="s2">&quot;item&quot;</span> <span class="p">=&gt;</span> <span class="n">params</span><span class="p">})</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">item</span> <span class="p">=</span> <span class="n">create_item</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">item</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">item_html</span> <span class="p">=</span> <span class="nc">Phoenix.View</span><span class="p">.</span><span class="n">render</span> <span class="nc">RealTimeToDo.ToDosView</span><span class="p">,</span> <span class="s2">&quot;item.html&quot;</span><span class="p">,</span> <span class="ss">item</span><span class="p">:</span> <span class="n">item</span>
</span><span class='line'>    <span class="n">broadcast</span> <span class="n">socket</span><span class="p">,</span> <span class="s2">&quot;create:item&quot;</span><span class="p">,</span> <span class="p">%{</span><span class="ss">item_html</span><span class="p">:</span> <span class="n">item_html</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">socket</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">defp</span> <span class="n">create_item</span><span class="p">(</span><span class="n">params</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">item</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">merge</span><span class="p">(%</span><span class="nc">Item</span><span class="p">{</span><span class="ss">done</span><span class="p">:</span> <span class="no">false</span><span class="p">},</span> <span class="n">atomize_keys</span><span class="p">(</span><span class="n">params</span><span class="p">))</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Item</span><span class="p">.</span><span class="n">validate</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="p">[]</span> <span class="p">-&gt;</span>
</span><span class='line'>      <span class="n">item</span> <span class="p">=</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>    <span class="n">errors</span> <span class="p">-&gt;</span>
</span><span class='line'>      <span class="no">nil</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>One thing to highlight is line 4, this is where we render the HTML of the item using <code>Phoenix.View.render</code>, this html is then broadcast to everyone on the channel. It is the same HTML that we use to render individual item inside the <code>index</code> event mentioned ealier.</p>

<h4>toggle:item event</h4>

<p>This event is triggered when a user clicks on an item check box to mark an item as done or undone. Once this event is received on the channel, the channel will then broadcast this event to everyone [Line 3]. The code for this event is presented below: 
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">def</span> <span class="n">event</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="s2">&quot;toggle:item&quot;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">item</span> <span class="p">=</span> <span class="n">toggle<em>item</em>done<em>status</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s2">&quot;item</em>id&quot;</span><span class="p">])</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">item</span><span class="p">,</span> <span class="ss">do</span><span class="p">:</span> <span class="n">broadcast</span> <span class="n">socket</span><span class="p">,</span> <span class="s2">&quot;toggle:item&quot;</span><span class="p">,</span> <span class="p">%{</span><span class="ss">item</span><span class="p">:</span> <span class="n">item</span><span class="p">}</span>
</span><span class='line'>  <span class="n">socket</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">defp</span> <span class="n">toggle<em>item</em>done<em>status</span><span class="p">(</span><span class="n">item</em>id</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nc">Item</span><span class="p">,</span> <span class="nc">String</span><span class="p">.</span><span class="n">to<em>integer</span><span class="p">(</span><span class="n">item</em>id</span><span class="p">))</span>
</span><span class='line'>    <span class="n">item</span> <span class="ow">when</span> <span class="n">is<em>map</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="p">-&gt;</span>
</span><span class='line'>      <span class="n">item</span> <span class="p">=</span> <span class="p">%{</span><span class="n">item</span> <span class="p">|</span> <span class="ss">done</span><span class="p">:</span> <span class="o">!</span><span class="n">item</span><span class="p">.</span><span class="n">done</span><span class="p">}</span>
</span><span class='line'>      <span class="nc">Repo</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>      <span class="n">item</span>
</span><span class='line'>    <span class="bp"></em></span> <span class="p">-&gt;</span>
</span><span class='line'>      <span class="no">nil</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Note that on line 9, we are negating <code>item.done</code> to toggle the current status of an item.</p>

<h4>delete:item event</h4>

<p>This event is triggered when a user clicks on the delete link next an item. Once this event is received on the channel, we will need broadcast this event to everyone on the same channel if the deletion is successful [Line 3]. The code for this event is as following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">def</span> <span class="n">event</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="s2">&quot;delete:item&quot;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">delete_item</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s2">&quot;item_id&quot;</span><span class="p">])</span>
</span><span class='line'>  <span class="n">broadcast</span> <span class="n">socket</span><span class="p">,</span> <span class="s2">&quot;delete:item&quot;</span><span class="p">,</span> <span class="p">%{</span><span class="ss">item</span><span class="p">:</span> <span class="n">item</span><span class="p">}</span>
</span><span class='line'>  <span class="n">socket</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">def</span> <span class="n">delete_item</span><span class="p">(</span><span class="n">item_id</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nc">Item</span><span class="p">,</span> <span class="nc">String</span><span class="p">.</span><span class="n">to_integer</span><span class="p">(</span><span class="n">item_id</span><span class="p">))</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">item</span> <span class="ow">when</span> <span class="n">is_map</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="p">-&gt;</span>
</span><span class='line'>      <span class="nc">Repo</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>      <span class="n">item</span>
</span><span class='line'>    <span class="bp">_</span> <span class="p">-&gt;</span>
</span><span class='line'>      <span class="no">nil</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<h4>update:item event</h4>

<p>This event is triggered when a user clicks on edit an item, change the description and hit save button. Once this event is received on the channel, the system will then broadcast this event to everyone in the channel with the updated item. The code for this event is as following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">def</span> <span class="n">event</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="s2">&quot;update:item&quot;</span><span class="p">,</span> <span class="p">%{</span><span class="s2">&quot;item_id&quot;</span> <span class="p">=&gt;</span> <span class="n">item_id</span><span class="p">,</span> <span class="s2">&quot;item&quot;</span> <span class="p">=&gt;</span> <span class="n">params</span><span class="p">})</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">item</span> <span class="p">=</span> <span class="n">update_item</span><span class="p">(</span><span class="n">item_id</span><span class="p">,</span> <span class="n">params</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">item</span><span class="p">,</span> <span class="ss">do</span><span class="p">:</span> <span class="n">broadcast</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="s2">&quot;update:item&quot;</span><span class="p">,</span> <span class="p">%{</span><span class="ss">item</span><span class="p">:</span> <span class="n">item</span><span class="p">})</span>
</span><span class='line'>  <span class="n">socket</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">defp</span> <span class="n">update_item</span><span class="p">(</span><span class="n">item_id</span><span class="p">,</span> <span class="n">params</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nc">Item</span><span class="p">,</span> <span class="nc">String</span><span class="p">.</span><span class="n">to_integer</span><span class="p">(</span><span class="n">item_id</span><span class="p">))</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">item</span> <span class="ow">when</span> <span class="n">is_map</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="p">-&gt;</span>
</span><span class='line'>      <span class="n">atomized_keys_params</span> <span class="p">=</span> <span class="n">atomize_keys</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>      <span class="n">item</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">merge</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">atomized_keys_params</span><span class="p">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">Item</span><span class="p">.</span><span class="n">validate</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>        <span class="p">[]</span> <span class="p">-&gt;</span>
</span><span class='line'>          <span class="nc">Repo</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>          <span class="n">item</span>
</span><span class='line'>        <span class="bp">_</span> <span class="p">-&gt;</span>
</span><span class='line'>          <span class="no">nil</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="bp">_</span> <span class="p">-&gt;</span>
</span><span class='line'>      <span class="no">nil</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<h4>arange:item event</h4>

<p>This event is triggered every time a user drags an item to move it to a new position. This will then trigger event <code>arrange:items</code> on the server. The system will need to broadcast this event to everyone in the channel with the new orders of the item [Line 3]. The code for this event is as following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">def</span> <span class="n">event</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="s2">&quot;arrange:items&quot;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">update_positions</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s2">&quot;item_ids&quot;</span><span class="p">])</span>
</span><span class='line'>  <span class="n">broadcast</span> <span class="n">socket</span><span class="p">,</span> <span class="s2">&quot;arrange:items&quot;</span><span class="p">,</span> <span class="p">%{</span><span class="ss">item_ids</span><span class="p">:</span> <span class="n">data</span><span class="p">[</span><span class="s2">&quot;item_ids&quot;</span><span class="p">],</span> <span class="ss">for_list</span><span class="p">:</span> <span class="n">data</span><span class="p">[</span><span class="s2">&quot;for_list&quot;</span><span class="p">]}</span>
</span><span class='line'>  <span class="n">socket</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">defp</span> <span class="n">update_positions</span><span class="p">(</span><span class="n">item_ids</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">item_ids</span> <span class="p">=</span> <span class="nc">String</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="n">item_ids</span><span class="p">,</span> <span class="s2">&quot;,&quot;</span><span class="p">)</span>
</span><span class='line'>                    <span class="o">|&gt;</span> <span class="nc">Enum</span><span class="p">.</span><span class="n">map</span> <span class="k">fn</span> <span class="n">item_id</span> <span class="p">-&gt;</span> <span class="nc">String</span><span class="p">.</span><span class="n">to_integer</span><span class="p">(</span><span class="n">item_id</span><span class="p">)</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">items</span> <span class="p">=</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="nc">Item</span> <span class="o">|&gt;</span> <span class="n">where</span><span class="p">([</span><span class="n">item</span><span class="p">],</span> <span class="n">item</span><span class="p">.</span><span class="n">id</span> <span class="ow">in</span> <span class="n">array</span><span class="p">(</span><span class="o">^</span><span class="n">item_ids</span><span class="p">,</span> <span class="ss">:integer</span><span class="p">)))</span>
</span><span class='line'>  <span class="n">item_hash</span> <span class="p">=</span> <span class="nc">Enum</span><span class="p">.</span><span class="n">reduce</span> <span class="n">items</span><span class="p">,</span> <span class="p">%{},</span> <span class="k">fn</span> <span class="n">item</span><span class="p">,</span> <span class="n">map</span> <span class="p">-&gt;</span> <span class="nc">Map</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">map</span><span class="p">,</span> <span class="n">item</span><span class="p">.</span><span class="n">id</span><span class="p">,</span> <span class="n">item</span><span class="p">)</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">item_ids</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nc">Stream</span><span class="p">.</span><span class="n">with_index</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nc">Enum</span><span class="p">.</span><span class="n">each</span> <span class="k">fn</span> <span class="p">{</span><span class="n">item_id</span><span class="p">,</span> <span class="n">index</span><span class="p">}</span> <span class="p">-&gt;</span>
</span><span class='line'>      <span class="n">item</span> <span class="p">=</span> <span class="n">item_hash</span><span class="p">[</span><span class="n">item_id</span><span class="p">]</span>
</span><span class='line'>      <span class="nc">Repo</span><span class="p">.</span><span class="n">update</span><span class="p">(%{</span><span class="n">item</span> <span class="p">|</span> <span class="ss">position</span><span class="p">:</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">})</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>There are quite a number of things happening here. Let&#39;s go through a few key points:</p>

<ul>
<li>On line 2, we are calling <code>update_position</code> with the list of item IDs.</li>
<li>On line 8 and 9 inside <code>update_positions</code> function, we are spliting the list of ids string to form an array of string. It is then converted to cbecome array of integers.</li>
<li>On line 11, we are querying all the items using the list of received item&#39;s ids by using the <code>where</code> condition: <code>where([item], item.id in array(^item_ids, :integer))</code>. This will trigger one SQL query only in order to get all the needed items.</li>
<li>On line 12, we are converting the list of items produced on line 11 to become a map of items whereby the key is the item&#39;s id. This is for instant item retrieval later on using id as the key.</li>
<li>On line 14 - 18, we going through each <code>item_id</code> in the list of received <code>tem_ids</code> and update accordingly the position of each of the item according to the position it appears in the lits of <code>item_ids</code>.</li>
</ul>

<p>For instance, let say we get from the client the string <code>6,4,1,5</code>, we will update item with ID <code>6</code> to have position <code>1</code>, item with ID <code>4</code> to have position <code>2</code>, item with ID <code>1</code> to have position <code>3</code> and so on.</p>

<p>That&#39;s all we need to work on the Channel. Let&#39;s move to the javascript to bind and listen to the events as a result of the broadcast from Phoenix Channel.</p>

<h4>Phoenix channel javascript integration</h4>

<p>What we are going to do for this part is to create event bindings for the following events:</p>

<ul>
<li>Create An Item</li>
<li>Update An Item</li>
<li>Toggle Done Status on An Item</li>
<li>Delete An Item</li>
<li>Arrange items</li>
</ul>

<p>First, let&#39;s edit our <code>app.js</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim priv/static/js/app.js
</span></code></pre></td></tr></table></div></figure>

<p>and put in the <code>init</code> function</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">ToDoApp</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">socket</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Phoenix</span><span class="p">.</span><span class="nx">Socket</span><span class="p">(</span><span class="s2">&quot;/ws&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">toDoListContainer</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#to_do_list_container&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">toDoList</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#to_do_list&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">doneList</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#done_list&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">newItem</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#new_item&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">sortableCollection</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">socket</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;to_dos&quot;</span><span class="p">,</span> <span class="s2">&quot;list&quot;</span><span class="p">,</span> <span class="p">{},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">channel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">app</span><span class="p">.</span><span class="nx">bindAndListenToEvents</span><span class="p">(</span><span class="nx">channel</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">bindAndListenToEvents</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">channel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Inside this <code>init</code> function, we are creating a socket and binding all the variables with its corresponding DOM. Then we let the Phoenix socket to join the <code>to_dos</code> socket with <code>list</code> as a topic. Next what we will need to do is to fill in the <code>...</code> to initialise the events binding and listening mentioned above</p>

<h4>Create Item Event</h4>

<p>When a user hits enter in the <code>#new_item</code> text box, we will use the channel to send the event <code>create:item</code> with the text that has been typed inside that text box. This text will be used as the description of the new item. Let&#39;s create a function named <code>bindEventsForCreatingItem</code> with the following source code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">bindEventsForCreatingItem</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">channel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">newItem</span><span class="p">.</span><span class="nx">off</span><span class="p">(</span><span class="s2">&quot;keypress&quot;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;keypress&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span> <span class="o">==</span> <span class="mi">13</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// enter key</span>
</span><span class='line'>      <span class="nx">channel</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s2">&quot;create:item&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">item</span><span class="o">:</span> <span class="p">{</span> <span class="nx">description</span><span class="o">:</span> <span class="nx">app</span><span class="p">.</span><span class="nx">newItem</span><span class="p">.</span><span class="nx">val</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>      <span class="nx">app</span><span class="p">.</span><span class="nx">newItem</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then call this <code>bindEventsForCreatingItem</code> inside <code>bindAndListenToEvents</code> function</p>

<p>On the server side, once the channel receives this <code>create:item</code> event, it will creates the item and broadcast the newly created item event <code>create:item</code>. Hence, let&#39;s add in a function to listen for this <code>create:item</code> broadcast event. Name the fuction <code>listenToCreatingItemEvent</code> and call this function inside <code>bindAndListenToEvents</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">listenToCreatingItemEvent</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">channel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">channel</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;create:item&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">toDoList</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">item_html</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>One the event is received on the front end, the app will simply append the newly created item&#39;s html returning from the channel. </p>

<h4>Toggle Item Event</h4>

<p>Next, we will need to bind the event to all the check boxes, so that every time a check box of an item is checked, an event will be triggered and send to the the channel the event. To do so, let&#39;s create <code>bindEventsForTogglingItem</code> and call it inside <code>bindAndListenToEvents</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">bindEventsForTogglingItem</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">channel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">toDoListContainer</span><span class="p">.</span><span class="nx">delegate</span><span class="p">(</span><span class="s2">&quot;input.item-done&quot;</span><span class="p">,</span> <span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">channel</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s2">&quot;toggle:item&quot;</span><span class="p">,</span> <span class="p">{</span><span class="nx">item_id</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;id&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&quot;item_&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>On the server side, once the channel receives this <code>toggle:item</code> event, it will creates toggle the item done status and broadcast the event <code>toggle:item</code>. Hence, let&#39;s add in a function to listen for this <code>create:item</code> broadcast event. Name the fuction <code>listToTogglingItemEvent</code> and call this function inside <code>bindAndListenToEvents</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">listenToTogglingItemEvent</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">channel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">channel</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;toggle:item&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">item</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">item</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">targetItemList</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">toDoList</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">fromItemList</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">doneList</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">done</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">targetItemList</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">doneList</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">fromItemList</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">toDoList</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">fromItemList</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;#item_&quot;</span> <span class="o">+</span> <span class="nx">item</span><span class="p">.</span><span class="nx">id</span><span class="p">).</span><span class="nx">parent</span><span class="p">().</span><span class="nx">fadeOut</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">targetItemList</span><span class="p">.</span><span class="nx">prepend</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">fadeIn</span><span class="p">());</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>

<p>One the event is received on the front end, the app will find the toggled item using item&#39;s id, determine the list that the item is original from, infer the targeted list. It will then fade out the item and prepend it to the list targeted list before fading it in again.</p>

<h4>Update Item Event</h4>

<p>There will be few actions that user need to take before being able to send the updated item to the channel. First, a user will need to click on the edit button. A text box with the content of the item is expected to appear and user can key in the new description. He will then hits enter to submit the new description for that item. Hence, let&#39;s start with creating a function to listen to the click <code>edit</code> button event. Let&#39;s named it <code>bindEventForEditingsItem</code> and call this function in call this function inside <code>bindAndListenToEvents</code> function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">bindEventForEditingsItem</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">toDoListContainer</span><span class="p">.</span><span class="nx">delegate</span><span class="p">(</span><span class="s2">&quot;span.edit-item&quot;</span><span class="p">,</span> <span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">itemContainer</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">parent</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">itemDescription</span> <span class="o">=</span> <span class="nx">itemContainer</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;span.item-description&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">editItemDescription</span> <span class="o">=</span> <span class="nx">itemContainer</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;span.edit-item-description&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">itemDescription</span><span class="p">.</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s2">&quot;hidden&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">editItemDescription</span><span class="p">.</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s2">&quot;hidden&quot;</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;input&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="nx">itemDescription</span><span class="p">.</span><span class="nx">html</span><span class="p">()).</span><span class="nx">focus</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">hasClass</span><span class="p">(</span><span class="s2">&quot;cancel-edit-item&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s2">&quot;edit&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s2">&quot;cancel&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span><span class="c1">//end else</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s2">&quot;cancel-edit-item&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Let&#39;s go through the above code:</p>

<ul>
<li>On line 3, we will find the item container, which is an <code>li</code> DOM.</li>
<li>On line 4, we will find the <code>item-description</code> span.</li>
<li>On line 5, we will find the <code>edit-item-description</code> span which contains the text box inside.</li>
<li>On line 6, we will just toggle show/hide the item description. </li>
<li>On line 7, we will just toggle show/hide the item description text box container and assign the text box value to be the description of the item.</li>
<li>From line 8 - 12, we wiill show the approriate text for the <code>edit</code> button after being clicked. If the item is not edited at that moment, the text will be set to <code>edit</code>, otherwise, it will be set to <code>cancel</code> instead.</li>
<li>On line 13, we will toggle the <code>cancel-edit-item</code> class the <code>edit</code> button just to mark if the item is being edited.</li>
</ul>

<p>Next, we are going to define the listener for the event that user hits enter on the edit item text box to commit the changes he/she has made. Let&#39;s create a function named <code>bindEventsForUpdatingItem</code> for this purpose and call this function inside <code>bindAndListenToEvents</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">bindEventsForUpdatingItem</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">channel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">toDoListContainer</span><span class="p">.</span><span class="nx">delegate</span><span class="p">(</span><span class="s2">&quot;span.edit-item-description input&quot;</span><span class="p">,</span> <span class="s2">&quot;keypress&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span> <span class="o">==</span> <span class="mi">13</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">newDescription</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">itemContainer</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">parents</span><span class="p">(</span><span class="s2">&quot;li:first&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">itemDescription</span> <span class="o">=</span> <span class="nx">itemContainer</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;span.item-description&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">itemCheckBox</span> <span class="o">=</span> <span class="nx">itemContainer</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;input.item-done&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">editItemLink</span> <span class="o">=</span> <span class="nx">itemContainer</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;span.edit-item&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">editItemDescription</span> <span class="o">=</span> <span class="nx">itemContainer</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;span.edit-item-description&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">itemDescription</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="nx">newDescription</span><span class="p">).</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s2">&quot;hidden&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">editItemDescription</span><span class="p">.</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s2">&quot;hidden&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">editItemLink</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="s2">&quot;edit&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">channel</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s2">&quot;update:item&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">item_id</span><span class="o">:</span> <span class="nx">itemCheckBox</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;id&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&quot;item_&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">item</span><span class="o">:</span> <span class="p">{</span> <span class="nx">description</span><span class="o">:</span> <span class="nx">newDescription</span> <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span><span class="c1">//end if</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<ul>
<li>On line 5 - 10 of the above code, we are assigning the approriate DOMs for those that we need. Then we assign back the item description to the description  span on line 11, hide the edit textbox container on line 12 and set the edit link to show the <code>edit</code> text.</li>
<li>From line 15 - 17, we are sending back the event <code>update:item</code> back to server with the item&#39;s ID and its new description. On the server, the application will update the item description and broadcast the event <code>update:item</code>. </li>
<li>We will need to add in the function to listen to the event <code>update:item</code> as the result of the server&#39;s broadcast. Let&#39;s name the function <code>listenToUpdatingItemEvent</code> and call this function inside <code>bindAndListToEvents</code> function:</li>
</ul>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">listenToUpdatingItemEvent</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">channel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">channel</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;update:item&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">item</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">item</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">toDoListContainer</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;#item_&quot;</span> <span class="o">+</span> <span class="nx">item</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">parent</span><span class="p">().</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;span.item-description&quot;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">description</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Once the event is received on the client side, the app will find the approriate item given the item&#39;s id and update the description span of that item according to the received item&#39;s description.</p>

<h4>Delete Item event</h4>

<p>We will also need to bind an event to the delete button next to each of item to trigger <code>delete:item</code> event when user hits this link. Let&#39;s create function named <code>bindEventsForDeletingItem</code> and call this function inside <code>bindAndListToEvents</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">bindEventsForDeletingItem</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">channel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">toDoListContainer</span><span class="p">.</span><span class="nx">delegate</span><span class="p">(</span><span class="s2">&quot;span.delete-item&quot;</span><span class="p">,</span> <span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">itemContainer</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">parent</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">itemContainer</span><span class="p">.</span><span class="nx">fadeOut</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">itemCheckBox</span> <span class="o">=</span> <span class="nx">itemContainer</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;input.item-done&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">itemContainer</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span> <span class="c1">// remove the item from the list</span>
</span><span class='line'>      <span class="nx">channel</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s2">&quot;delete:item&quot;</span><span class="p">,</span> <span class="p">{</span><span class="nx">item_id</span><span class="o">:</span> <span class="nx">itemCheckBox</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;id&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&quot;item_&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>After the server receives this <code>delete:item</code> event, it will broadcast this event <code>delete:item</code> with the deleted item. Hence, let&#39;s implement a function to listen to this broadcast event and remove the item accordingly. Let&#39;s name the  function <code>listenToDeletingItemEvent</code> and call its inside <code>bindAndListToEvents</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">listenToDeletingItemEvent</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">channel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">channel</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;delete:item&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">item</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">item</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">toDoListContainer</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;#item_&quot;</span> <span class="o">+</span> <span class="nx">item</span><span class="p">.</span><span class="nx">id</span><span class="p">).</span><span class="nx">parent</span><span class="p">().</span><span class="nx">fadeIn</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">remove</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h4>Arrange Items event</h4>

<p>When a user clicks on the link Arrange Items, the list of items will need to become sortable, i.e. the item can be dragged to different places. We will need a function to cater for this. Let&#39;s create a function named <code>bindEventsForArrangingItems</code> and call this function inside inside <code>bindAndListToEvents</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">bindEventsForArrangingItems</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">channel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;span.arrange-items&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">forList</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;for&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">listUl</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">forList</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">listUl</span><span class="p">.</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s2">&quot;arranging&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">listUl</span><span class="p">.</span><span class="nx">hasClass</span><span class="p">(</span><span class="s2">&quot;arranging&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s2">&quot;I&#39;m done with arrangement&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">sortable</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Sortable</span><span class="p">(</span><span class="nx">listUl</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">ghostClass</span><span class="o">:</span> <span class="s2">&quot;sortable-ghost&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">onUpdate</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">listOfOrderedIds</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>          <span class="nx">listUl</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;li&quot;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">listOfOrderedIds</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;input.item-done&quot;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;id&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&quot;item_&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">));</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>          <span class="nx">channel</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s2">&quot;arrange:items&quot;</span><span class="p">,</span> <span class="p">{</span><span class="nx">item_ids</span><span class="o">:</span> <span class="nx">listOfOrderedIds</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">),</span> <span class="nx">for_list</span><span class="o">:</span> <span class="nx">forList</span><span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>      <span class="nx">app</span><span class="p">.</span><span class="nx">sortableCollection</span><span class="p">[</span><span class="nx">forList</span><span class="p">]</span> <span class="o">=</span> <span class="nx">sortable</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span><span class="c1">//end if</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s2">&quot;Arrange Items&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">app</span><span class="p">.</span><span class="nx">sortableCollection</span><span class="p">[</span><span class="nx">forList</span><span class="p">].</span><span class="nx">destroy</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">app</span><span class="p">.</span><span class="nx">sortableCollection</span><span class="p">[</span><span class="nx">forList</span><span class="p">]</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span><span class="c1">//end else</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>There are quite a bit of things here so let&#39;s quickly go through a few of them:</p>

<ul>
<li>On line 4, we are getting the <code>for</code> attribute of the <code>arrange-items</code> link. This <code>for</code> value will be the DOM&#39;s id of the targeted list. Hence on line 5, we can retrieve out the list using the id on line 4. </li>
<li>On line 6, we toggle the class <code>arranging</code> and check on line 7 if the list is in <code>arranging</code> mode.</li>
<li>On line 9 - 18, we then create a sortable list based on  the current item list. When an item is dropped on the list, the <code>onUpdate</code> function is triggered. It will then calculate the list of the IDs following the new order and send back this list of ids back to the server tapping on the event <code>arrange:items</code>.</li>
<li>On line 19, we keep the sortable object inside the <code>sortableCollection</code> object so that it can be <code>destroy()</code> on line 23 later  when user click on the <code>I&#39;m done with the arrangement</code> link. </li>
</ul>

<p>As the server will broadcast the event <code>arrange:items</code>, let&#39;s create function named <code>listenToArrangingItemsEvent</code> to listen to this event. Remember to call <code>listenToArrangingItemsEvent</code> function on <code>bindAndListToEvents</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">listenToArrangingItemsEvent</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">channel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">channel</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;arrange:items&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">itemIds</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="s2">&quot;item_ids&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">forList</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="s2">&quot;for_list&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">listUl</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">forList</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">itemIdsArray</span> <span class="o">=</span> <span class="nx">itemIds</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">sortable</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Sortable</span><span class="p">(</span><span class="nx">listUl</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
</span><span class='line'>    <span class="nx">sortable</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="nx">itemIdsArray</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">sortable</span><span class="p">.</span><span class="nx">destroy</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>The server will send back the list of item&#39;s ids the same format when we send the item&#39;s ids to the server (i.e. <code>1,2,3,4</code>) and the DOM id (inside <code>data[for_list</code>) of the targeted list. The list of ids will then be split into an array on line 6. The sortable object is then created on line 7 on top of the targeted list. The sortable object will then trigger the sort function to sort the list based on the received array of ids created on line 6. </p>

<p>That&#39;s it. We are now done with all the events. You can try out the complete application on <a href="http://localhost:4000">http://localhost:4000</a></p>

<h3>Conclusion</h3>

<p>Now, you can sit back, relax and enjoy the real time to do list. Note that, this is just an experiment with javascript and Phoenix channel. If you want to build a better JS code for this to do list, <a href="http://backbonejs.org/">Backbone JS</a>, <a href="https://angularjs.org/">Angular JS</a> or <a href="http://facebook.github.io/react/">ReactJS</a> can do a much better job with shorter source code and more comprehensive comparing to just plain jQuery. We&#39;ll come back to it later in another article.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating Applications From Phoenix 0.4.1 to Phoenix 0.5.0]]></title>
    <link href="http://learnelixir.com/blog/2014/10/29/migrating-applications-from-phoenix-0-dot-4-1-to-phoenix-0-dot-5-0/"/>
    <updated>2014-10-29T06:16:12+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/29/migrating-applications-from-phoenix-0-dot-4-1-to-phoenix-0-dot-5-0</id>
    <content type="html"><![CDATA[<p>Phoenix 0.5.0 was released 2 weeks ago and it was a great release with bug fixes and a lot enhancements, performance tweaks. If you are running your application on Phoenix 0.4.1, it&#39;s now a good time to upgrade your app to utilise the speed of Phoenix 0.5.0. Besides those, there are some backward incompatible changes which may break your app that you should watch out when you upgrade to Phoenix 0.5.0. In this article, we are going to go through in details how to upgrade a Phoenix 0.4.0 application to a Phoenix 0.5.0.</p>

<p>The source code for the Phoenix application after upgrade to 0.5.0, which I applied inside this article is available at:</p>

<p><a href="https://github.com/learnelixir/hardware-zone/tree/phoenix-0.5.0">https://github.com/learnelixir/hardware-zone/tree/phoenix-0.5.0</a></p>

<!--more-->

<p>To start, you will need to branch your application to another branch called phoenix-0.5.0:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git checkout -b phoenix-0.5.0
</span></code></pre></td></tr></table></div></figure>

<h3>Before upgrading</h3>

<p>Before we start any upgrading, it&#39;s important to note that Phoenix 0.5.0 will only run on Elixir 1.0.1 and it&#39;s not compatible with Elixir 1.0.0. Hence you will need to upgrade your Elixir to 1.0.1 first if you have not done so. On your Mac, you can simply run the <code>brew install</code> command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install elixir
</span></code></pre></td></tr></table></div></figure>

<p>On Ubuntu server, you can refer to this updated article - http://learnelixir.com/blog/2014/10/16/deploy-phoenix-application-to-a-ubuntu-server/ - <strong>Step Number 4</strong> on how to bring up your Elixir to version 1.0.1</p>

<h3>Upgrading to Phoenix 0.5.0</h3>

<p>You will need to delete your Phoenix source folder and install the latest one by typing the following command on your terminal. This way, next time, when you generate a new Phoenix application, it will Phoenix 0.5.0:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone https://github.com/phoenixframework/phoenix.git <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>  <span class="nb">cd </span>phoenix <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>  git checkout v0.5.0 <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>  mix <span class="k">do</span> deps.get, compile
</span></code></pre></td></tr></table></div></figure>

<h3>Upgrading application running Phoenix 0.4.1 to Phoenix 0.5.0</h3>

<p>Now enter the application folder that are still running Phoenix 0.4.1. For my case, I will upgrade the hardware zone app described in the <a href="http://learnelixir.com/blog/2014/10/18/seven-restful-actions-in-phoenix-web-app/">Seven RESTful Actions in Phoenix Web App</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/learn/elixir/hardware_zone
</span></code></pre></td></tr></table></div></figure>

<p>And then follow the following steps:</p>

<h4>Step 1 - Change Phoenix version to 0.5.0 in <code>mix.exs</code></h4>

<p>Open <code>mix.exs</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim mix.exs
</span></code></pre></td></tr></table></div></figure>

<p>On <code>def project</code> function, make sure your <code>elixir</code> is using <code>~&gt; 1.0.0</code>. You will also need to add in the <code>compilers</code> line below <code>elixrc_paths</code> line as following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">def</span> <span class="n">project</span> <span class="k">do</span>
</span><span class='line'>  <span class="p">[</span> <span class="ss">app</span><span class="p">:</span> <span class="ss">:hardware_zone</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">version</span><span class="p">:</span> <span class="s2">&quot;0.0.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">elixir</span><span class="p">:</span> <span class="s2">&quot;~&gt; 1.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">elixirc_paths</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;lib&quot;</span><span class="p">,</span> <span class="s2">&quot;web&quot;</span><span class="p">],</span>
</span><span class='line'>    <span class="ss">compilers</span><span class="p">:</span> <span class="p">[</span><span class="ss">:phoenix</span><span class="p">]</span> <span class="o">++</span> <span class="nc">Mix</span><span class="p">.</span><span class="n">compilers</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">deps</span><span class="p">:</span> <span class="n">deps</span> <span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>On <code>defp deps</code> function, make sure <code>phoenix</code> version is now <code>0.5.0</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defp</span> <span class="n">deps</span> <span class="k">do</span>
</span><span class='line'>  <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:phoenix</span><span class="p">,</span> <span class="s2">&quot;0.5.0&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:cowboy</span><span class="p">,</span> <span class="s2">&quot;~&gt; 1.0.0&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:postgrex</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.5&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:ecto</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.2.0&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:plug</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.8.1&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:mogrify</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.1&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>After that, run <code>deps.get, compile</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix <span class="k">do</span> deps.get, compile
</span></code></pre></td></tr></table></div></figure>

<h4>Step 2 - Upgrade config files</h4>

<p>There have a been a huge change in config files in config folder. Those files are <code>config.exs</code>, <code>def.exs</code>, <code>prod.exs</code> and <code>test.exs</code>. Let&#39;s look at them one by one</p>

<h5>config.exs</h5>

<p>Open <code>config.exs</code> file</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim config/config.exs
</span></code></pre></td></tr></table></div></figure>

<p>Inside the function call <code>config :phoenix, HardwareZone.Router, ...</code>, you will need to change the lines for <code>port</code>, <code>ssl</code>, <code>static_assets</code>, <code>cookies</code>, <code>session_key</code> and <code>session_secret</code>:</p>

<ul>
<li>Line <code>port: System.get_env(&quot;PORT&quot;),</code> will need to change to <code>http: [port: System.get_env(&quot;PORT&quot;)],</code>.</li>
<li>Line <code>ssl: false,</code> will need to change to <code>https: false,</code>.</li>
<li>Line <code>cookies: true,</code> will need to be removed.</li>
<li>Line <code>session_key: &quot;_hardware_zone_key&quot;,</code> will need to be removed.</li>
<li>Line <code>session_secret: ...</code>, will need to change to <code>secret_key_base: ...</code></li>
</ul>

<p>Add line <code>url: [host: &quot;localhost&quot;],</code> to be right under <code>config :phoenix, HardwareZone.Router,</code> function call. </p>

<p>Effectively, the function call: <code>config :phoenix, HardwareZone.Router</code> will be like following after change:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">config</span> <span class="ss">:phoenix</span><span class="p">,</span> <span class="nc">HardwareZone.Router</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">url</span><span class="p">:</span> <span class="p">[</span><span class="ss">host</span><span class="p">:</span> <span class="s2">&quot;localhost&quot;</span><span class="p">],</span>
</span><span class='line'>  <span class="ss">http</span><span class="p">:</span> <span class="p">[</span><span class="ss">port</span><span class="p">:</span> <span class="nc">System</span><span class="p">.</span><span class="n">get_env</span><span class="p">(</span><span class="s2">&quot;PORT&quot;</span><span class="p">)],</span>
</span><span class='line'>  <span class="ss">https</span><span class="p">:</span> <span class="no">false</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">secret_key_base</span><span class="p">:</span> <span class="s2">&quot;oXLywfYvLeqUBlTmg2ly4HL64UpJycMiwqG2OlN95TM30AwXqXEFb...&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">catch_errors</span><span class="p">:</span> <span class="no">true</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">debug_errors</span><span class="p">:</span> <span class="no">false</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">error_controller</span><span class="p">:</span> <span class="nc">HardwareZone.PageController</span>
</span></code></pre></td></tr></table></div></figure>

<p>You will also need to remove the entire function call:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">config</span> <span class="ss">:phoenix</span><span class="p">,</span> <span class="ss">:code_reloader</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">enabled</span><span class="p">:</span> <span class="no">false</span>
</span></code></pre></td></tr></table></div></figure> 

<p>And add in the following. Note that you will need to change the key name according to the project&#39;s name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">config</span> <span class="ss">:phoenix</span><span class="p">,</span> <span class="nc">HardwareZone.Router</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">session</span><span class="p">:</span> <span class="p">[</span><span class="ss">store</span><span class="p">:</span> <span class="ss">:cookie</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">key</span><span class="p">:</span> <span class="s2">&quot;_hardware_zone_key&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>That&#39;s all for <code>config.exs</code>. Let&#39;s move on to <code>dev.exs</code></p>

<h5>dev.exs</h5>

<p>Open <code>dev.exs</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim config/dev.exs
</span></code></pre></td></tr></table></div></figure>

<p>Under <code>config :phoenix, HardwareZone.Router,</code> call you will need to remove the following lines:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="ss">port</span><span class="p">:</span> <span class="nc">System</span><span class="p">.</span><span class="n">get_env</span><span class="p">(</span><span class="s2">&quot;PORT&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="mi">4000</span><span class="p">,</span>
</span><span class='line'><span class="ss">ssl</span><span class="p">:</span> <span class="no">false</span><span class="p">,</span>
</span><span class='line'><span class="ss">host</span><span class="p">:</span> <span class="s2">&quot;localhost&quot;</span><span class="p">,</span>
</span><span class='line'><span class="ss">cookies</span><span class="p">:</span> <span class="no">true</span><span class="p">,</span>
</span><span class='line'><span class="ss">session_key</span><span class="p">:</span> <span class="s2">&quot;_hardware_zone_key&quot;</span><span class="p">,</span>
</span><span class='line'><span class="ss">session_secret</span><span class="p">:</span> <span class="s2">&quot;VQP)JU1Z7*5L+^09X*L=6RKN9R1HL0O2E7^(1B%V3W64Z7@J9^7(M&amp;TXW8*C)...&quot;</span><span class="p">,</span>
</span></code></pre></td></tr></table></div></figure>

<p>and add in this line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="ss">http</span><span class="p">:</span> <span class="p">[</span><span class="ss">port</span><span class="p">:</span> <span class="nc">System</span><span class="p">.</span><span class="n">get_env</span><span class="p">(</span><span class="s2">&quot;PORT&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="mi">4000</span><span class="p">],</span>
</span></code></pre></td></tr></table></div></figure>

<p>Also, remove the following block of code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">config</span> <span class="ss">:phoenix</span><span class="p">,</span> <span class="ss">:code_reloader</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">enabled</span><span class="p">:</span> <span class="no">true</span>
</span><span class='line'>
</span><span class='line'><span class="n">config</span> <span class="ss">:logger</span><span class="p">,</span> <span class="ss">:console</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">level</span><span class="p">:</span> <span class="ss">:debug</span>
</span></code></pre></td></tr></table></div></figure>

<p>And add in the following line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">config</span> <span class="ss">:phoenix</span><span class="p">,</span> <span class="ss">:code_reloader</span><span class="p">,</span> <span class="no">true</span>
</span></code></pre></td></tr></table></div></figure>

<p>Effectively, for my case, it will look like following after these changes have been  made:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kn">use</span> <span class="nc">Mix.Config</span>
</span><span class='line'>
</span><span class='line'><span class="n">config</span> <span class="ss">:phoenix</span><span class="p">,</span> <span class="nc">HardwareZone.Router</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">http</span><span class="p">:</span> <span class="p">[</span><span class="ss">port</span><span class="p">:</span> <span class="nc">System</span><span class="p">.</span><span class="n">get_env</span><span class="p">(</span><span class="s2">&quot;PORT&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="mi">4000</span><span class="p">],</span>
</span><span class='line'>  <span class="ss">debug_errors</span><span class="p">:</span> <span class="no">true</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Enables code reloading for development</span>
</span><span class='line'><span class="n">config</span> <span class="ss">:phoenix</span><span class="p">,</span> <span class="ss">:code_reloader</span><span class="p">,</span> <span class="no">true</span>
</span></code></pre></td></tr></table></div></figure>

<p>Let&#39;s move on to <code>prod.exs</code></p>

<h5>prod.exs</h5>

<p>Open <code>prod.exs</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim config/prod.exs
</span></code></pre></td></tr></table></div></figure>

<p>under the function call <code>config :phoenix, HardwareZone.Router,</code>, you will also need to remove the block of code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="ss">port</span><span class="p">:</span> <span class="nc">System</span><span class="p">.</span><span class="n">get_env</span><span class="p">(</span><span class="s2">&quot;PORT&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="mi">4000</span><span class="p">,</span>
</span><span class='line'><span class="ss">ssl</span><span class="p">:</span> <span class="no">false</span><span class="p">,</span>
</span><span class='line'><span class="ss">host</span><span class="p">:</span> <span class="s2">&quot;localhost&quot;</span><span class="p">,</span>
</span><span class='line'><span class="ss">cookies</span><span class="p">:</span> <span class="no">true</span><span class="p">,</span>
</span><span class='line'><span class="ss">session_key</span><span class="p">:</span> <span class="s2">&quot;_hardware_zone_key&quot;</span><span class="p">,</span>
</span><span class='line'><span class="ss">session_secret</span><span class="p">:</span> <span class="s2">&quot;VQP)JU1Z7*5L+^09X*L=6RKN9R1HL0O2E7^(1B%V3W64Z7@J9^7(M&amp;TXW8*C)I....&quot;</span><span class="p">,</span>
</span></code></pre></td></tr></table></div></figure>

<p>and replace by the following code. Note that the secret key is different per application, hence make sure you change it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="ss">url</span><span class="p">:</span> <span class="p">[</span><span class="ss">host</span><span class="p">:</span> <span class="s2">&quot;estark-sands-7697.herokuapp.com&quot;</span><span class="p">],</span>
</span><span class='line'><span class="ss">http</span><span class="p">:</span> <span class="p">[</span><span class="ss">port</span><span class="p">:</span> <span class="nc">System</span><span class="p">.</span><span class="n">get_env</span><span class="p">(</span><span class="s2">&quot;PORT&quot;</span><span class="p">)],</span>
</span><span class='line'><span class="ss">secret_key_base</span><span class="p">:</span> <span class="s2">&quot;oXLywfYvLeqUBlTmg2ly4HL64UpJycMiwqG2OlN95TM30AwXqXEFbwjAbD/tgnfDDNpqFeEc...&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Under <code>config :logger, :console,</code> call, remove the line <code>metadata: [:request_id]</code>.</p>

<p>After all the <code>prod.exs</code> should look like below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kn">use</span> <span class="nc">Mix.Config</span>
</span><span class='line'>
</span><span class='line'><span class="n">config</span> <span class="ss">:phoenix</span><span class="p">,</span> <span class="nc">HardwareZone.Router</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">url</span><span class="p">:</span> <span class="p">[</span><span class="ss">host</span><span class="p">:</span> <span class="s2">&quot;estark-sands-7697.herokuapp.com&quot;</span><span class="p">],</span>
</span><span class='line'>  <span class="ss">http</span><span class="p">:</span> <span class="p">[</span><span class="ss">port</span><span class="p">:</span> <span class="nc">System</span><span class="p">.</span><span class="n">get_env</span><span class="p">(</span><span class="s2">&quot;PORT&quot;</span><span class="p">)],</span>
</span><span class='line'>  <span class="ss">secret_key_base</span><span class="p">:</span> <span class="s2">&quot;oXLywfYvLeqUBlTmg2ly4HL64UpJycMiwqG2OlN95TM30AwXqXEFbwjAbD/tgnfDDNpq....&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">config</span> <span class="ss">:logger</span><span class="p">,</span> <span class="ss">:console</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">level</span><span class="p">:</span> <span class="ss">:info</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now, let&#39;s move on to <code>prod/test.exs</code>:</p>

<h5>test.exs</h5>

<p>Open <code>test.exs</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim config/test.exs
</span></code></pre></td></tr></table></div></figure>

<p>under the function call <code>config :phoenix, HardwareZone.Router,</code>, you will also need to remove the block of code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="ss">port</span><span class="p">:</span> <span class="nc">System</span><span class="p">.</span><span class="n">get_env</span><span class="p">(</span><span class="s2">&quot;PORT&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="mi">4000</span><span class="p">,</span>
</span><span class='line'><span class="ss">ssl</span><span class="p">:</span> <span class="no">false</span><span class="p">,</span>
</span><span class='line'><span class="ss">host</span><span class="p">:</span> <span class="s2">&quot;localhost&quot;</span><span class="p">,</span>
</span><span class='line'><span class="ss">cookies</span><span class="p">:</span> <span class="no">true</span><span class="p">,</span>
</span><span class='line'><span class="ss">session_key</span><span class="p">:</span> <span class="s2">&quot;_hardware_zone_key&quot;</span><span class="p">,</span>
</span><span class='line'><span class="ss">session_secret</span><span class="p">:</span> <span class="s2">&quot;VQP)JU1Z7*5L+^09X*L=6RKN9R1HL0O2E7^(1B%V3W64Z7@J9^7(M&amp;TXW8*C)I....&quot;</span><span class="p">,</span>
</span></code></pre></td></tr></table></div></figure>

<p>and replace by:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="ss">http</span><span class="p">:</span> <span class="p">[</span><span class="ss">port</span><span class="p">:</span> <span class="nc">System</span><span class="p">.</span><span class="n">get_env</span><span class="p">(</span><span class="s2">&quot;PORT&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="mi">4001</span><span class="p">],</span>
</span><span class='line'><span class="ss">catch_errors</span><span class="p">:</span> <span class="no">false</span>
</span></code></pre></td></tr></table></div></figure> 

<p>You will also need to remove the 2 function calls:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">config</span> <span class="ss">:phoenix</span><span class="p">,</span> <span class="ss">:code_reloader</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">enabled</span><span class="p">:</span> <span class="no">true</span>
</span><span class='line'>
</span><span class='line'><span class="n">config</span> <span class="ss">:logger</span><span class="p">,</span> <span class="ss">:console</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">level</span><span class="p">:</span> <span class="ss">:debug</span>
</span></code></pre></td></tr></table></div></figure>

<p>Effectively, <code>test.exs</code> will look like following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kn">use</span> <span class="nc">Mix.Config</span>
</span><span class='line'>
</span><span class='line'><span class="n">config</span> <span class="ss">:phoenix</span><span class="p">,</span> <span class="nc">HardwareZone.Router</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">http</span><span class="p">:</span> <span class="p">[</span><span class="ss">port</span><span class="p">:</span> <span class="nc">System</span><span class="p">.</span><span class="n">get_env</span><span class="p">(</span><span class="s2">&quot;PORT&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="mi">4001</span><span class="p">],</span>
</span><span class='line'>  <span class="ss">catch_errors</span><span class="p">:</span> <span class="no">false</span>
</span></code></pre></td></tr></table></div></figure>

<p>That&#39;s all for config files. We can move on to the next one: <code>test/test_helper.exs</code></p>

<h4>Step 3 - <code>test/test_helper.exs</code></h4>

<p>Open <code>test/test_helper.exs</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim <span class="nb">test</span>/test_helper.exs
</span></code></pre></td></tr></table></div></figure>

<p>and remove the top line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="nc">Phoenix.CodeReloader</span><span class="p">.</span><span class="n">reload!</span>
</span></code></pre></td></tr></table></div></figure>

<h4>Step 4 - router.ex</h4>

<p>Open <code>router.ex</code>: </p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/router.ex
</span></code></pre></td></tr></table></div></figure>

<p>In this file, you will need to move all the current routes to be under <code>scope &quot;/&quot;</code>. This change is because in Phoenix 0.5.0 introduces pipeline DSL whereby a arrival request will be eventually dispatched to a desired end-point. More information can be found <a href="https://github.com/phoenixframework/phoenix/blob/bdd9a88324d7a95fd54ba0d9904f7ff304f019d0/lib/phoenix/router.ex#L113-L220">here</a>. Let&#39;s start by adding on the following</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">scope</span> <span class="s2">&quot;/&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">pipe_through</span> <span class="ss">:browser</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>And then copy all your existing routes to the <code>...</code> position in the above code. For our Hardware Zone application, the end result is as following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">scope</span> <span class="s2">&quot;/&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">pipe_through</span> <span class="ss">:browser</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">get</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="nc">HardwareZone.HardwaresController</span><span class="p">,</span> <span class="ss">:index</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:root</span>
</span><span class='line'>    <span class="n">resources</span> <span class="s2">&quot;/hardwares&quot;</span><span class="p">,</span> <span class="nc">HardwareZone.HardwaresController</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure> 

<p>That&#39;s all for <code>router.ex</code>, let&#39;s move on to upgrade our controllers</p>

<h4>Step 5 - Controllers</h4>

<p>Open all your controllers and put in <code>plug :action</code> under your controller name, aka.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">HardwareZone.HardwaresController</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Phoenix.Controller</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">plug</span> <span class="ss">:action</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">index</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="n">_params</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>

<p>That&#39;s all for Controllers. Let&#39;s move on to view.</p>

<h4>Step 6 - Views</h4>

<p>You will need to open <code>web/views.ex</code> file</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/views.ex
</span></code></pre></td></tr></table></div></figure>

<p>and add in the following line under the <code>import</code> <code>Router.Helpers</code> line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kn">alias</span> <span class="nc">Phoenix.Controller.Flash</span>
</span></code></pre></td></tr></table></div></figure>

<p>There are no step 7 :-). Happy Upgrading.</p>

<h3>Wrap Up</h3>

<p>That&#39;s all how we migrate from Phoenix 0.4.1 to Phoenix 0.5.0. Please leave any comments if you find anyway better way. All your comments and questions are always welcomed. :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Image Upload in Phoenix Web App]]></title>
    <link href="http://learnelixir.com/blog/2014/10/23/image-upload-in-phoenix-web-app/"/>
    <updated>2014-10-23T06:46:02+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/23/image-upload-in-phoenix-web-app</id>
    <content type="html"><![CDATA[<p><strong>UPDATE</strong> on 30th Oct 14: I have updated this article in order to work with Phoenix framework version 0.5.0. Previously the Phoenix framework used in this article was 0.4.1
<hr/><br/>
I was trying to find on Internet a way to receive uploaded image and format the uploaded image in multiple styles for Elixir and Phoenix but unable to find one. Hence I decide to make a library to handle the image upload and blog about it. The end point that we would like to have in this article is the hardware gapplication that we have in the last article integrated with this library to allow user to upload a photo for each hardware. Here is the screenshot of the finished application:</p>

<p><img src='http://learnelixir.com/images/upload_image/final.png' width='800' height='394'/></p>

<!-- more -->

<ul>
<li>The source code is available on <a href="https://github.com/learnelixir/hardware-zone/tree/phoenix-0.5.0">https://github.com/learnelixir/hardware-zone/tree/phoenix-0.5.0</a></li>
<li>The updated application is also now lived at http://phoenix-hardware-zone.herokuapp.com</li>
</ul>

<p>In case you missed it, here is the URL linked to last article http://learnelixir.com/blog/2014/10/18/seven-restful-actions-in-phoenix-web-app/ which is an application that lets user do basic functionalities with hardware entity. What we are going to implement in this article is to allow user to upload a photo for each of the hardwares. Hence it will look more attractive to potential buyer. Let&#39;s start by adding the some more dependencies to the project.</p>

<h3>0 - Dependencies - More dependencies</h3>

<p>Add <code>plug</code> and <code>mogrify</code> library as extra depenecies inside your <code>mix.exs</code> file as of following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defp</span> <span class="n">deps</span> <span class="k">do</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span><span class="ss">:phoenix</span><span class="p">,</span> <span class="s2">&quot;0.5.0&quot;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="ss">:cowboy</span><span class="p">,</span> <span class="s2">&quot;~&gt; 1.0.0&quot;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="ss">:postgrex</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.5&quot;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="ss">:ecto</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.2.0&quot;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="ss">:plug</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.7&quot;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="ss">:mogrify</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.1&quot;</span><span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<ul>
<li><code>plug</code> will be used to retrieve the MIME types.</li>
<li><code>mogrify</code> will be used for image processing. It is actually ImageMagick wrapper.</li>
</ul>

<p>Then run <code>deps.get</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix deps.get
</span></code></pre></td></tr></table></div></figure>

<h3>1 - Migration - More columns</h3>

<p>Now add 4 additional columns to the <code>hardware</code> model. The uploaded photo information will be captured using these fields:</p>

<ul>
<li><code>photo_file_name</code>: is used to store photo&#39;s file name.</li>
<li><code>photo_content_type</code>: is used to store photo&#39;s content type. </li>
<li><code>photo_file_size</code>: is used to store photo&#39;s file size in byte unit. </li>
<li><code>photo_updated_at</code>: is used to store the time stamp that photo last updated.</li>
</ul>

<p>To do this, we will need to generate another migration file by running this command from the terminal</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix ecto.gen.migration HardwareZone.Repo add_photo_to_hardware
</span></code></pre></td></tr></table></div></figure>

<p>Let open this newly generated migration file and add these 4 columns. In my case, it is <code>priv/repo/migrations/20141022230017_add_photo_to_hardware.exs</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim priv/repo/migrations/20141022230017_add_photo_to_hardware.exs
</span></code></pre></td></tr></table></div></figure>

<p>and replace by the following code content:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">HardwareZone.Repo.Migrations.AddPhotoToHardware</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Ecto.Migration</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">up</span> <span class="k">do</span>
</span><span class='line'>    <span class="s2">&quot;ALTER TABLE hardwares </span><span class="err">\</span><span class="s2"></span>
</span><span class='line'><span class="s2">        ADD COLUMN photo_file_name varchar(255), </span><span class="err">\</span><span class="s2"></span>
</span><span class='line'><span class="s2">        ADD COLUMN photo_content_type varchar(255), </span><span class="err">\</span><span class="s2"></span>
</span><span class='line'><span class="s2">        ADD COLUMN photo_file_size integer, </span><span class="err">\</span><span class="s2"></span>
</span><span class='line'><span class="s2">        ADD COLUMN photo_updated_at timestamp;&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">down</span> <span class="k">do</span>
</span><span class='line'>    <span class="s2">&quot;ALTER TABLE hardwares </span><span class="err">\</span><span class="s2"></span>
</span><span class='line'><span class="s2">        DROP COLUMN photo_file_name, </span>
</span><span class='line'><span class="s2">        DROP COLUMN photo_content_type, </span>
</span><span class='line'><span class="s2">        DROP COLUMN photo_file_size, </span>
</span><span class='line'><span class="s2">        DROP COLUMN photo_updated_at;&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then from your command line, run the migration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix ecto.migrate HardwareZone.Repo
</span></code></pre></td></tr></table></div></figure>

<p>In the last step in this section, you will need to specify these fields in the model so that it can be recognised by Ecto library. You can do this by editing <code>web/models/hardware.ex</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/models/hardware.ex
</span></code></pre></td></tr></table></div></figure>

<p>and modify the schema <code>hardwares</code> like following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">schema</span> <span class="s2">&quot;hardwares&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:description</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:manufacturer</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:sale_contact_number</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:photo_file_name</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:photo_file_size</span><span class="p">,</span> <span class="ss">:integer</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:photo_updated_at</span><span class="p">,</span> <span class="ss">:datetime</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:photo_content_type</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Note that we have added into 4 extra fields here corresponding with the fields that we have added in the database earlier.</p>

<h3>2 - File Upload field in form view</h3>

<p>To let user choose a file from the form, we will need to add an upload field in our form. So let&#39;s go ahead and edit the hardware form:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="err">$</span> <span class="n">vim</span> <span class="n">web</span><span class="o">/</span><span class="n">templates</span><span class="o">/</span><span class="n">hardwares</span><span class="o">/</span><span class="n">form</span><span class="p">.</span><span class="n">html</span><span class="p">.</span><span class="n">eex</span>
</span></code></pre></td></tr></table></div></figure>

<p>then add in the following HTML code just below the <code>if @hardware.id do</code> condition block</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;form-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;hardware[photo]&quot;</span><span class="nt">&gt;</span>Photo<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;file&quot;</span> <span class="na">name=</span><span class="s">&quot;hardware[photo]&quot;</span> <span class="na">class=</span><span class="s">&quot;form-control&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now try to visit the new hardware page <a href="http://localhost:4000/hardwares/new">http://localhost:4000/hardwares/new</a>, select a random file and click save then check the server log. What you will see is the parameter as something similar to what is inside the below screenshot I took from my Mac:</p>

<p><img class="center" src="http://learnelixir.com/images/upload_image/upload_image_terminal.png" width="637" height="269" title="image" alt="images"></p>

<p>Let&#39;s reformat the parameters for readable purpose:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Parameters: %<span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;hardware&quot;</span> <span class="o">=</span>&gt; %<span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;description&quot;</span> <span class="o">=</span>&gt; <span class="s2">&quot;&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;manufacturer&quot;</span> <span class="o">=</span>&gt; <span class="s2">&quot;&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;name&quot;</span> <span class="o">=</span>&gt; <span class="s2">&quot;&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;photo&quot;</span> <span class="o">=</span>&gt; %Plug.Upload<span class="o">{</span>
</span><span class='line'>      content_type: <span class="s2">&quot;image/png&quot;</span>,
</span><span class='line'>      filename: <span class="s2">&quot;Screen Shot 2014-10-23 at 6.43.12 am.png&quot;</span>,
</span><span class='line'>      path: <span class="s2">&quot;/var/folders/jk/c2560ztn1394tl7c_67yx8900000gn/T//plug-1414/multipart-68820-690153&quot;</span>
</span><span class='line'>    <span class="o">}</span>,
</span><span class='line'>    <span class="s2">&quot;sale_contact_number&quot;</span> <span class="o">=</span>&gt; <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>As you can see, the parameter photo has been formated and nicely and gave to us as <code>Plug.Upload</code> struct thank to phoenix framework. From here, we will only need to take in this struct, save and make a thumbnail out of this photo. Let&#39;s move on to next step to process this <code>Plug.Upload</code> struct in a library file.</p>

<h3>3 - Process <code>Plug.Upload</code> struct</h3>

<p>You can start by creating a library file and named it <code>up_plug.ex</code> and put in under <code>lib</code> folder:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim lib/up_plug.ex
</span></code></pre></td></tr></table></div></figure>

<p>and paste in the following initial code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">UpPlug</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">import</span> <span class="nc">Mogrify</span>
</span><span class='line'>  <span class="kd">defstruct</span> <span class="ss">plug</span><span class="p">:</span> <span class="no">nil</span><span class="p">,</span> <span class="ss">model</span><span class="p">:</span> <span class="no">nil</span><span class="p">,</span> <span class="ss">attribute_name</span><span class="p">:</span> <span class="no">nil</span><span class="p">,</span> <span class="ss">styles</span><span class="p">:</span> <span class="p">%{}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here we have defined a <code>defmodule</code> named <code>UpPlug</code>, and at the same time we have defined it to be a struct by using the command <code>defstruct</code> on line 3 of the code. <code>defstruct</code> will enable us create <code>UnPlug</code> struct later with the attributes <code>plug</code>, <code>model</code>, <code>attribute_name</code> and <code>styles</code> witht corresponding default value specified on the same line. </p>

<p>To make our library solid and roboust, we also need a test file for it. Let&#39;s create <code>up_plug_test.exs</code> in <code>test</code> folder: </p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim <span class="nb">test</span>/up_plug_test.exs
</span></code></pre></td></tr></table></div></figure>

<p>with the following initial code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">UpPlugTest</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">ExUnit.Case</span>
</span><span class='line'>  <span class="kn">import</span> <span class="nc">UpPlug</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>What we want to achieve are in this library can be seen below. And of course, it can be extended eventually to become a library that support uploading file. But for the scope of this article, let&#39;s just stick with the following requirements:</p>

<ul>
<li>Create a function which takes in a <code>UpPlug</code> struct argument containing the <code>Plug.Upload</code> struct, the model struct this upload belongs to, the name of the uploaded file attribute (i.e. in this case it is <code>photo</code>) and the styles and saves the uploaded file, at the same time created all the formatted photo based on the input <code>styles</code>. In code, I would love to have this function call:</li>
</ul>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="c1"># For processing uploaded file </span>
</span><span class='line'><span class="nc">UpPlug</span><span class="p">.</span><span class="n">process_upload_plug</span><span class="p">(</span>
</span><span class='line'>  <span class="p">%</span><span class="nc">UpPlug</span><span class="p">{</span>
</span><span class='line'>    <span class="ss">model</span><span class="p">:</span> <span class="p">%</span><span class="nc">Hardware</span><span class="p">{</span><span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span>
</span><span class='line'>    <span class="ss">plug</span><span class="p">:</span> <span class="p">%</span><span class="nc">Plug.Upload</span><span class="p">{</span>
</span><span class='line'>      <span class="ss">filename</span><span class="p">:</span> <span class="s2">&quot;sample.png&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">path</span><span class="p">:</span> <span class="s2">&quot;...&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">content_type</span><span class="p">:</span> <span class="s2">&quot;image/png&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="ss">attribute_name</span><span class="p">:</span> <span class="ss">:photo</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">styles</span><span class="p">:</span> <span class="p">%{</span>
</span><span class='line'>      <span class="ss">thumb</span><span class="p">:</span> <span class="s2">&quot;50x50&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">medium</span><span class="p">:</span> <span class="s2">&quot;120x120&gt;&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<ul>
<li><p>The file should be stored in the folder structure such that there are max 1,000 files in each folder. This is to maximize the performance of linux folder structure. If there are more than 1,000 files in a folder, the file retrieval will be slower. For this we will follow the structure that Paperclip library (https://github.com/thoughtbot/paperclip) defined, i.e. first file will be stored in the folder <code>000/000/001</code>, second file will be on <code>000/000/002</code>, and say the 1001st file will be stored in folder <code>000/001/001</code> and so on.</p></li>
<li><p>If the uploaded file is not an image file, we can simply store the file in the <code>original</code> subfolder of the folder mentioned above. </p></li>
<li><p>If the uploaded file is an image, we will let user specify styles attributed defined in <code>UpPlug</code> struct argument in order to generate different styles for the photo. For example, a sample of styles parameter is as following and when calling the process image function, it will create 3 folders under the folder structure that was mentioned above: <code>original</code> for storing the user uploaded original image, <code>medium</code> is for storing the <code>120x120&gt;</code> processed image and a <code>thumb</code> folder is for storing <code>50x50&gt;</code> processed image. </p></li>
</ul>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'>  <span class="p">%{</span>
</span><span class='line'>    <span class="ss">styles</span><span class="p">:</span> <span class="p">%{</span>
</span><span class='line'>      <span class="ss">thumb</span><span class="p">:</span> <span class="s2">&quot;50x50&gt;&quot;</span>
</span><span class='line'>      <span class="ss">medium</span><span class="p">:</span> <span class="s2">&quot;120x120&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<ul>
<li>So let&#39;s say I upload a file called <code>sample.png</code> into model <code>HardwareZone.Hardware</code>, and I specify with 2 styles <code>thumb</code> and <code>medium</code>. After the upload process is completed, I should have 3 files stored at the following paths which are relative to the project path:</li>
</ul>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>priv/static/system/hardware_zone/hardware/photo/000/000/001/original/sample.png
</span><span class='line'>priv/static/system/hardware_zone/hardware/photo/000/000/001/thumb/sample.png
</span><span class='line'>priv/static/system/hardware_zone/hardware/photo/000/000/001/medium/sample.png
</span></code></pre></td></tr></table></div></figure>

<ul>
<li><p>The file is supposed to be stored in <code>priv/static</code> because that&#39;s the only place that the browser can access the file directly. In the same folder, you also can see the assets folder <code>css</code>, <code>images</code> and <code>js</code>.</p></li>
<li><p>The library should allow us to retrieve back the path and the URLs to the file for different formats for displaying purposes. The function can be envisioned as like following:</p></li>
</ul>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="nc">UpPlug</span><span class="p">.</span><span class="n">attachment_url_for</span><span class="p">(</span>
</span><span class='line'>  <span class="p">%{</span><span class="nc">Hardware</span><span class="p">{</span>
</span><span class='line'>    <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">photo_file_name</span><span class="p">:</span> <span class="s2">&quot;sample.png&quot;</span>
</span><span class='line'>  <span class="p">},</span> <span class="ss">:photo</span><span class="p">,</span> <span class="ss">:thumb</span><span class="p">,</span> <span class="s2">&quot;/images/no_photo.png&quot;&quot;)</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span><span class="s2"> Arguments order:</span>
</span><span class='line'><span class="err">#</span><span class="s2"></span>
</span><span class='line'><span class="err">#</span><span class="s2"> - model struct</span>
</span><span class='line'><span class="err">#</span><span class="s2"> - attachment attribute name</span>
</span><span class='line'><span class="err">#</span><span class="s2"> - style (default is original)</span>
</span><span class='line'><span class="err">#</span><span class="s2"> - default_url (will be served when no image)</span>
</span></code></pre></td></tr></table></div></figure>

<p>With these in mind, let&#39;s create the first test case for this <code>UpPlug</code> library. But before that, we will need to create some sample data. Open your file <code>test/test_helper.exs</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim <span class="nb">test</span>/test_helper.exs
</span></code></pre></td></tr></table></div></figure>

<p>and add in <code>SampleModel</code> struct at the end of the file. This will be the model which the uploaded photo is attached to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">SampleModel</span> <span class="k">do</span>
</span><span class='line'>  <span class="kd">defstruct</span> <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">photo_file_size</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="err">\</span>
</span><span class='line'>            <span class="ss">photo_file_name</span><span class="p">:</span> <span class="no">nil</span><span class="p">,</span> <span class="ss">photo_content_type</span><span class="p">:</span> <span class="no">nil</span><span class="p">,</span> <span class="ss">photo_updated_at</span><span class="p">:</span> <span class="no">nil</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Create a folder <code>sample_data</code> in your project folder:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir sample_data
</span></code></pre></td></tr></table></div></figure>

<p>Then copy files <code>samples.png</code> (<a href="https://raw.githubusercontent.com/learnelixir/hardware-zone/master/sample_data/sample.png">https://raw.githubusercontent.com/learnelixir/hardware-zone/master/sample_data/sample.png</a>) and <code>sample.pdf</code> (<a href="https://github.com/learnelixir/hardware-zone/raw/master/sample_data/sample.pdf">https://github.com/learnelixir/hardware-zone/raw/master/sample_data/sample.pdf</a>) into <code>sample_data</code> folder. You might want to change the path of these 2 sample files by modify the following code on line 7 and 12. Here is the <code>setup</code> callback in <code>test/up_plug_test.exs</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">setup</span> <span class="k">do</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="ss">:ok</span><span class="p">,</span> <span class="err">\</span>
</span><span class='line'>    <span class="ss">sample_image_plug</span><span class="p">:</span> <span class="p">%</span><span class="nc">Plug.Upload</span><span class="p">{</span> <span class="err">\</span>
</span><span class='line'>      <span class="ss">content_type</span><span class="p">:</span> <span class="s2">&quot;image/png&quot;</span><span class="p">,</span> <span class="err">\</span>
</span><span class='line'>      <span class="ss">filename</span><span class="p">:</span> <span class="s2">&quot;sample.png&quot;</span><span class="p">,</span> <span class="err">\</span>
</span><span class='line'>      <span class="ss">path</span><span class="p">:</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nc">Path</span><span class="p">.</span><span class="n">expand</span><span class="p">(</span><span class="s2">&quot;../&quot;</span><span class="p">,</span> <span class="bp">__DIR__</span><span class="p">)</span><span class="si">}</span><span class="s2">/sample_data/sample.png&quot;</span> <span class="err">\</span>
</span><span class='line'>    <span class="p">},</span> <span class="err">\</span>
</span><span class='line'>    <span class="ss">sample_document_plug</span><span class="p">:</span> <span class="p">%</span><span class="nc">Plug.Upload</span><span class="p">{</span> <span class="err">\</span>
</span><span class='line'>      <span class="ss">content_type</span><span class="p">:</span> <span class="s2">&quot;application/pdf&quot;</span><span class="p">,</span> <span class="err">\</span>
</span><span class='line'>      <span class="ss">filename</span><span class="p">:</span> <span class="s2">&quot;sample.pdf&quot;</span><span class="p">,</span> <span class="err">\</span>
</span><span class='line'>      <span class="ss">path</span><span class="p">:</span>  <span class="s2">&quot;</span><span class="si">#{</span><span class="nc">Path</span><span class="p">.</span><span class="n">expand</span><span class="p">(</span><span class="s2">&quot;../&quot;</span><span class="p">,</span> <span class="bp">__DIR__</span><span class="p">)</span><span class="si">}</span><span class="s2">/sample_data/sample.pdf&quot;</span> <span class="err">\</span>
</span><span class='line'>    <span class="p">},</span> <span class="err">\</span>
</span><span class='line'>    <span class="ss">model_struct</span><span class="p">:</span> <span class="p">%</span><span class="nc">SampleModel</span><span class="p">{},</span> <span class="err">\</span>
</span><span class='line'>    <span class="ss">photo_attribute_name</span><span class="p">:</span> <span class="ss">:photo</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">document_attribute_name</span><span class="p">:</span> <span class="ss">:spec</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">setup</span> <span class="n">context</span> <span class="k">do</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="ss">:ok</span><span class="p">,</span>
</span><span class='line'>    <span class="nc">Map</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="ss">:up_plug</span><span class="p">,</span> <span class="p">%</span><span class="nc">UpPlug</span><span class="p">{</span> <span class="err">\</span>
</span><span class='line'>      <span class="ss">plug</span><span class="p">:</span> <span class="n">context</span><span class="p">[</span><span class="ss">:sample_image_plug</span><span class="p">],</span> <span class="err">\</span>
</span><span class='line'>      <span class="ss">model</span><span class="p">:</span> <span class="n">context</span><span class="p">[</span><span class="ss">:model_struct</span><span class="p">],</span>  <span class="err">\</span>
</span><span class='line'>      <span class="ss">attribute_name</span><span class="p">:</span> <span class="n">context</span><span class="p">[</span><span class="ss">:photo_attribute_name</span><span class="p">],</span> <span class="err">\</span>
</span><span class='line'>      <span class="ss">styles</span><span class="p">:</span> <span class="p">%{</span>
</span><span class='line'>        <span class="ss">thumb</span><span class="p">:</span> <span class="s2">&quot;50x50&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">medium</span><span class="p">:</span> <span class="s2">&quot;120x120&gt;&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span> <span class="o">|&gt;</span>
</span><span class='line'>    <span class="nc">Map</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="ss">:document_up_plug</span><span class="p">,</span> <span class="p">%</span><span class="nc">UpPlug</span><span class="p">{</span> <span class="err">\</span>
</span><span class='line'>      <span class="ss">plug</span><span class="p">:</span> <span class="n">context</span><span class="p">[</span><span class="ss">:sample_document_plug</span><span class="p">],</span> <span class="err">\</span>
</span><span class='line'>      <span class="ss">model</span><span class="p">:</span> <span class="n">context</span><span class="p">[</span><span class="ss">:model_struct</span><span class="p">],</span>
</span><span class='line'>      <span class="ss">attribute_name</span><span class="p">:</span> <span class="n">context</span><span class="p">[</span><span class="ss">:document_attribute_name</span><span class="p">]</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<ul>
<li>I have used <code>setup</code> callback function in <code>ExUnit</code> to define some testing data so that it can be kept reusing in all the test cases. The <code>context</code> need to start with <code>:ok</code> and following by a Map.</li>
<li>In addition, on line 20, we can use the <code>setup</code> callback again to define extra data based on what have already been defined in the earlier call of <code>setup</code>. </li>
<li>In order to use testing data, you will need to pass in <code>context</code> in each of your test as in the test case that we are going to write by using <code>context</code> as the second parameter in <code>test</code> function call.</li>
</ul>

<p>Now, let try <code>mix test</code> by first adding the first test case inside also inside <code>test/up_plug_test.exs</code>. For this test, we would like to check if <code>Plug.Upload</code> struct is an upload of an image:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">test</span> <span class="s2">&quot;is_image? returns true if upload file is image&quot;</span><span class="p">,</span> <span class="n">context</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">assert</span> <span class="n">is_image?</span><span class="p">(</span><span class="n">context</span><span class="p">[</span><span class="ss">:sample_image_plug</span><span class="p">])</span> <span class="o">==</span> <span class="no">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Note that, <code>context[:sample_image_plug]</code> is the struct <code>Plug.Upload</code> that we have defined in the <code>setup</code> callback ealier.</p>

<p>Then let&#39;s run the test. From the command line, type in the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mix <span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure>

<p>Apparently, when we run <code>mix test</code> it will be a failed case and give an error. This is because we have not written any code yet. We are now at the red stage (red stage as in TDD red, green, refactor). </p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">test</span>/hardware_zone_test.exs:5: warning: this check/guard will always yield the same result
</span><span class='line'><span class="nb">test</span>/plug_plug_test.exs:3: warning: unused import UpPlug
</span><span class='line'>** <span class="o">(</span>CompileError<span class="o">)</span> <span class="nb">test</span>/plug_plug_test.exs:17: <span class="k">function</span> <span class="s1">&#39;is_image?&#39;</span>/1 undefined
</span><span class='line'>    <span class="o">(</span>stdlib<span class="o">)</span> lists.erl:1336: :lists.foreach/2
</span><span class='line'>        <span class="o">(</span>stdlib<span class="o">)</span> erl_eval.erl:657: :erl_eval.do_apply/6
</span></code></pre></td></tr></table></div></figure>

<p>Because of this error, let go to our <code>UpPlug</code> library and add the <code>is_image?</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim lib/up_plug.ex
</span></code></pre></td></tr></table></div></figure>

<p>and add in the following <code>is_image?</code> helper which always return <code>true</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">def</span> <span class="n">is_image?</span><span class="p">(</span><span class="n">plug</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Run the test now by using <code>mix test</code> and it should pass</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>..
</span><span class='line'>
</span><span class='line'>Finished in 0.05 seconds <span class="o">(</span>0.05s on load, 0.00s on tests<span class="o">)</span>
</span><span class='line'><span class="m">2</span> tests, <span class="m">0</span> failures
</span></code></pre></td></tr></table></div></figure>

<p>Add in another test case to test the a document file case for this <code>is_image?</code> function, but this time, let&#39;s use <code>refute</code> as a negative assertion</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">test</span> <span class="s2">&quot;is_image? returns false if upload file is not an image&quot;</span><span class="p">,</span> <span class="n">context</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">refute</span> <span class="n">is_image?</span><span class="p">(</span><span class="n">context</span><span class="p">[</span><span class="ss">:sample_document_plug</span><span class="p">])</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Run the test again and expect it to fail because our <code>is_image?</code> function always return true. </p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.
</span><span class='line'>
</span><span class='line'>  1<span class="o">)</span> <span class="nb">test </span>is_image? returns <span class="nb">false </span><span class="k">if</span> upload file is not an image <span class="o">(</span>UpPlugTest<span class="o">)</span>
</span><span class='line'>     <span class="nb">test</span>/up_plug_test.exs:25
</span><span class='line'>     Assertion <span class="nv">with</span> <span class="o">==</span> failed
</span><span class='line'>     code: is_image?<span class="o">(</span>context<span class="o">[</span>:sample_document_plug<span class="o">])</span> <span class="o">==</span> <span class="nb">false</span>
</span><span class='line'><span class="nb">     </span>lhs:  <span class="nb">true</span>
</span><span class='line'><span class="nb">     </span>rhs:  <span class="nb">false</span>
</span><span class='line'><span class="nb">     </span>stacktrace:
</span><span class='line'>       <span class="nb">test</span>/up_plug_test.exs:26
</span><span class='line'>
</span><span class='line'>.
</span><span class='line'>
</span><span class='line'>Finished in 0.05 seconds <span class="o">(</span>0.05s on load, 0.00s on tests<span class="o">)</span>
</span><span class='line'><span class="m">3</span> tests, <span class="m">1</span> failures
</span></code></pre></td></tr></table></div></figure>

<p>It&#39;s time to fix the <code>is_image?</code> function that we created ealier by do a real check on the image&#39;s MIME type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">def</span> <span class="n">is_image?</span><span class="p">(</span><span class="n">plug</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">content_type</span> <span class="p">=</span> <span class="n">plug</span><span class="p">.</span><span class="n">content_type</span>
</span><span class='line'>  <span class="n">image_mimes</span> <span class="p">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="nc">Plug.MIME</span><span class="p">.</span><span class="n">type</span><span class="p">(</span><span class="s2">&quot;png&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="nc">Plug.MIME</span><span class="p">.</span><span class="n">type</span><span class="p">(</span><span class="s2">&quot;jpg&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="nc">Plug.MIME</span><span class="p">.</span><span class="n">type</span><span class="p">(</span><span class="s2">&quot;gif&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'>  <span class="nc">Enum</span><span class="p">.</span><span class="n">find_index</span><span class="p">(</span><span class="n">image_mimes</span><span class="p">,</span> <span class="k">fn</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">x</span> <span class="o">==</span> <span class="n">content_type</span> <span class="k">end</span><span class="p">)</span> <span class="o">!=</span> <span class="no">nil</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Note that <code>Plug.MIME</code> is from <code>plug</code> library. Run the test again and every thing should pass now:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>...
</span><span class='line'>
</span><span class='line'>Finished in 0.05 seconds <span class="o">(</span>0.05s on load, 0.00s on tests<span class="o">)</span>
</span><span class='line'><span class="m">3</span> tests, <span class="m">0</span> failures
</span></code></pre></td></tr></table></div></figure>

<p>Up to this point, let&#39;s list down all the requirements before starting to implement, then eventually write the content of all these specs and the codes to pass the spec. Below is the list of all the requirements which have been trasnformed into test spec for this upload module. It&#39;s not an exhausted list yet, but you are encouraged to keep adding on more test cases when there is a need. It is good practice to write all the specs down in this kind of format so that you are aware of all the requirements that need to be implemented: </p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="c1"># test/up_plug_test.exs</span>
</span><span class='line'>
</span><span class='line'><span class="n">test</span> <span class="s2">&quot;returns 000/000/001 from id_partition with id 1&quot;</span> <span class="ss">do</span><span class="p">:</span> <span class="ss">:pending</span>
</span><span class='line'><span class="n">test</span> <span class="s2">&quot;returns 000/120/501 from id_partition with id 120501&quot;</span> <span class="ss">do</span><span class="p">:</span> <span class="ss">:pending</span>
</span><span class='line'><span class="n">test</span> <span class="s2">&quot;assigns photo_updated_at attribute after saving the photo&quot;</span><span class="p">,</span> <span class="ss">do</span><span class="p">:</span> <span class="ss">:pending</span>
</span><span class='line'><span class="n">test</span> <span class="s2">&quot;assigns photo_content_type attribute after saving the photo&quot;</span><span class="p">,</span> <span class="ss">do</span><span class="p">:</span> <span class="ss">:pending</span>
</span><span class='line'><span class="n">test</span> <span class="s2">&quot;assigns photo_file_name attribute after saving the photo&quot;</span><span class="p">,</span> <span class="ss">do</span><span class="p">:</span> <span class="ss">:pending</span>
</span><span class='line'><span class="n">test</span> <span class="s2">&quot;replaces special character in file name with _&quot;</span><span class="p">,</span> <span class="n">context</span><span class="p">,</span> <span class="ss">do</span><span class="p">:</span> <span class="ss">:pending</span>
</span><span class='line'><span class="n">test</span> <span class="s2">&quot;assigns photo_file_size attribute after saving the photo&quot;</span><span class="p">,</span> <span class="ss">do</span><span class="p">:</span> <span class="ss">:pending</span>
</span><span class='line'><span class="n">test</span> <span class="s2">&quot;stores uploaded image in original folder&quot;</span><span class="p">,</span> <span class="ss">do</span><span class="p">:</span> <span class="ss">:pending</span>
</span><span class='line'><span class="n">test</span> <span class="s2">&quot;stores extra styled images in corresponding folder&quot;</span><span class="p">,</span> <span class="ss">do</span><span class="p">:</span> <span class="ss">:pending</span>
</span><span class='line'><span class="n">test</span> <span class="s2">&quot;stores uploaded document in original folder&quot;</span><span class="p">,</span> <span class="ss">do</span><span class="p">:</span> <span class="ss">:pending</span>
</span><span class='line'><span class="n">test</span> <span class="s2">&quot;returns correct url for original image&quot;</span><span class="p">,</span> <span class="ss">do</span><span class="p">:</span> <span class="ss">:pending</span>
</span><span class='line'><span class="n">test</span> <span class="s2">&quot;returns correct url for a styled image&quot;</span><span class="p">,</span> <span class="ss">do</span><span class="p">:</span> <span class="ss">:pending</span>
</span></code></pre></td></tr></table></div></figure>

<p>At the time I wrote this article, <code>ExUnit</code> does not have a way to specify a test case as a pending case, so what I did was using <code>do: :pending</code>. However I really hope that <code>ExUnit</code> will support pending case soon as it&#39;s important to know what are the cases that are still pending when running all the tests. </p>

<p>Now, if you run the command <code>mix test</code> now, you should see everything passed.</p>

<p>At this stage, I would like to fast forward by just showing the test code and follow by showing the code implementation. Let&#39;s continue with specifying the test for <code>id_partition</code> function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="c1"># test/up_plug_test.exs</span>
</span><span class='line'>
</span><span class='line'><span class="n">test</span> <span class="s2">&quot;returns 000/000/001 for id_partition call with id 1&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">assert</span> <span class="n">id_partition</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&quot;000/000/001&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">test</span> <span class="s2">&quot;returns 000/120/501 for id_partition call with id 120501&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">assert</span> <span class="n">id_partition</span><span class="p">(</span><span class="mi">120501</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&quot;000/120/501&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>To make these tests pass, the implementation for <code>id_partition</code> is as following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="c1"># lib/up_plug.ex</span>
</span><span class='line'>
</span><span class='line'><span class="kd">def</span> <span class="n">id_partition</span><span class="p">(</span><span class="n">id</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">id</span> <span class="o">!=</span> <span class="no">nil</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">formatted_id</span> <span class="p">=</span> <span class="ss">:io_lib</span><span class="p">.</span><span class="n">format</span><span class="p">(</span><span class="s2">&quot;~9..0B&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">id</span><span class="p">])</span>  <span class="o">|&gt;</span> <span class="nc">List</span><span class="p">.</span><span class="n">flatten</span> <span class="o">|&gt;</span> <span class="n">to_string</span>
</span><span class='line'>    <span class="nc">Regex</span><span class="p">.</span><span class="n">scan</span><span class="p">(</span><span class="sx">~r/</span><span class="se">\d</span><span class="sx">{3}/</span><span class="p">,</span> <span class="n">formatted_id</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="nc">List</span><span class="p">.</span><span class="n">flatten</span> <span class="o">|&gt;</span> <span class="nc">Enum</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>id_partition</code> function is defined to convert an id into the 3 layer folder structure. Line 4 is the code to convert an id to a string of 9 characters. For instance, 1025 will be transformed to <code>000001025</code>. Then on line 5, this string will be split into 3 segments, each segment has 3 characters, then are joined by <code>/</code> to form <code>000/001/025</code>.</p>

<p>Next, we will need put in test code for testing the proper assignments for the 4 attributes: <code>photo_file_name</code>, <code>photo_file_size</code>, <code>photo_content_type</code> and <code>photo_updated_at</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="c1"># test/up_plug_test.exs</span>
</span><span class='line'>
</span><span class='line'><span class="n">test</span> <span class="s2">&quot;assigns photo_updated_at attribute after saving the photo&quot;</span><span class="p">,</span> <span class="n">context</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">model</span> <span class="p">=</span> <span class="n">process_upload_plug</span><span class="p">(</span><span class="n">context</span><span class="p">[</span><span class="ss">:up_plug</span><span class="p">])</span>
</span><span class='line'>  <span class="n">assert</span> <span class="n">model</span><span class="p">.</span><span class="n">photo_updated_at</span><span class="p">.</span><span class="n">__struct__</span> <span class="o">==</span> <span class="nc">Ecto.DateTime</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">test</span> <span class="s2">&quot;assigns photo_content_type attribute after saving the photo&quot;</span><span class="p">,</span> <span class="n">context</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">model</span> <span class="p">=</span> <span class="n">process_upload_plug</span><span class="p">(</span><span class="n">context</span><span class="p">[</span><span class="ss">:up_plug</span><span class="p">])</span>
</span><span class='line'>  <span class="n">assert</span> <span class="n">model</span><span class="p">.</span><span class="n">photo_content_type</span> <span class="o">==</span> <span class="n">context</span><span class="p">[</span><span class="ss">:sample_image_plug</span><span class="p">].</span><span class="n">content_type</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">test</span> <span class="s2">&quot;assigns photo_file_name attribute after saving the photo&quot;</span><span class="p">,</span> <span class="n">context</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">model</span> <span class="p">=</span> <span class="n">process_upload_plug</span><span class="p">(</span><span class="n">context</span><span class="p">[</span><span class="ss">:up_plug</span><span class="p">])</span>
</span><span class='line'>  <span class="n">assert</span> <span class="n">model</span><span class="p">.</span><span class="n">photo_file_name</span> <span class="o">==</span> <span class="n">context</span><span class="p">[</span><span class="ss">:sample_image_plug</span><span class="p">].</span><span class="n">filename</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">test</span> <span class="s2">&quot;replaces special character in file name with _&quot;</span><span class="p">,</span> <span class="n">context</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">new_plug</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">context</span><span class="p">[</span><span class="ss">:up_plug</span><span class="p">].</span><span class="n">plug</span><span class="p">,</span> <span class="ss">:filename</span><span class="p">,</span> <span class="s2">&quot;a&amp;b+c?d;e@f&gt;g&lt;h|i^j</span><span class="err">#</span><span class="s2">k%l\\m,n=o.png&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">new_up_plug</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">context</span><span class="p">[</span><span class="ss">:up_plug</span><span class="p">],</span> <span class="ss">:plug</span><span class="p">,</span> <span class="n">new_plug</span><span class="p">)</span>
</span><span class='line'>  <span class="n">model</span> <span class="p">=</span> <span class="n">process_upload_plug</span><span class="p">(</span><span class="n">new_up_plug</span><span class="p">)</span>
</span><span class='line'>  <span class="n">assert</span> <span class="n">model</span><span class="p">.</span><span class="n">photo_file_name</span> <span class="o">==</span> <span class="s2">&quot;a_b_c_d_e_f_g_h_i_j_k_l_m_n_o.png&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">test</span> <span class="s2">&quot;assigns the photo_file_size attribute after saving the photo&quot;</span><span class="p">,</span> <span class="n">context</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">model</span> <span class="p">=</span> <span class="n">process_upload_plug</span><span class="p">(</span><span class="n">context</span><span class="p">[</span><span class="ss">:up_plug</span><span class="p">])</span>
</span><span class='line'>  <span class="n">assert</span> <span class="n">model</span><span class="p">.</span><span class="n">photo_file_size</span> <span class="o">==</span> <span class="mi">917350</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Just one thing to highlight in the above code is on the third test case (line 16 - 21), we enforce the system to convert all the special characters to underscore (<code>_</code>) so that when we generate the URL for displaying the photo, it will be a well-formatted URL. </p>

<p>And here comes the code to pass the above cases:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="c1"># lib/up_plug.ex</span>
</span><span class='line'>
</span><span class='line'><span class="kd">def</span> <span class="n">process_upload_plug</span><span class="p">(</span><span class="n">up_plug</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">model</span> <span class="p">=</span> <span class="n">assign_file_information</span><span class="p">(</span><span class="n">up_plug</span><span class="p">)</span>
</span><span class='line'>  <span class="n">up_plug</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">up_plug</span><span class="p">,</span> <span class="ss">:model</span><span class="p">,</span> <span class="n">model</span><span class="p">)</span>
</span><span class='line'>  <span class="n">post_process_file</span><span class="p">(</span><span class="n">up_plug</span><span class="p">)</span>
</span><span class='line'>  <span class="n">up_plug</span><span class="p">.</span><span class="n">model</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">def</span> <span class="n">assign_file_information</span><span class="p">(</span><span class="n">up_plug</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">plug</span> <span class="p">=</span> <span class="n">up_plug</span><span class="p">.</span><span class="n">plug</span>
</span><span class='line'>  <span class="n">model</span> <span class="p">=</span> <span class="n">up_plug</span><span class="p">.</span><span class="n">model</span>
</span><span class='line'>  <span class="n">model</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="err">\</span>
</span><span class='line'>                  <span class="nc">String</span><span class="p">.</span><span class="n">to_atom</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">up_plug</span><span class="p">.</span><span class="n">attribute_name</span><span class="si">}</span><span class="s2">_updated_at&quot;</span><span class="p">),</span> <span class="nc">Ecto.DateTime</span><span class="p">.</span><span class="n">utc</span><span class="p">)</span>
</span><span class='line'>  <span class="n">model</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="err">\</span>
</span><span class='line'>                  <span class="nc">String</span><span class="p">.</span><span class="n">to_atom</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">up_plug</span><span class="p">.</span><span class="n">attribute_name</span><span class="si">}</span><span class="s2">_content_type&quot;</span><span class="p">),</span> <span class="n">content_type</span><span class="p">(</span><span class="n">plug</span><span class="p">))</span>
</span><span class='line'>  <span class="n">model</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="err">\</span>
</span><span class='line'>                  <span class="nc">String</span><span class="p">.</span><span class="n">to_atom</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">up_plug</span><span class="p">.</span><span class="n">attribute_name</span><span class="si">}</span><span class="s2">_file_name&quot;</span><span class="p">),</span> <span class="n">file_name</span><span class="p">(</span><span class="n">plug</span><span class="p">))</span>
</span><span class='line'>  <span class="n">model</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="err">\</span>
</span><span class='line'>                  <span class="nc">String</span><span class="p">.</span><span class="n">to_atom</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">up_plug</span><span class="p">.</span><span class="n">attribute_name</span><span class="si">}</span><span class="s2">_file_size&quot;</span><span class="p">),</span> <span class="n">size</span><span class="p">(</span><span class="n">plug</span><span class="p">))</span>
</span><span class='line'>  <span class="n">model</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">def</span> <span class="n">size</span><span class="p">(</span><span class="n">plug</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="nc">File</span><span class="p">.</span><span class="n">stat!</span><span class="p">(</span><span class="n">plug</span><span class="p">.</span><span class="n">path</span><span class="p">).</span><span class="n">size</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">def</span> <span class="n">content_type</span><span class="p">(</span><span class="n">plug</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">plug</span><span class="p">.</span><span class="n">content_type</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">def</span> <span class="n">file_name</span><span class="p">(</span><span class="n">plug</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="nc">Regex</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="sx">~r/[&amp;$+,\/:;=?@&lt;&gt;\[\]\{\}\|\\\^~%</span><span class="err">#</span><span class="sx"> ]/</span><span class="p">,</span> <span class="n">plug</span><span class="p">.</span><span class="n">filename</span><span class="p">,</span> <span class="s2">&quot;_&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">def</span> <span class="n">post_process_file</span><span class="p">(</span><span class="n">up_plug</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># TODO</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>As you can see, the actual attribute assignments are done on function <code>assign_file_information</code>. Next, these are tests for checking that the images are stored in the proper folders:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="c1"># test/up_plug_test.exs</span>
</span><span class='line'>
</span><span class='line'><span class="n">test</span> <span class="s2">&quot;stores uploaded image in original folder&quot;</span><span class="p">,</span> <span class="n">context</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">process_upload_plug</span><span class="p">(</span><span class="n">context</span><span class="p">[</span><span class="ss">:up_plug</span><span class="p">])</span>
</span><span class='line'>  <span class="n">expected_original_file_path</span> <span class="p">=</span> <span class="err">\</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="nc">Mix.Project</span><span class="p">.</span><span class="n">app_path</span><span class="si">}</span><span class="s2">/priv/static/system/sample_model/photo/000/000/001/original/sample.png&quot;</span>
</span><span class='line'>  <span class="n">assert</span> <span class="nc">File</span><span class="p">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">expected_original_file_path</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">test</span> <span class="s2">&quot;stores extra styled images in corresponding folder&quot;</span><span class="p">,</span> <span class="n">context</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">process_upload_plug</span><span class="p">(</span><span class="n">context</span><span class="p">[</span><span class="ss">:up_plug</span><span class="p">])</span>
</span><span class='line'>  <span class="n">expected_thumb_file_path</span> <span class="p">=</span> <span class="err">\</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="nc">Mix.Project</span><span class="p">.</span><span class="n">app_path</span><span class="si">}</span><span class="s2">/priv/static/system/sample_model/photo/000/000/001/thumb/sample.png&quot;</span>
</span><span class='line'>  <span class="n">assert</span> <span class="nc">File</span><span class="p">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">expected_thumb_file_path</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">expected_medium_file_path</span> <span class="p">=</span> <span class="err">\</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="nc">Mix.Project</span><span class="p">.</span><span class="n">app_path</span><span class="si">}</span><span class="s2">/priv/static/system/sample_model/photo/000/000/001/medium/sample.png&quot;</span>
</span><span class='line'>  <span class="n">assert</span> <span class="nc">File</span><span class="p">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">expected_medium_file_path</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">test</span> <span class="s2">&quot;stores uploaded document in original folder&quot;</span><span class="p">,</span> <span class="n">context</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">process_upload_plug</span><span class="p">(</span><span class="n">context</span><span class="p">[</span><span class="ss">:document_up_plug</span><span class="p">])</span>
</span><span class='line'>  <span class="n">expected_original_file_path</span> <span class="p">=</span> <span class="err">\</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="nc">Mix.Project</span><span class="p">.</span><span class="n">app_path</span><span class="si">}</span><span class="s2">/priv/static/system/sample_model/spec/000/000/001/original/sample.pdf&quot;</span>
</span><span class='line'>  <span class="n">assert</span> <span class="nc">File</span><span class="p">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">expected_original_file_path</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>And for the tests above to pass, we will need to implement the function <code>post_process_file</code> as shown below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="c1"># lib/up_plug.ex</span>
</span><span class='line'>
</span><span class='line'><span class="kd">def</span> <span class="n">post_process_file</span><span class="p">(</span><span class="n">up_plug</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">up_plug</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">id</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">attachment_directory_path</span> <span class="p">=</span> <span class="err">\</span>
</span><span class='line'>      <span class="n">attachment_container_absolute_path</span><span class="p">(</span><span class="n">up_plug</span><span class="p">.</span><span class="n">model</span><span class="p">,</span> <span class="n">up_plug</span><span class="p">.</span><span class="n">attribute_name</span><span class="p">)</span>
</span><span class='line'>    <span class="nc">File</span><span class="p">.</span><span class="n">rm_rf</span><span class="p">(</span><span class="n">attachment_directory_path</span><span class="p">)</span>
</span><span class='line'>    <span class="nc">File</span><span class="p">.</span><span class="n">mkdir_p</span><span class="p">(</span><span class="n">attachment_directory_path</span><span class="p">)</span>
</span><span class='line'>    <span class="n">store_original_file</span><span class="p">(</span><span class="n">up_plug</span><span class="p">,</span> <span class="n">attachment_directory_path</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">is_image?</span><span class="p">(</span><span class="n">up_plug</span><span class="p">.</span><span class="n">plug</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">post_process_for_other_styles</span><span class="p">(</span><span class="n">up_plug</span><span class="p">,</span> <span class="n">attachment_directory_path</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">def</span> <span class="n">store_original_file</span><span class="p">(</span><span class="n">up_plug</span><span class="p">,</span> <span class="n">attachment_directory_path</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">original_file_destination</span> <span class="p">=</span> <span class="nc">Enum</span><span class="p">.</span><span class="n">join</span><span class="p">(</span> <span class="err">\</span>
</span><span class='line'>      <span class="p">[</span><span class="n">attachment_directory_path</span><span class="p">,</span> <span class="s2">&quot;original&quot;</span><span class="p">],</span> <span class="s2">&quot;/&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nc">File</span><span class="p">.</span><span class="n">mkdir_p</span><span class="p">(</span><span class="n">original_file_destination</span><span class="p">)</span>
</span><span class='line'>  <span class="nc">File</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">up_plug</span><span class="p">.</span><span class="n">plug</span><span class="p">.</span><span class="n">path</span><span class="p">,</span> <span class="nc">Enum</span><span class="p">.</span><span class="n">join</span><span class="p">(</span> <span class="err">\</span>
</span><span class='line'>    <span class="p">[</span><span class="n">original_file_destination</span><span class="p">,</span> <span class="n">file_name</span><span class="p">(</span><span class="n">up_plug</span><span class="p">.</span><span class="n">plug</span><span class="p">)],</span> <span class="s2">&quot;/&quot;</span><span class="p">),</span> <span class="ss">:infinity</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">def</span> <span class="n">post_process_for_other_styles</span><span class="p">(</span><span class="n">up_plug</span><span class="p">,</span> <span class="n">attachment_directory_path</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">styles</span> <span class="p">=</span> <span class="n">up_plug</span><span class="p">.</span><span class="n">styles</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">styles</span> <span class="o">!=</span> <span class="no">nil</span> <span class="k">do</span>
</span><span class='line'>    <span class="nc">Enum</span><span class="p">.</span><span class="n">each</span> <span class="n">styles</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">post_process_for_style</span><span class="p">(</span><span class="ni">&amp;1</span><span class="p">,</span> <span class="n">up_plug</span><span class="p">,</span> <span class="n">attachment_directory_path</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">def</span> <span class="n">post_process_for_style</span><span class="p">({</span><span class="n">style_name</span><span class="p">,</span> <span class="n">style_size</span><span class="p">},</span> <span class="n">up_plug</span><span class="p">,</span> <span class="n">attachment_directory_path</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">saved_file_name</span> <span class="p">=</span> <span class="n">file_name</span><span class="p">(</span><span class="n">up_plug</span><span class="p">.</span><span class="n">plug</span><span class="p">)</span>
</span><span class='line'>  <span class="n">original_file_path</span> <span class="p">=</span> <span class="nc">Enum</span><span class="p">.</span><span class="n">join</span><span class="p">(</span> <span class="err">\</span>
</span><span class='line'>      <span class="p">[</span><span class="n">attachment_directory_path</span><span class="p">,</span> <span class="s2">&quot;original&quot;</span><span class="p">,</span> <span class="n">saved_file_name</span><span class="p">],</span> <span class="s2">&quot;/&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">styled_file_destination</span> <span class="p">=</span> <span class="nc">Enum</span><span class="p">.</span><span class="n">join</span><span class="p">(</span> <span class="err">\</span>
</span><span class='line'>      <span class="p">[</span><span class="n">attachment_directory_path</span><span class="p">,</span> <span class="n">style_name</span><span class="p">],</span> <span class="s2">&quot;/&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nc">File</span><span class="p">.</span><span class="n">mkdir_p</span><span class="p">(</span><span class="n">styled_file_destination</span><span class="p">)</span>
</span><span class='line'>  <span class="n">open</span><span class="p">(</span><span class="n">original_file_path</span><span class="p">)</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="n">copy</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="n">resize</span><span class="p">(</span><span class="n">style_size</span><span class="p">)</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="n">save</span><span class="p">(</span><span class="nc">Enum</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="n">styled_file_destination</span><span class="p">,</span> <span class="n">saved_file_name</span><span class="p">],</span> <span class="s2">&quot;/&quot;</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">def</span> <span class="n">attachment_container_relative_path</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">attribute_name</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="nc">Enum</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="s2">&quot;system&quot;</span><span class="p">,</span> <span class="err">\</span>
</span><span class='line'>      <span class="nc">Mix.Utils</span><span class="p">.</span><span class="n">underscore</span><span class="p">(</span><span class="n">model</span><span class="p">.</span><span class="n">__struct__</span><span class="p">),</span> <span class="err">\</span>
</span><span class='line'>      <span class="n">attribute_name</span><span class="p">,</span> <span class="err">\</span>
</span><span class='line'>      <span class="n">id_partition</span><span class="p">(</span><span class="n">model</span><span class="p">.</span><span class="n">id</span><span class="p">)],</span> <span class="s2">&quot;/&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">def</span> <span class="n">attachment_container_absolute_path</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">attribute_name</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="nc">Enum</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="nc">Mix.Project</span><span class="p">.</span><span class="n">app_path</span><span class="p">,</span> <span class="s2">&quot;/priv/static&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">attachment_container_relative_path</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">attribute_name</span><span class="p">)],</span> <span class="s2">&quot;/&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<ul>
<li><p>We first define the <code>post_process_file</code> function. In this function, we first check for the model id, then generate the target directory where the uploaded file will be copied into - <code>attachment_directory_path</code> (for example, id 201 will yield <code>&lt;path to your project&gt;/priv/static/system/hardware_zone/hardware/phot/000/000/201</code>). We then delete that folder and create again to make sure all the folder is clean. Then we copy the original uploaded file into the <code>original</code> folder under the generated folder path. This happens inside <code>store_original_file</code> function call. Then we check if the uploaded file is an image, then we will process with other styles of the uploaded file.</p></li>
<li><p>From line 36 to 39, we are using <code>mogrify</code> library to <code>open</code> the image, <code>copy</code>, <code>resize</code> and then save the resized image in the destination folder that are computed ealier. It is a very natural flow of converting an image file, thank to pipe Elixir operator <code>|&gt;</code>. The <code>mogrify</code> library has done a great job here by managing combining the pipe operator and the ImageMagick itself.</p></li>
</ul>

<p>And finally, here the test code to check if the generated URL for the uploaded images are returned correctly</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="c1"># test/up_plug_test.exs</span>
</span><span class='line'>
</span><span class='line'><span class="n">test</span> <span class="s2">&quot;returns correct url for original image&quot;</span><span class="p">,</span> <span class="n">context</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">model</span> <span class="p">=</span> <span class="n">process_upload_plug</span><span class="p">(</span><span class="n">context</span><span class="p">[</span><span class="ss">:up_plug</span><span class="p">])</span>
</span><span class='line'>  <span class="n">assert</span> <span class="n">attachment_url_for</span><span class="p">(</span> <span class="err">\</span>
</span><span class='line'>      <span class="n">model</span><span class="p">,</span> <span class="err">\</span>
</span><span class='line'>      <span class="n">context</span><span class="p">[</span><span class="ss">:photo_attribute_name</span><span class="p">])</span> <span class="err">\</span>
</span><span class='line'>    <span class="o">==</span> <span class="s2">&quot;/system/sample_model/photo/000/000/001/original/sample.png&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">test</span> <span class="s2">&quot;returns correct url for a styled image&quot;</span><span class="p">,</span> <span class="n">context</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">model</span> <span class="p">=</span> <span class="n">process_upload_plug</span><span class="p">(</span><span class="n">context</span><span class="p">[</span><span class="ss">:up_plug</span><span class="p">])</span>
</span><span class='line'>  <span class="n">assert</span> <span class="n">attachment_url_for</span><span class="p">(</span> <span class="err">\</span>
</span><span class='line'>      <span class="n">model</span><span class="p">,</span> <span class="err">\</span>
</span><span class='line'>      <span class="n">context</span><span class="p">[</span><span class="ss">:photo_attribute_name</span><span class="p">],</span> <span class="err">\</span>
</span><span class='line'>      <span class="ss">:thumb</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&quot;/system/sample_model/photo/000/000/001/thumb/sample.png&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>And here is the corresponding implementation to pass these above test in <code>lib/up_plug.ex</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="c1"># lib/up_plug.ex</span>
</span><span class='line'>
</span><span class='line'><span class="kd">def</span> <span class="n">attachment_url_for</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">attribute_name</span><span class="p">,</span> <span class="n">style</span> <span class="p">\\</span> <span class="ss">:original</span><span class="p">,</span> <span class="n">default_url</span> <span class="p">\\</span> <span class="no">nil</span> <span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">style</span> <span class="p">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">style</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">container_relative_path</span> <span class="p">=</span> <span class="n">attachment_container_relative_path</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">attribute_name</span><span class="p">)</span>
</span><span class='line'>  <span class="n">container_absolute_path</span> <span class="p">=</span> <span class="n">attachment_container_absolute_path</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">attribute_name</span><span class="p">)</span>
</span><span class='line'>  <span class="n">stored_file_name</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="nc">String</span><span class="p">.</span><span class="n">to_atom</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">attribute_name</span><span class="si">}</span><span class="s2">_file_name&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">target_file</span> <span class="p">=</span> <span class="nc">Enum</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="n">container_absolute_path</span><span class="p">,</span> <span class="n">style</span><span class="p">,</span> <span class="n">stored_file_name</span><span class="p">],</span> <span class="s2">&quot;/&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nc">File</span><span class="p">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">target_file</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="nc">Enum</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="n">container_relative_path</span><span class="p">,</span> <span class="n">style</span><span class="p">,</span> <span class="n">stored_file_name</span><span class="p">],</span> <span class="s2">&quot;/&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">default_url</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">def</span> <span class="n">attachment_exist?</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">attribute_name</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="nc">File</span><span class="p">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">attachment_container_relative_path</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">attribute_name</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>As you can see, the code is pretty straight forward. The program again tries the find the absolute path to the file and check if the file really exists. It it does, we will join the relative path (<code>/system/hardware_zone/hardware/photo/000/000/010/:style/</code>) with its stored file name. This link can be then accessed directly from the web browser.</p>

<p>That&#39;s all for this library. Let&#39;s move on to the more easy part.</p>

<h3>4 - Use <code>UpPlug</code> in the project</h3>

<p>We have done the hard part. Now is the fun part where we will use the <code>UpPlug</code> and apply into the hardware zone app. Open the <code>hardwares_controller.ex</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/controllers/hardwares_controller.ex
</span></code></pre></td></tr></table></div></figure>

<p>and add in the following private function at the end of the file. This function is basically just a wrapper of the <code>UpPlug.process_upload_plug</code> call when there is an attachment received. Note that you will need to update the model struct after done with the file processing by triggering <code>Repo.update(...)</code> - occurs on line 9 of the code below: </p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defp</span> <span class="n">upload_photo_attachment</span><span class="p">(</span><span class="n">hardware</span><span class="p">,</span> <span class="n">params</span><span class="p">,</span> <span class="n">attachment_attribute_name</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="n">attachment_attribute_name</span><span class="p">]</span> <span class="o">!=</span> <span class="no">nil</span> <span class="ow">and</span> <span class="err">\</span>
</span><span class='line'>          <span class="nc">String</span><span class="p">.</span><span class="n">length</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="n">attachment_attribute_name</span><span class="p">].</span><span class="n">filename</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">hardware</span> <span class="p">=</span> <span class="nc">UpPlug</span><span class="p">.</span><span class="n">process_upload_plug</span><span class="p">(%</span><span class="nc">UpPlug</span><span class="p">{</span>
</span><span class='line'>      <span class="ss">model</span><span class="p">:</span> <span class="n">hardware</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">plug</span><span class="p">:</span> <span class="n">params</span><span class="p">[</span><span class="n">attachment_attribute_name</span><span class="p">],</span>
</span><span class='line'>      <span class="ss">attribute_name</span><span class="p">:</span> <span class="n">attachment_attribute_name</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">styles</span><span class="p">:</span> <span class="p">%{</span> <span class="ss">thumb</span><span class="p">:</span> <span class="s2">&quot;100x100&gt;&quot;</span><span class="p">,</span> <span class="ss">large</span><span class="p">:</span> <span class="s2">&quot;300x300&gt;&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="n">hardware</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="n">hardware</span><span class="p">,</span> <span class="ss">:photo</span><span class="p">)</span>
</span><span class='line'>    <span class="nc">Repo</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">hardware</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>As you can see, we are generating 2 styles for this uploaded photo: <code>thumb</code> (<code>100x100&gt;</code>) and <code>large</code> (<code>300x300&gt;</code>). We will use these 2 styles in 2 different places. They are inside <code>create</code> and <code>update</code> function as following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="kd">def</span> <span class="n">create</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="p">%{</span><span class="s2">&quot;hardware&quot;</span> <span class="p">=&gt;</span> <span class="n">params</span><span class="p">})</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">atomized_keys_params</span> <span class="p">=</span> <span class="n">atomize_keys</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>  <span class="n">hardware</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">merge</span><span class="p">(%</span><span class="nc">Hardware</span><span class="p">{},</span> <span class="n">atomized_keys_params</span><span class="p">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Hardware</span><span class="p">.</span><span class="n">validate</span><span class="p">(</span><span class="n">hardware</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="p">[]</span> <span class="p">-&gt;</span>
</span><span class='line'>      <span class="n">hardware</span> <span class="p">=</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">hardware</span><span class="p">)</span>
</span><span class='line'>      <span class="n">upload_photo_attachment</span><span class="p">(</span><span class="n">hardware</span><span class="p">,</span> <span class="n">atomized_keys_params</span><span class="p">,</span> <span class="ss">:photo</span><span class="p">)</span>
</span><span class='line'>      <span class="n">redirect</span> <span class="n">conn</span><span class="p">,</span> <span class="nc">Router</span><span class="p">.</span><span class="n">hardwares_path</span><span class="p">(</span><span class="ss">:show</span><span class="p">,</span> <span class="n">hardware</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">errors</span> <span class="p">-&gt;</span>
</span><span class='line'>      <span class="n">render</span> <span class="n">conn</span><span class="p">,</span> <span class="s2">&quot;new&quot;</span><span class="p">,</span> <span class="ss">hardware</span><span class="p">:</span> <span class="n">hardware</span><span class="p">,</span> <span class="ss">errors</span><span class="p">:</span> <span class="n">errors</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="kd">def</span> <span class="n">update</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="p">%{</span><span class="s2">&quot;id&quot;</span> <span class="p">=&gt;</span> <span class="n">id</span><span class="p">,</span> <span class="s2">&quot;hardware&quot;</span> <span class="p">=&gt;</span> <span class="n">params</span><span class="p">})</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nc">Hardware</span><span class="p">,</span> <span class="nc">String</span><span class="p">.</span><span class="n">to_integer</span><span class="p">(</span><span class="n">id</span><span class="p">))</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">hardware</span> <span class="ow">when</span> <span class="n">is_map</span><span class="p">(</span><span class="n">hardware</span><span class="p">)</span> <span class="p">-&gt;</span>
</span><span class='line'>      <span class="n">atomized_keys_params</span> <span class="p">=</span> <span class="n">atomize_keys</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>      <span class="n">hardware</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">merge</span><span class="p">(</span><span class="n">hardware</span><span class="p">,</span> <span class="n">atomized_keys_params</span><span class="p">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">Hardware</span><span class="p">.</span><span class="n">validate</span><span class="p">(</span><span class="n">hardware</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>        <span class="p">[]</span> <span class="p">-&gt;</span>
</span><span class='line'>          <span class="nc">Repo</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">hardware</span><span class="p">)</span>
</span><span class='line'>          <span class="n">upload_photo_attachment</span><span class="p">(</span><span class="n">hardware</span><span class="p">,</span> <span class="n">atomized_keys_params</span><span class="p">,</span> <span class="ss">:photo</span><span class="p">)</span>
</span><span class='line'>          <span class="n">redirect</span> <span class="n">conn</span><span class="p">,</span> <span class="nc">Router</span><span class="p">.</span><span class="n">hardwares_path</span><span class="p">(</span><span class="ss">:show</span><span class="p">,</span> <span class="n">hardware</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>        <span class="n">errors</span> <span class="p">-&gt;</span>
</span><span class='line'>          <span class="n">render</span> <span class="n">conn</span><span class="p">,</span> <span class="s2">&quot;edit&quot;</span><span class="p">,</span> <span class="ss">hardware</span><span class="p">:</span> <span class="n">hardware</span><span class="p">,</span> <span class="ss">errors</span><span class="p">:</span> <span class="n">errors</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="bp">_</span> <span class="p">-&gt;</span>
</span><span class='line'>      <span class="n">redirect</span> <span class="n">conn</span><span class="p">,</span> <span class="nc">Router</span><span class="p">.</span><span class="n">hardwares_path</span><span class="p">(</span><span class="ss">:index</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now, let&#39;s move on to displaying the photos. First edit the template <code>web/templates/hardwares/index.html.eex</code> to show the thumbnail of the hardware photo in the list of hardwares:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/templates/hardwares/index.html.eex
</span></code></pre></td></tr></table></div></figure>

<p>and add in the folling line under <code>&lt;div class=&quot;description&quot;&gt;&lt;/div&gt;</code> tag</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;photo&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&#39;&lt;%= UpPlug.attachment_url_for(</span>
</span><span class='line'><span class="s">                           hardware, :photo, :thumb, &quot;/images/no_photo_thumb.png&quot;)  %&gt;&#39;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Next, we will also need to edit the show template at <code>web/templates/hardwares/show.html.eex</code> to show a bigger version of the photo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/templates/hardwares/show.html.eex
</span></code></pre></td></tr></table></div></figure>

<p>Replace the part to display the hardware with the following</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;</span><span class="err">&lt;</span>%= @hardware.name %&gt;<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-sm-6&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&#39;manufacturer&#39;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= @hardware.manufacturer %&gt;<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;br/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;description&#39;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= @hardware.description %&gt;<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">&lt;</span>%= if @hardware.sale_contact_number do %&gt;
</span><span class='line'>      Want to buy, contact me at: <span class="err">&lt;</span>%= @hardware.sale_contact_number %&gt;
</span><span class='line'>    <span class="err">&lt;</span>% end %&gt;
</span><span class='line'>    <span class="nt">&lt;br/&gt;&lt;br/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-sm-6&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&#39;&lt;%= UpPlug.attachment_url_for(</span>
</span><span class='line'><span class="s">                            @hardware, :photo, :large, &quot;/images/no_photo_large.png&quot;) %&gt;&#39;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;br/&gt;&lt;br/&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>We will need to modify the style so that it will fit the uploaded photo. Let&#39;s edit <code>priv/static/css/app.css</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim priv/static/css/app.css
</span></code></pre></td></tr></table></div></figure>

<p>and change the height in <code>div.hardware-box</code> height to <code>235px</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">div</span><span class="nc">.hardware-box</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="m">#ccc</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">235px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="m">#efefef</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin-top</span><span class="o">:</span> <span class="m">30px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">cursor</span><span class="o">:</span> <span class="k">pointer</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>And add <code>margin-bottom: 10px;</code> to <code>div.hardware-box div.description</code> style</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">div</span><span class="nc">.hardware-box</span> <span class="nt">div</span><span class="nc">.description</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">margin-top</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">60px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">overflow</span><span class="o">:</span> <span class="k">hidden</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin-bottom</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
 

<p>Finally, copy the following 2 files into your <code>priv/static/images</code> folder. These 2 files are used to cater for the case that a hardware does not have a photo yet:</p>

<ul>
<li><a href="https://raw.githubusercontent.com/learnelixir/hardware-zone/master/priv/static/images/no_photo_large.png">https://raw.githubusercontent.com/learnelixir/hardware-zone/master/priv/static/images/no_photo_large.png</a></li>
<li><a href="https://raw.githubusercontent.com/learnelixir/hardware-zone/master/priv/static/images/no_photo_thumb.png">https://raw.githubusercontent.com/learnelixir/hardware-zone/master/priv/static/images/no_photo_thumb.png</a></li>
</ul>

<p>After this, you can start your phoenix server and enjoy the web application with the ability to upload and process photos.</p>

<h3>Conclusion</h3>

<p>I hope that I have covered something missing at the point of this article and I do hope that you enjoy the article. If you have any comments or questions, please put those in the comments box below. The <code>UpPlug</code> library can be enhanced in many ways, below are some of them:</p>

<ul>
<li>Uploaded File validation in term of file size and content type.</li>
<li>Supporting Amazon S3 file upload.</li>
<li>Callback after <code>Repo.update</code> or <code>Repo.insert</code> instead of calling the process uploaded file function inside the controller</li>
<li>Callback support for uploaded file after it has been processed.</li>
</ul>

<p>That&#39;s all for now. Thank you for your time. :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seven RESTful Actions in Phoenix Web App]]></title>
    <link href="http://learnelixir.com/blog/2014/10/18/seven-restful-actions-in-phoenix-web-app/"/>
    <updated>2014-10-18T23:20:53+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/18/seven-restful-actions-in-phoenix-web-app</id>
    <content type="html"><![CDATA[<p><strong>UPDATE</strong> on 30th Oct 14: I have updated this article in order to work with Phoenix framework version 0.5.0. Previously the Phoenix framework used in this article was 0.4.1
<hr/><br/>
For a new web application framework, I always start with building a 7 actions RESTful app to try out how good the framework is, and so far for Phoenix, it looks quite promising in term of code readability and the speed of churning out these 7 actions for a model entity. As these 7 RESTful actions are the backbone of the most web apps nowadays, it is crucial that we are familiar with the steps to create them.</p>

<!-- more -->

<p>In this article, we are going through the process of creating these 7 RESTful actions. These 7 actions are <code>index</code>, <code>new</code>, <code>create</code>, <code>edit</code>, <code>update</code>, <code>destroy</code> and <code>show</code>. The <code>index</code> action has already been covered in the very first article of this blog, but for the sake of completeness, it will be recovered in this article. </p>

<p>Anyway, here is the end result:</p>

<p><img class="center" src="http://learnelixir.com/images/7restful-action/screenshot.png" width="500" height="396" title="image" alt="images"></p>

<p>You are able to download the source code on github - </p>

<p><a href="https://github.com/learnelixir/hardware-zone/tree/phoenix-0.5.0">https://github.com/learnelixir/hardware-zone/tree/phoenix-0.5.0</a></p>

<p>as well as check the application online - deployed to Heroku Server at </p>

<p><a href="https://github.com/learnelixir/hardware-zone/tree/phoenix-0.5.0">http://phoenix-hardware-zone.herokuapp.com</a></p>

<p>Let&#39;s start with create an application for this. We will be building a public hardware parts posting site where user will be able to post a hardware and other users will be able to see it.</p>

<h3>0 - Setup</h3>

<p>Let&#39;s start by creating a new project</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> &lt;phoenix_directory&gt;
</span><span class='line'><span class="nv">$ </span>mix phoenix.new hardward_zone ../
</span></code></pre></td></tr></table></div></figure>

<p>This will create a all the stuffs that we need to develop the app. Now let&#39;s move to that project folder and install all the dependencies by typing the following commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ../
</span><span class='line'><span class="nv">$ </span>mix deps.get
</span></code></pre></td></tr></table></div></figure>

<p>Next, we will need to add in 2 <code>postgrex</code> and <code>ecto</code> library for our database. </p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim mix.exs
</span></code></pre></td></tr></table></div></figure>

<p>Add in line 5 and 6 in the following code to <code>deps</code> method</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defp</span> <span class="n">deps</span> <span class="k">do</span>
</span><span class='line'>  <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:phoenix</span><span class="p">,</span> <span class="s2">&quot;0.5.0&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:cowboy</span><span class="p">,</span> <span class="s2">&quot;~&gt; 1.0.0&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:postgrex</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.5&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:ecto</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.2.0&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Also, in the same file, we will also need to add in <code>postgrex</code> and <code>ecto</code> application in <code>application</code> method</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="c1"># Configuration for the OTP application</span>
</span><span class='line'><span class="kd">def</span> <span class="n">application</span> <span class="k">do</span>
</span><span class='line'>  <span class="p">[</span>
</span><span class='line'>    <span class="ss">mod</span><span class="p">:</span> <span class="p">{</span> <span class="nc">HardwareZone</span><span class="p">,</span> <span class="p">[]</span> <span class="p">},</span>
</span><span class='line'>    <span class="ss">applications</span><span class="p">:</span> <span class="p">[</span><span class="ss">:phoenix</span><span class="p">,</span> <span class="ss">:cowboy</span><span class="p">,</span> <span class="ss">:logger</span><span class="p">,</span> <span class="ss">:postgrex</span><span class="p">,</span> <span class="ss">:ecto</span><span class="p">]</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Install the dependencies again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix deps.get
</span></code></pre></td></tr></table></div></figure>

<p>Now let go ahead and create a model named <code>hardware</code>. This model will be our central entity, which we will need to have a function to list all the hardwares on our home page, let user to view, create, update and remove individually. To start with this, let&#39;s create a Repo file to interface with postgres database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/models/repo.ex
</span></code></pre></td></tr></table></div></figure> 

<p>And copy the below code into this file. Remember to change <code>postgresuser</code> and <code>password</code> to the correct username and password of your postgres database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">HardwareZone.Repo</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Ecto.Repo</span><span class="p">,</span> <span class="ss">adapter</span><span class="p">:</span> <span class="nc">Ecto.Adapters.Postgres</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">conf</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">parse_url</span> <span class="s2">&quot;ecto://postgresuser:password@localhost/hardware_zone&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">priv</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">app_dir</span><span class="p">(</span><span class="ss">:hardware_zone</span><span class="p">,</span> <span class="s2">&quot;priv/repo&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now, we will need to make sure this <code>Repo</code> module to be started with our application and supervised. We can do this by editing <code>lib/hardware_zone.ex</code> and add in the worker to the list of supervised children. It is line 7 in the code below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">def</span> <span class="n">start</span><span class="p">(</span><span class="n">_type</span><span class="p">,</span> <span class="n">_args</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">import</span> <span class="nc">Supervisor.Spec</span><span class="p">,</span> <span class="ss">warn</span><span class="p">:</span> <span class="no">false</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">children</span> <span class="p">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="c1"># Define workers and child supervisors to be supervised</span>
</span><span class='line'>    <span class="c1"># worker(TestApp.Worker, [arg1, arg2, arg3])</span>
</span><span class='line'>    <span class="n">worker</span><span class="p">(</span><span class="nc">HardwareZone.Repo</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">opts</span> <span class="p">=</span> <span class="p">[</span><span class="ss">strategy</span><span class="p">:</span> <span class="ss">:one_for_one</span><span class="p">,</span> <span class="ss">name</span><span class="p">:</span> <span class="nc">HardwareZone.Supervisor</span><span class="p">]</span>
</span><span class='line'>  <span class="nc">Supervisor</span><span class="p">.</span><span class="n">start_link</span><span class="p">(</span><span class="n">children</span><span class="p">,</span> <span class="n">opts</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Next, we will need to manually create a postgres database named <code>hardware_zone</code> by typing the following into your terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>createdb hardware_zone --encoding<span class="o">=</span><span class="s1">&#39;utf-8&#39;</span> --locale<span class="o">=</span>en_US.UTF-8 --template<span class="o">=</span>template0<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<p>This will create <code>hardware_zone</code> postgres database with utf8 encoding</p>

<p>Let&#39;s move on by creating a <code>hardware</code> model now:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/models/hardware.ex
</span></code></pre></td></tr></table></div></figure>

<p>And paste in the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">HardwareZone.Hardware</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Ecto.Model</span>
</span><span class='line'>  <span class="n">validate</span> <span class="n">hardware</span><span class="p">,</span> <span class="ss">name</span><span class="p">:</span> <span class="n">present</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">schema</span> <span class="s2">&quot;hardwares&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">field</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>    <span class="n">field</span> <span class="ss">:description</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>    <span class="n">field</span> <span class="ss">:manufacturer</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>    <span class="n">field</span> <span class="ss">:sale_contact_number</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Next, generate a migration script by the following in command in your terminal</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix ecto.gen.migration HardwareZone.Repo create_hardware
</span></code></pre></td></tr></table></div></figure>

<p>This command will create a folder <code>migrations</code> under <code>priv/repo</code> and the migration file under this newly created <code>migrations</code> folder. You can go ahead and edit this migration file. In my case, it is <code>20141019010800_create_hardware.exs</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim priv/repo/migrations/20141019010800_create_hardware.exs
</span></code></pre></td></tr></table></div></figure>

<p>then paste in the following code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">HardwareZone.Repo.Migrations.CreateHardware</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Ecto.Migration</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">up</span> <span class="k">do</span>
</span><span class='line'>    <span class="s2">&quot;CREATE TABLE hardwares( </span><span class="err">\</span><span class="s2"></span>
</span><span class='line'><span class="s2">            id serial primary key, </span><span class="err">\</span><span class="s2"></span>
</span><span class='line'><span class="s2">            name varchar(255), </span><span class="err">\</span><span class="s2"></span>
</span><span class='line'><span class="s2">            description text, </span><span class="err">\</span><span class="s2"></span>
</span><span class='line'><span class="s2">            manufacturer varchar(255), </span><span class="err">\</span><span class="s2"></span>
</span><span class='line'><span class="s2">            sale_contact_number varchar(255))&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">down</span> <span class="k">do</span>
</span><span class='line'>    <span class="s2">&quot;DROP TABLE hardwares&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>In <code>up</code> function we are creating a table <code>hardwares</code>. This <code>up</code> function will run when we run the migration. In <code>down</code> function, we will drop the table that we create in <code>up</code> function, this will run when we rollback this migration. Let&#39;s move on by running this migration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix ecto.migrate HardwareZone.Repo
</span></code></pre></td></tr></table></div></figure>

<p>In case that you make a mistake and would like to rollback, you can run the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix ecto.rollback HardwareZone.Repo
</span></code></pre></td></tr></table></div></figure>

<p>Next, we will need to create a module to store all the hardwares database queries. Let&#39;s create <code>web/models/queries.ex</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/models/queries.ex
</span></code></pre></td></tr></table></div></figure>

<p>and paste in the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">HardwareZone.Queries</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">import</span> <span class="nc">Ecto.Query</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">all_hardwares</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">query</span> <span class="p">=</span> <span class="n">from</span> <span class="n">hardware</span> <span class="ow">in</span> <span class="nc">HardwareZone.Hardware</span><span class="p">,</span> <span class="err">\</span>
</span><span class='line'>            <span class="ss">select</span><span class="p">:</span> <span class="n">hardware</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">HardwareZone.Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Next, edit <code>web/router.ex</code> to include RESTful routes to the approriate controller:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/router.ex
</span></code></pre></td></tr></table></div></figure>

<p>and paste in the source code below</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">HardwareZone.Router</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Phoenix.Router</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">scope</span> <span class="s2">&quot;/&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">pipe_through</span> <span class="ss">:browser</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">get</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="nc">HardwareZone.HardwaresController</span><span class="p">,</span> <span class="ss">:index</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:root</span>
</span><span class='line'>    <span class="n">resources</span> <span class="s2">&quot;/hardwares&quot;</span><span class="p">,</span> <span class="nc">HardwareZone.HardwaresController</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>We have added 2 routes, the first <code>get</code> line is to route the user to the index page of all the hardwares, i.e. it is the index page. On the second route, we are using <code>resources</code> function to route all the 7 RESTful actions to the approriate action in <code>HardwareZone.HardwaresController</code> that we are going to create. To verify all the routes are in, let&#39;s run the following command to check:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix phoenix.routes
</span></code></pre></td></tr></table></div></figure>

<p>The following should come out from your terminal</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>     root_path  GET     /                    HardwareZone.HardwaresController.index/2
</span><span class='line'>hardwares_path  GET     /hardwares           HardwareZone.HardwaresController.index/2
</span><span class='line'>hardwares_path  GET     /hardwares/:id/edit  HardwareZone.HardwaresController.edit/2
</span><span class='line'>hardwares_path  GET     /hardwares/new       HardwareZone.HardwaresController.new/2
</span><span class='line'>hardwares_path  GET     /hardwares/:id       HardwareZone.HardwaresController.show/2
</span><span class='line'>hardwares_path  POST    /hardwares           HardwareZone.HardwaresController.create/2
</span><span class='line'>hardwares_path  PUT     /hardwares/:id       HardwareZone.HardwaresController.update/2
</span><span class='line'>                PATCH   /hardwares/:id       HardwareZone.HardwaresController.update/2
</span><span class='line'>hardwares_path  DELETE  /hardwares/:id       HardwareZone.HardwaresController.destroy/2
</span></code></pre></td></tr></table></div></figure>

<p>The first column is the helper function name, which we will come back to it shortly. The second column is the HTTP web action that needs to be triggered. The third column is the relative URL to our application that needs to be trigger and the last column is the corresponding action to serve the triggered route.</p>

<p>Let try to start the phoenix server by running the following command from your terminal</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix phoenix.start
</span></code></pre></td></tr></table></div></figure>

<p>At this point of time, if you visit <a href="http://localhost:4000">http://localhost:4000</a>, it will show you the following error</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>UndefinedFunctionError<span class="o">)</span> undefined <span class="k">function</span>: HardwareZone.HardwaresController.call/2
</span><span class='line'><span class="o">(</span>module HardwareZone.HardwaresController is not available<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>The reason why is because we have not create any controller and index action to cater for root routes. Let&#39;s create <code>HardwareZone.HardwaresController</code> now</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/controller/hardwares_controller.ex
</span></code></pre></td></tr></table></div></figure>

<p>and paste in the following initial code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">HardwareZone.HardwaresController</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Phoenix.Controller</span>
</span><span class='line'>  <span class="kn">alias</span> <span class="nc">HardwareZone.Hardware</span>
</span><span class='line'>  <span class="kn">alias</span> <span class="nc">HardwareZone.Repo</span>
</span><span class='line'>  <span class="kn">import</span> <span class="nc">HardwareZone.Router.Helpers</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Next, let clean up a bit on the application view layout by editing file <code>web/templates/layout/application.html.eex</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/templates/layout/application.html.eex
</span></code></pre></td></tr></table></div></figure>

<p>and replace by the following code. Note that I have removed the phoenix default header and footer</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;X-UA-Compatible&quot;</span> <span class="na">content=</span><span class="s">&quot;IE=edge&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width, initial-scale=1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;description&quot;</span> <span class="na">content=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;author&quot;</span> <span class="na">content=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>Hardware Zone<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span>
</span><span class='line'>          <span class="na">href=</span><span class="s">&quot;//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span>
</span><span class='line'>          <span class="na">href=</span><span class="s">&quot;/css/app.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://code.jquery.com/jquery-1.11.1.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://raw.githubusercontent.com/rails/jquery-ujs/master/src/rails.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;navbar navbar-inverse navbar-fixed-top&quot;</span> <span class="na">role=</span><span class="s">&quot;navigation&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container-fluid&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;navbar-header&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span>
</span><span class='line'>                  <span class="na">class=</span><span class="s">&quot;navbar-toggle&quot;</span>
</span><span class='line'>                  <span class="na">data-toggle=</span><span class="s">&quot;collapse&quot;</span>
</span><span class='line'>                  <span class="na">data-target=</span><span class="s">&quot;.navbar-collapse&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;sr-only&quot;</span><span class="nt">&gt;</span>Toggle navigation<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>            <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;icon-bar&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
</span><span class='line'>            <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;icon-bar&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
</span><span class='line'>            <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;icon-bar&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/button&gt;</span>
</span><span class='line'>          <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;navbar-brand&quot;</span> <span class="na">href=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>Hardware Zone<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;collapse navbar-collapse&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;nav navbar-nav&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;&lt;%= HardwareZone.Router.hardwares_path(:new) %&gt;&quot;</span><span class="nt">&gt;</span>+ New Hardware<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span><span class="c">&lt;!--/.nav-collapse --&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container-fluid&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;starter-template&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="err">&lt;</span>%= @inner %&gt;
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span> <span class="c">&lt;!-- /container --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<ul>
<li>On line 38, we are making use of the Router helper to link to the New hardware page.</li>
<li>On line 45, the code <code>&lt;%= @inner %&gt;</code> is used to render the content that you create in order view. </li>
<li>On line 15 and 17, note that I have added in <code>jquery</code> library and borrow <code>jquery-ujs</code> from rails to support the delete function later on. </li>
</ul>

<p>Now, replace the content in file <code>priv/static/css/app.css</code> by</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">body</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">50px</span> <span class="m">15px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">div</span><span class="nc">.hardware-box</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="m">#ccc</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">135px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="m">#efefef</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin-top</span><span class="o">:</span> <span class="m">30px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">cursor</span><span class="o">:</span> <span class="k">pointer</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">div</span><span class="nc">.hardware-box</span> <span class="nt">div</span><span class="nc">.title</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-weight</span><span class="o">:</span> <span class="k">bold</span><span class="p">;</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">14px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">overflow</span><span class="o">:</span> <span class="k">hidden</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">div</span><span class="nc">.hardware-box</span> <span class="nt">div</span><span class="nc">.manufacturer</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="m">#999</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">div</span><span class="nc">.hardware-box</span> <span class="nt">div</span><span class="nc">.description</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">margin-top</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">60px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">overflow</span><span class="o">:</span> <span class="k">hidden</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">div</span><span class="nf">#error_explanation</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="m">#BA5353</span><span class="p">;</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="m">#fff</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin-bottom</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">5px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">div</span><span class="nf">#error_explanation</span> <span class="nt">div</span><span class="nc">.error-title</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin-bottom</span><span class="o">:</span> <span class="m">5px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">font-weight</span><span class="o">:</span> <span class="k">bold</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin-left</span><span class="o">:</span> <span class="m">-10px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin-top</span><span class="o">:</span> <span class="m">-10px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin-right</span><span class="o">:</span> <span class="m">-10px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="m">#AD2020</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">5px</span> <span class="m">5px</span> <span class="m">0</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">div</span><span class="nf">#error_explanation</span> <span class="nt">ul</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">list-style-type</span><span class="o">:</span> <span class="k">decimal</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding-left</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin-bottom</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now, we are ready. It&#39;s time for us to create 7 actions. Let&#39;s start with index action&#8230;</p>

<h3>1 - Index action</h3>

<p>Start by editing <code>hardwares_controller</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/controller/hardwares_controller.ex
</span></code></pre></td></tr></table></div></figure>

<p>and paste in the following <code>index</code> action</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">def</span> <span class="n">index</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="n">_params</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">hardwares</span> <span class="p">=</span> <span class="nc">HardwareZone.Queries</span><span class="p">.</span><span class="n">all_hardwares</span>
</span><span class='line'>  <span class="n">render</span> <span class="n">conn</span><span class="p">,</span> <span class="s2">&quot;index&quot;</span><span class="p">,</span> <span class="ss">hardwares</span><span class="p">:</span> <span class="n">hardwares</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>In this <code>index</code> action, what we have done is querying all the hardwares from our database and render these structs objects inside <code>index</code> view using the <code>render</code> command. Since we do not have an <code>index</code> page at the moment, let&#39;s create one by first creating <code>hardware_view.ex</code> in <code>web/views</code> folder:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/views/hardwares_view.ex
</span></code></pre></td></tr></table></div></figure>

<p>with the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">HardwareZone.HardwaresView</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">HardwareZone.Views</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then create the hardwares template folder:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir -p web/templates/hardwares
</span></code></pre></td></tr></table></div></figure>

<p>Then create file <code>web/templates/hardwares/index.html.eex</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/templates/hardwares/index.html.eex
</span></code></pre></td></tr></table></div></figure>

<p>paste in the following code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>%= for hardware <span class="nt">&lt;-</span> <span class="err">@</span><span class="na">hardwares</span> <span class="na">do</span> <span class="err">%</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-xs-6 col-md-4&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;hardware-box&#39;</span>
</span><span class='line'>           <span class="na">data-url=</span><span class="s">&#39;&lt;%= hardwares_path(:show, hardware.id) %&gt;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;title&#39;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= hardware.name %&gt;<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;manufacturer&#39;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= hardware.manufacturer %&gt;<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;description&#39;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= hardware.description %&gt;<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>% end %&gt;
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">language=</span><span class="s">&#39;javascript&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">).</span><span class="nx">delegate</span><span class="p">(</span><span class="s2">&quot;div.hardware-box&quot;</span><span class="p">,</span> <span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">document</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;data-url&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>It is a loop though all <code>@hardwares</code> object and render out the corresponing HTML. Note that you will need <code>&lt;%=</code> in <code>for</code> loop so that your content can be printed out correctly.</p>

<p>Now visit <a href="http://localhost:4000">http://localhost:4000</a>. What you can see will just be the navigation bar. This is because we do not have any hardwares in our database yet. Let&#39;s create a seeds file to add some initial hardwares. You will need to create file <code>seeds.ex</code> on the application root folder:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim seeds.ex
</span></code></pre></td></tr></table></div></figure>

<p>with the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">hardwares</span> <span class="p">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">%{</span>
</span><span class='line'>    <span class="ss">name</span><span class="p">:</span> <span class="s2">&quot;Macbook Pro&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Looks like new, in good condition, used for 1.5 years&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">manufacturer</span><span class="p">:</span> <span class="s2">&quot;Apple&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">sale_contact_number</span><span class="p">:</span> <span class="s2">&quot;912345678&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">%{</span>
</span><span class='line'>    <span class="ss">name</span><span class="p">:</span> <span class="s2">&quot;Toshiba CB35-B3340 Chromebook 2&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;This is thinner and lighter than its predecessor. Used for 2 years&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">manufacturer</span><span class="p">:</span> <span class="s2">&quot;Toshiba&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">sale_contact_number</span><span class="p">:</span> <span class="s2">&quot;987654321&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">%{</span>
</span><span class='line'>    <span class="ss">name</span><span class="p">:</span> <span class="s2">&quot;HP Chromebook 11 (Verizon LTE)&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;The design and construction of the laptop still looks good. Used for 1 year&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">manufacturer</span><span class="p">:</span> <span class="s2">&quot;HP&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">sale_contact_number</span><span class="p">:</span> <span class="s2">&quot;998765432&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">hardware</span> <span class="p">&lt;-</span> <span class="n">hardwares</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">new_hardware</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">merge</span><span class="p">(%</span><span class="nc">HardwareZone.Hardware</span><span class="p">{},</span> <span class="n">hardware</span><span class="p">)</span>
</span><span class='line'>  <span class="nc">HardwareZone.Repo</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">new_hardware</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then run this seeds file from your terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix run seeds.ex
</span></code></pre></td></tr></table></div></figure>

<p>Now refresh the page, you should already see some hardwares displayed on the index page. Let&#39;s move on to create a hardware.</p>

<h3>2 - New Action</h3>

<p>As usual, let&#39;s start by editing <code>hardwares_controller.ex</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/controller/hardwares_controller.ex
</span></code></pre></td></tr></table></div></figure>

<p>Add in the following function: </p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">def</span> <span class="n">new</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="n">_params</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">render</span> <span class="n">conn</span><span class="p">,</span> <span class="s2">&quot;new&quot;</span><span class="p">,</span> <span class="ss">hardware</span><span class="p">:</span> <span class="p">%</span><span class="nc">Hardware</span><span class="p">{}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Next, create <code>new.html.eex</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/templates/hardwares/new.html.eex
</span></code></pre></td></tr></table></div></figure>

<p>with the following content:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;</span>New Hardware <span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;br/&gt;</span>
</span><span class='line'><span class="err">&lt;</span>%= render &quot;form.html&quot;, hardware: @hardware, errors: @errors %&gt;
</span></code></pre></td></tr></table></div></figure>

<p>As we are trying to render a form view from this view, we will need to create a view named <code>web/templates/hardwares/form.html.eex</code>. This is different from Rails, where you will need to create this partial view file name with under score (<code>_</code>). The partial view file does not to be suffixed with underscore (<code>_</code>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/templates/hardwares/form.html.eex
</span></code></pre></td></tr></table></div></figure>

<p>and use following code content:</p>

<p>Note that line 1 to 13 are for errors displaying. In addition, in this form&#39;s action, we are actually checking if the hardware is a new record by looking into its id. If it is, we will just render the create path. otherwise, the update path will be used. Anoter note is from line 21 - 23 where we need to put extra hidden field with <code>PATCH</code> method so that it can be sent over the HTTP request. For <code>PATCH</code>, <code>PUT</code> and <code>DELETE</code> methods, they cannot be specified inside a HTML form method attribute.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="err">&lt;</span>%= if @errors do %&gt;
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&#39;error_explanation&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;error-title&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>      This form contains <span class="err">&lt;</span>%= errors_count = Enum.count(@errors) %&gt;
</span><span class='line'>      <span class="err">&lt;</span>%= if errors_count == 1, do: &quot;error&quot;, else: &quot;errors&quot; %&gt;:
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>      <span class="err">&lt;</span>%= for {key, value} <span class="nt">&lt;-</span> <span class="err">@</span><span class="na">errors</span> <span class="na">do</span> <span class="err">%</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li&gt;</span><span class="err">&lt;</span>%= String.capitalize(Atom.to_string(key)) %&gt; <span class="err">&lt;</span>%= value %&gt;<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>      <span class="err">&lt;</span>% end %&gt;
</span><span class='line'>    <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="err">&lt;</span>% end %&gt;
</span><span class='line'><span class="nt">&lt;form</span>
</span><span class='line'>  <span class="na">action=</span><span class="s">&quot;&lt;%= if @hardware.id, </span>
</span><span class='line'><span class="s">     do: hardwares_path(:update, @hardware.id), </span>
</span><span class='line'><span class="s">     else: hardwares_path(:create) %&gt;&quot;</span>
</span><span class='line'>  <span class="na">method=</span><span class="s">&quot;post&quot;</span>
</span><span class='line'>  <span class="na">enctype=</span><span class="s">&quot;multipart/form-data&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">&lt;</span>%= if @hardware.id do %&gt;
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">name=</span><span class="s">&quot;_method&quot;</span> <span class="na">value=</span><span class="s">&quot;PATCH&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>% end %&gt;
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;form-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;hardware[name]&quot;</span><span class="nt">&gt;</span>Name<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;hardware[name]&quot;</span> <span class="na">class=</span><span class="s">&quot;form-control&quot;</span> <span class="na">value=</span><span class="s">&#39;&lt;%= @hardware.name %&gt;&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;form-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;hardware[description]&quot;</span><span class="nt">&gt;</span>Description<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>    <span class="nt">&lt;textarea</span>
</span><span class='line'>      <span class="na">name=</span><span class="s">&quot;hardware[description]&quot;</span>
</span><span class='line'>      <span class="na">class=</span><span class="s">&quot;form-control&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= @hardware.description %&gt;<span class="nt">&lt;/textarea&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;form-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;hardware[manufacturer]&quot;</span><span class="nt">&gt;</span>Manufacturer<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span>
</span><span class='line'>           <span class="na">name=</span><span class="s">&quot;hardware[manufacturer]&quot;</span>
</span><span class='line'>           <span class="na">class=</span><span class="s">&quot;form-control&quot;</span>
</span><span class='line'>           <span class="na">value=</span><span class="s">&#39;&lt;%= @hardware.manufacturer %&gt;&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;form-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;hardware[sale_contact_number]&quot;</span><span class="nt">&gt;</span>Sale Contact Numbner<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span>
</span><span class='line'>           <span class="na">name=</span><span class="s">&quot;hardware[sale_contact_number]&quot;</span>
</span><span class='line'>           <span class="na">class=</span><span class="s">&quot;form-control&quot;</span>
</span><span class='line'>           <span class="na">value=</span><span class="s">&#39;&lt;%= @hardware.sale_contact_number %&gt;&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">class=</span><span class="s">&quot;btn btn-primary&quot;</span><span class="nt">&gt;</span>Save<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>  <span class="ni">&amp;nbsp;&amp;nbsp;</span>or
</span><span class='line'>  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&#39;&lt;%= HardwareZone.Router.hardwares_path(:index) %&gt;&#39;</span><span class="nt">&gt;</span>Cancel<span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span><span class='line'><span class="nt">&lt;br/&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now if you visit <a href="http://localhost:4000/hardwares/new">http://localhost:4000/hardwares/new</a>, you should see the form. In order to create a hardware, let&#39;s move to create a <code>create</code> action to save this form.</p>

<h4>3 - Create Action</h4>

<p>Let&#39;s start with controller <code>hardwares_controller.ex</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/controller/hardwares_controller.ex
</span></code></pre></td></tr></table></div></figure>

<p>and add in the following functions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">def</span> <span class="n">create</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="p">%{</span><span class="s2">&quot;hardware&quot;</span> <span class="p">=&gt;</span> <span class="n">params</span><span class="p">})</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">hardware</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">merge</span><span class="p">(%</span><span class="nc">Hardware</span><span class="p">{},</span> <span class="n">atomize_keys</span><span class="p">(</span><span class="n">params</span><span class="p">))</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Hardware</span><span class="p">.</span><span class="n">validate</span><span class="p">(</span><span class="n">hardware</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="p">[]</span> <span class="p">-&gt;</span>
</span><span class='line'>      <span class="n">hardware</span> <span class="p">=</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">hardware</span><span class="p">)</span>
</span><span class='line'>      <span class="n">redirect</span> <span class="n">conn</span><span class="p">,</span> <span class="n">hardwares_path</span><span class="p">(</span><span class="ss">:show</span><span class="p">,</span> <span class="n">hardware</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">errors</span> <span class="p">-&gt;</span>
</span><span class='line'>      <span class="n">render</span> <span class="n">conn</span><span class="p">,</span> <span class="s2">&quot;new&quot;</span><span class="p">,</span> <span class="ss">hardware</span><span class="p">:</span> <span class="n">hardware</span><span class="p">,</span> <span class="ss">errors</span><span class="p">:</span> <span class="n">errors</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">defp</span> <span class="n">atomize_keys</span><span class="p">(</span><span class="n">struct</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="nc">Enum</span><span class="p">.</span><span class="n">reduce</span> <span class="n">struct</span><span class="p">,</span> <span class="p">%{},</span> <span class="k">fn</span><span class="p">({</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">},</span> <span class="n">map</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nc">Map</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">map</span><span class="p">,</span> <span class="nc">String</span><span class="p">.</span><span class="n">to_atom</span><span class="p">(</span><span class="n">k</span><span class="p">),</span> <span class="n">v</span><span class="p">)</span> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>We have defined another helper private function <code>atomize_keys</code> (<code>defp</code> stands for private definition) which is responsible for converting a struct with string key to a struct with atom key. We then merge the atomized params with the empty <code>Hardware</code> struct, validate the Hardware at line 3, insert at line 5 before redirect the page to <code>show</code> action. If the hardware has validation errors, it will render back the <code>new</code> action at line 8. Let&#39;s move on to show action before we can try out the create function.</p>

<h4>4 - Show Action</h4>

<p>Again, let add the following <code>show</code> action in controller <code>web/controller/hardware_controller.ex</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/controller/hardware_controller.ex
</span></code></pre></td></tr></table></div></figure>

<p>The <code>show</code> action code is as below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">def</span> <span class="n">show</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="p">%{</span><span class="s2">&quot;id&quot;</span> <span class="p">=&gt;</span> <span class="n">id</span><span class="p">})</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nc">Hardware</span><span class="p">,</span> <span class="nc">String</span><span class="p">.</span><span class="n">to_integer</span><span class="p">(</span><span class="n">id</span><span class="p">))</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">hardware</span> <span class="ow">when</span> <span class="n">is_map</span><span class="p">(</span><span class="n">hardware</span><span class="p">)</span> <span class="p">-&gt;</span>
</span><span class='line'>      <span class="n">render</span> <span class="n">conn</span><span class="p">,</span> <span class="s2">&quot;show&quot;</span><span class="p">,</span> <span class="ss">hardware</span><span class="p">:</span> <span class="n">hardware</span>
</span><span class='line'>    <span class="bp">_</span> <span class="p">-&gt;</span>
</span><span class='line'>      <span class="n">redirect</span> <span class="n">conn</span><span class="p">,</span> <span class="n">hardwares_path</span><span class="p">(</span><span class="ss">:index</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>The code above starts by checking for the existence of the hardware with given parameter name <code>id</code>. By using the <code>case</code> condition on line 2 and the guard condition <code>is_map(hardware)</code> on line 3, it is guaranteed that the hardware does exist to show on line 4. Otherwise, it will redirect to the hardware index page.</p>

<p>Because we are rendering a <code>show</code> view on line 4, let&#39;s add <code>show</code> view by creating file <code>web/templates/hardwares/show.html.eex</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/templates/hardwares/show.html.eex
</span></code></pre></td></tr></table></div></figure>

<p>with the following code content</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;br/&gt;</span>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&#39;&lt;%= hardwares_path(:index) %&gt;&#39;</span><span class="nt">&gt;</span><span class="ni">&amp;larr;</span> List of Hardwares<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h1&gt;</span><span class="err">&lt;</span>%= @hardware.name %&gt;<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&#39;manufacturer&#39;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= @hardware.manufacturer %&gt;<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;br/&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;description&#39;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= @hardware.description %&gt;<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span>%= if @hardware.sale_contact_number do %&gt;
</span><span class='line'>  Want to buy, contact me at: <span class="err">&lt;</span>%= @hardware.sale_contact_number %&gt;
</span><span class='line'><span class="err">&lt;</span>% end %&gt;
</span><span class='line'><span class="nt">&lt;br/&gt;&lt;br/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&#39;&lt;%= hardwares_path(:edit, @hardware.id) %&gt;&#39;</span>
</span><span class='line'>   <span class="na">class=</span><span class="s">&#39;btn btn-primary&#39;</span><span class="nt">&gt;</span>Edit<span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="ni">&amp;nbsp;</span>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&#39;&lt;%= hardwares_path(:destroy, @hardware.id) %&gt;&#39;</span>
</span><span class='line'>   <span class="na">class=</span><span class="s">&#39;btn btn-danger&#39;</span>
</span><span class='line'>   <span class="na">data-confirm=</span><span class="s">&quot;Are you sure that you want to delete this hardware?&quot;</span>
</span><span class='line'>   <span class="na">data-method=</span><span class="s">&quot;DELETE&quot;</span><span class="nt">&gt;</span>Remove<span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Take note that line 19 to 22 are for the delete button with <code>data-confirm</code> and <code>data-method</code> attribute. If you click on it, it will trigger the confirm window and submit with <code>DELETE</code> HTTP method to that link URL. This can be achieved thank to the <code>jquery-ujs</code> that we put inside <code>head</code> tag earlier.</p>

<p>Now let&#39;s move on to <code>edit</code> action.</p>

<h4>5 - Edit Action</h4>

<p>Start with controller code <code>web/controllers/hardwares_controller.ex</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/controllers/hardwares_controller.ex
</span></code></pre></td></tr></table></div></figure>

<p>and add in <code>edit</code> action</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">def</span> <span class="n">edit</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="p">%{</span><span class="s2">&quot;id&quot;</span> <span class="p">=&gt;</span> <span class="n">id</span><span class="p">})</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nc">Hardware</span><span class="p">,</span> <span class="nc">String</span><span class="p">.</span><span class="n">to_integer</span><span class="p">(</span><span class="n">id</span><span class="p">))</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">hardware</span> <span class="ow">when</span> <span class="n">is_map</span><span class="p">(</span><span class="n">hardware</span><span class="p">)</span> <span class="p">-&gt;</span>
</span><span class='line'>      <span class="n">render</span> <span class="n">conn</span><span class="p">,</span> <span class="s2">&quot;edit&quot;</span><span class="p">,</span> <span class="ss">hardware</span><span class="p">:</span> <span class="n">hardware</span>
</span><span class='line'>    <span class="bp">_</span> <span class="p">-&gt;</span>
</span><span class='line'>      <span class="n">redirect</span> <span class="n">conn</span><span class="p">,</span> <span class="n">hardwares_path</span><span class="p">(</span><span class="ss">:index</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>This is quite similar to <code>show</code> action whereby a query for the Hardware using parameter id happens on line 2 and after that a rendering <code>edit</code> view if there is such a hardware. Otherwise, it redirects to index action. Now, let&#39;s create <code>edit</code> view for this action:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/templates/hardwares/edit.html.eex
</span></code></pre></td></tr></table></div></figure>

<p>and paste in the code below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h2&gt;</span>Edit Hardware<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'><span class="nt">&lt;br/&gt;</span>
</span><span class='line'><span class="err">&lt;</span>%= render &quot;form.html&quot;, hardware: @hardware, errors: @errors %&gt;
</span></code></pre></td></tr></table></div></figure>

<p>As you notice, the same form view except the header can be employed for the <code>edit</code> action by using <code>render</code>. Now, to make this <code>edit</code> form be able to save the data, let&#39;s create <code>update</code> action. </p>

<h4>6 - Update Action</h4>

<p>First, edit <code>web/controllers/hardwares_controller.ex</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/controllers/hardwares_controller.ex
</span></code></pre></td></tr></table></div></figure>

<p>and add in the <code>update</code> function as below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">def</span> <span class="n">update</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="p">%{</span><span class="s2">&quot;id&quot;</span> <span class="p">=&gt;</span> <span class="n">id</span><span class="p">,</span> <span class="s2">&quot;hardware&quot;</span> <span class="p">=&gt;</span> <span class="n">params</span><span class="p">})</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nc">Hardware</span><span class="p">,</span> <span class="nc">String</span><span class="p">.</span><span class="n">to_integer</span><span class="p">(</span><span class="n">id</span><span class="p">))</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">hardware</span> <span class="ow">when</span> <span class="n">is_map</span><span class="p">(</span><span class="n">hardware</span><span class="p">)</span> <span class="p">-&gt;</span>
</span><span class='line'>      <span class="n">hardware</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">merge</span><span class="p">(</span><span class="n">hardware</span><span class="p">,</span> <span class="n">atomize_keys</span><span class="p">(</span><span class="n">params</span><span class="p">))</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">Hardware</span><span class="p">.</span><span class="n">validate</span><span class="p">(</span><span class="n">hardware</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>        <span class="p">[]</span> <span class="p">-&gt;</span>
</span><span class='line'>          <span class="nc">Repo</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">hardware</span><span class="p">)</span>
</span><span class='line'>          <span class="n">redirect</span> <span class="n">conn</span><span class="p">,</span> <span class="n">hardwares_path</span><span class="p">(</span><span class="ss">:show</span><span class="p">,</span> <span class="n">hardware</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>        <span class="n">errors</span> <span class="p">-&gt;</span>
</span><span class='line'>          <span class="n">render</span> <span class="n">conn</span><span class="p">,</span> <span class="s2">&quot;edit&quot;</span><span class="p">,</span> <span class="ss">hardware</span><span class="p">:</span> <span class="n">hardware</span><span class="p">,</span> <span class="ss">errors</span><span class="p">:</span> <span class="n">errors</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="bp">_</span> <span class="p">-&gt;</span>
</span><span class='line'>      <span class="n">redirect</span> <span class="n">conn</span><span class="p">,</span> <span class="n">hardwares_path</span><span class="p">(</span><span class="ss">:index</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Since there are a few things happening here, let&#39;s go through this piece of code line by line so that we can understand more:</p>

<ul>
<li>On line 1, as usual it is the function with the second parameters which are the parameters sent from front end. We will need to split these parameters to <code>id</code> and the <code>hardware</code> struct.</li>
<li>On line 2, we will then try to get the corresponding database record. Note that you will need to convert <code>id</code> to integer before you can use <code>Repo.get</code>.</li>
<li>On line 3, the <code>case</code> code will only go to this branch if the result of <code>Repo.get</code> is a map, which implies that there is such record inside our database.</li>
<li>On line 4, we then merge the current database record with the keys atomized <code>hardware</code> data sent from front end.</li>
<li>On line 5, validation kicks in to validate the updated <code>hardware</code></li>
<li>On line 6, the <code>case</code> code will only go to this branch if no errors are detected</li>
<li>On line 7, trigger the actual update using <code>Repo.update</code></li>
<li>On line 8, after update, it redirects back to show the hardware.</li>
<li>On line 9, the <code>case</code> code will go to this branch if errors occur during validation</li>
<li>On line 10, because of the error, we will re-render <code>edit</code> action with the attached <code>errors</code> </li>
</ul>

<p>That&#39;s it for update action. Now let&#39;s move on to destroy or delete action</p>

<h4>7 - Destroy action</h4>

<p>We only need to add in destroy function inside <code>web/controllers/hardwares_controller.ex</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/controllers/hardwares_controller.ex
</span></code></pre></td></tr></table></div></figure>

<p>and add this the destroy action as below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">def</span> <span class="n">destroy</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="p">%{</span><span class="s2">&quot;id&quot;</span> <span class="p">=&gt;</span> <span class="n">id</span><span class="p">})</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nc">Hardware</span><span class="p">,</span> <span class="nc">String</span><span class="p">.</span><span class="n">to_integer</span><span class="p">(</span><span class="n">id</span><span class="p">))</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">hardware</span> <span class="ow">when</span> <span class="n">is_map</span><span class="p">(</span><span class="n">hardware</span><span class="p">)</span> <span class="p">-&gt;</span>
</span><span class='line'>      <span class="nc">Repo</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="n">hardware</span><span class="p">)</span>
</span><span class='line'>      <span class="n">redirect</span> <span class="n">conn</span><span class="p">,</span> <span class="n">hardwares_path</span><span class="p">(</span><span class="ss">:index</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">_</span> <span class="p">-&gt;</span>
</span><span class='line'>      <span class="n">redirect</span> <span class="n">conn</span><span class="p">,</span> <span class="n">hardwares_path</span><span class="p">(</span><span class="ss">:index</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<h3>Wrap Up</h3>

<p>I hope you have enjoyed building a 7 action Phoenix app with Elixir. If you want to extend this basic app, it will play as a good exercise for you to understand more about Elixir and Phoenix :-).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy Phoenix Application to a Ubuntu Server]]></title>
    <link href="http://learnelixir.com/blog/2014/10/16/deploy-phoenix-application-to-a-ubuntu-server/"/>
    <updated>2014-10-16T22:26:46+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/16/deploy-phoenix-application-to-a-ubuntu-server</id>
    <content type="html"><![CDATA[<p><strong>UPDATE</strong> on 28th Oct 14: I have updated this article in order to work with Phoenix framework version 0.5.0. Previously the Phoenix framework used in this article was 0.4.1. The source code is available on the following git URL:</p>

<p><a href="https://github.com/learnelixir/my-awesome-app">https://github.com/learnelixir/my-awesome-app</a>
<hr/><br/>
In previous article, we have already learned how to deploy a Phoenix Application to Heroku server. I am actually quite curious to see how Elixir, and Phoenix can work with nginx server. That&#39;s the reason why I try to dig into this topic. Here are the steps that I managed to find out how to automate the deployment process and run the application on nginx server.</p>

<!-- more -->

<h3>Step to set create a basic Phoenix application.</h3>

<p>You can skip this section if you already have a Phoenix application to deploy</p>

<p>From phoenix installation folder, run the following command. You can name it any name as long as you remember to use the same app name in subsequent steps.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix phoenix.new my_awesome_app ../
</span></code></pre></td></tr></table></div></figure>

<p>Enter this new application folder and install all the dependencies</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ../my_awesome_app
</span><span class='line'>mix <span class="k">do</span> deps.get, compile
</span></code></pre></td></tr></table></div></figure>

<p>This is a miminal number of steps to setup a phoenix application. Eventually, you will need to add more code to build it up. Moving forward, let&#39;s deploy this application. </p>

<h3>Deploy and Deploy</h3>

<h4>Step 1: Install capistrano and capify</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gem install capistrano --version<span class="o">=</span>2.15.5
</span></code></pre></td></tr></table></div></figure>

<p>then capify it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>capify .
</span><span class='line'><span class="o">[</span>add<span class="o">]</span> writing <span class="s1">&#39;./Capfile&#39;</span>
</span><span class='line'><span class="o">[</span>add<span class="o">]</span> writing <span class="s1">&#39;./config/deploy.rb&#39;</span>
</span><span class='line'><span class="o">[</span><span class="k">done</span><span class="o">]</span> capified!
</span></code></pre></td></tr></table></div></figure>

<p>and create a folder for multi staging deploy later.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir config/deploy
</span></code></pre></td></tr></table></div></figure>

<h4>Step 2: Add exrm to the dependencies</h4>

<p>Exrm stands for Elixir Release Management. It is a very nice tool to help release this phoenix app into a runnable standalone application. Everytime we deploy, we will need to run <code>mix release</code> to generate a ready-to-run application. Exrm will help us to handle the release process nicely.</p>

<p>To start, you will need to add <code>exrm</code> into <code>mix.exs</code>  </p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defp</span> <span class="n">deps</span> <span class="k">do</span>
</span><span class='line'>  <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:phoenix</span><span class="p">,</span> <span class="s2">&quot;0.5.0&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:cowboy</span><span class="p">,</span> <span class="s2">&quot;~&gt; 1.0.0&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:exrm</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.14.11&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>And install</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix deps.get
</span></code></pre></td></tr></table></div></figure>

<h4>Step 3: Change the way the application starts</h4>

<p>Add in <strong>line 14</strong> to the application file in lib folder. In my case it is <code>lib/my_awesome_app.ex</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">MyAwesomeApp</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Application</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># See http://elixir-lang.org/docs/stable/elixir/Application.html</span>
</span><span class='line'>  <span class="c1"># for more information on OTP Applications</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">start</span><span class="p">(</span><span class="n">_type</span><span class="p">,</span> <span class="n">_args</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="kn">import</span> <span class="nc">Supervisor.Spec</span><span class="p">,</span> <span class="ss">warn</span><span class="p">:</span> <span class="no">false</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">children</span> <span class="p">=</span> <span class="p">[</span>
</span><span class='line'>      <span class="c1"># Define workers and child supervisors to be supervised</span>
</span><span class='line'>      <span class="c1"># worker(TestApp.Worker, [arg1, arg2, arg3])</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">MyAwesomeApp.Router</span><span class="p">.</span><span class="n">start</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">opts</span> <span class="p">=</span> <span class="p">[</span><span class="ss">strategy</span><span class="p">:</span> <span class="ss">:one_for_one</span><span class="p">,</span> <span class="ss">name</span><span class="p">:</span> <span class="nc">MyAwesomeApp.Supervisor</span><span class="p">]</span>
</span><span class='line'>    <span class="nc">Supervisor</span><span class="p">.</span><span class="n">start_link</span><span class="p">(</span><span class="n">children</span><span class="p">,</span> <span class="n">opts</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>After adding line 14, your application in development mode will no longer be able to start the normal way - <code>mix phoenix.start</code>. It will crash immediately like below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Running MyAwesomeApp.Router with Cowboy on port 4000
</span><span class='line'>** <span class="o">(</span>CaseClauseError<span class="o">)</span> no <span class="k">case</span> clause matching: <span class="o">{</span>:error, <span class="o">{</span>:already_started, <span class="c">#PID&lt;0.149.0&gt;}}</span>
</span><span class='line'>    <span class="o">(</span>phoenix<span class="o">)</span> lib/phoenix/router.ex:78: Phoenix.Router.start_adapter/2
</span><span class='line'>    <span class="o">(</span>phoenix<span class="o">)</span> lib/mix/tasks/phoenix/start.ex:12: Mix.Tasks.Phoenix.Start.run/1
</span><span class='line'>    <span class="o">(</span>mix<span class="o">)</span> lib/mix/cli.ex:55: Mix.CLI.run_task/2
</span><span class='line'>    <span class="o">(</span>elixir<span class="o">)</span> src/elixir_lexical.erl:17: :elixir_lexical.run/3
</span><span class='line'>    <span class="o">(</span>elixir<span class="o">)</span> lib/code.ex:316: Code.require_file/2
</span></code></pre></td></tr></table></div></figure>

<p>To fix this issue, you will need to run the phoenix server using the command below in development mode:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>iex -S mix phoenix.start
</span></code></pre></td></tr></table></div></figure>

<h4>Step 3: Push all the source code to a git repository</h4>

<p>Create a git place for your code to be stored in online. For my case, I have created a public github project at <code>git@github.com:learnelixir/my-awesome-app.git</code></p>

<p>Then from the application root folder, type the following commands to add the git remote url. Remember to change the git url accordingly</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git init
</span><span class='line'><span class="nv">$ </span>git remote add origin git@github.com:learnelixir/my-awesome-app.git
</span></code></pre></td></tr></table></div></figure>

<p>Then push everything up to this repo</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git add . <span class="o">&amp;&amp;</span> git commit -am <span class="s2">&quot;initial commit&quot;</span>
</span><span class='line'><span class="nv">$ </span>git push origin master
</span></code></pre></td></tr></table></div></figure>

<h4>Step 4: Install erlang and elixir on ubuntu server</h4>

<p>Login to your server, and run the following command to install erlang environment:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>wget http://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb
</span><span class='line'><span class="nv">$ </span>sudo dpkg -i erlang-solutions_1.0_all.deb
</span><span class='line'><span class="nv">$ </span>sudo apt-get update
</span><span class='line'><span class="nv">$ </span>sudo apt-get install erlang
</span></code></pre></td></tr></table></div></figure>

<p>Since phoenix is runnng on Elixir 1.0.1+ now, we cannot install elixir by using <code>sudo apt-get install elixir</code> which will only install elixir 1.0.0. We will need to download the prebuilt package. If you have already installed elixir, you will need to remove it by using the command <code>sudo apt-get remove elixir</code>. After that, from your home folder, type the following commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~
</span><span class='line'><span class="nv">$ </span>mkdir -p src
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>src
</span><span class='line'><span class="nv">$ </span>wget https://github.com/elixir-lang/elixir/releases/download/v1.0.2/Precompiled.zip
</span><span class='line'><span class="nv">$ </span>unzip Precompile.zip -d elixir
</span></code></pre></td></tr></table></div></figure>

<p>Then open <code>~/.profile</code> file and add in the elixir path</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim ~/.profile
</span></code></pre></td></tr></table></div></figure>

<p>add the path to elixir bin folder at the end of the file. In my case it is <code>/home/app/src/elixir</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;$PATH:/home/app/src/elixir/bin&quot;</span>
</span><span class='line'><span class="c"># export PATH=&quot;$PATH:&lt;path_to_elixir_bin_folder&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>then make <code>~/.profile</code> take effect:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>. ~/.profile
</span></code></pre></td></tr></table></div></figure>

<p>and check Elixir version now. It should come up with 1.0.2</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>elixir --version
</span><span class='line'>Elixir 1.0.2
</span></code></pre></td></tr></table></div></figure>

<h4>Step 5: Adjust your locale to UTF8</h4>

<p>Elixir is quite particular about the locale issue. It will give a lot of warnings later when we deploy if we do not set it up now. You can start by running the following commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">LANGUAGE</span><span class="o">=</span>en_US.UTF-8
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">LANG</span><span class="o">=</span>en_US.UTF-8
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">LC_ALL</span><span class="o">=</span>en_US.UTF-8
</span><span class='line'><span class="nv">$ </span>locale-gen en_US.UTF-8
</span><span class='line'><span class="nv">$ </span>sudo apt-get install locales
</span><span class='line'><span class="nv">$ </span>sudo dpkg-reconfigure locales
</span></code></pre></td></tr></table></div></figure>

<p>Then put the following export lines at the end of <code>~/.profile</code>: </p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">LANGUAGE</span><span class="o">=</span>en_US.UTF-8
</span><span class='line'><span class="nb">export </span><span class="nv">LANG</span><span class="o">=</span>en_US.UTF-8
</span><span class='line'><span class="nb">export </span><span class="nv">LC_ALL</span><span class="o">=</span>en_US.UTF-8
</span></code></pre></td></tr></table></div></figure>

<p>Finally, put the following code at the end of <code>/etc/environment</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">LC_ALL</span><span class="o">=</span>en_US.UTF-8
</span><span class='line'><span class="nv">LANG</span><span class="o">=</span>en_US.UTF-8
</span></code></pre></td></tr></table></div></figure>

<h4>Step 5: Edit config/deploy.rb</h4>

<p>Edit <code>config/deploy.rb</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim config/deploy.rb
</span></code></pre></td></tr></table></div></figure>

<p>And paste in the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/ext/multistage&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:stages</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;staging&quot;</span><span class="p">,</span> <span class="s2">&quot;production&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:default_stage</span><span class="p">,</span> <span class="s2">&quot;production&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:keep_releases</span><span class="p">,</span> <span class="mi">5</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:application</span><span class="p">,</span> <span class="s2">&quot;My Awesome App&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:repository</span><span class="p">,</span>  <span class="s2">&quot;git@github.com:learnelixir/my-awesome-app.git&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:scm</span><span class="p">,</span> <span class="ss">:git</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:branch</span><span class="p">,</span> <span class="ss">:master</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:use_sudo</span><span class="p">,</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:normalize_asset_timestamps</span><span class="p">,</span> <span class="kp">false</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_via</span><span class="p">,</span> <span class="ss">:remote_cache</span>
</span><span class='line'><span class="n">after</span> <span class="s2">&quot;deploy:update&quot;</span><span class="p">,</span> <span class="s2">&quot;deploy:cleanup&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">after</span> <span class="s2">&quot;deploy:update&quot;</span><span class="p">,</span> <span class="s2">&quot;deploy:build&quot;</span><span class="p">,</span> <span class="s2">&quot;deploy:cleanup&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:assets</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:precompile</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="ss">:web</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># do nothing</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">is_application_running?</span><span class="p">(</span><span class="n">current_path</span><span class="p">)</span>
</span><span class='line'>  <span class="n">pid</span> <span class="o">=</span> <span class="n">capture</span><span class="p">(</span><span class="sx">%Q{ps ax -o pid= -o command=|</span>
</span><span class='line'><span class="sx">      grep &quot;/home/app/www/my_awesome_app/current/rel/my_awesome_app/.*/[b]eam&quot;|awk &#39;{print $1}&#39;}</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">pid</span> <span class="o">!=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:is_running</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="ss">:web</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">is_running</span> <span class="o">=</span> <span class="n">is_application_running?</span><span class="p">(</span><span class="n">current_path</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">is_running</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Application is running&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Application is NOT running&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:build</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="ss">:web</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">run</span> <span class="s2">&quot;cd </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2"> &amp;&amp; mix deps.get &amp;&amp; MIX_ENV=</span><span class="si">#{</span><span class="n">mix_env</span><span class="si">}</span><span class="s2"> mix release&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:restart</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="ss">:web</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">is_application_running?</span><span class="p">(</span><span class="n">current_path</span><span class="p">)</span>
</span><span class='line'>      <span class="n">run</span> <span class="s2">&quot;cd </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2">/rel/my_awesome_app/bin &amp;&amp; ./my_awesome_app stop&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">run</span> <span class="s2">&quot;cd </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2">/rel/my_awesome_app/bin &amp;&amp; ./my_awesome_app start&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:start</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="ss">:web</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">run</span> <span class="s2">&quot;cd </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2">/rel/my_awesome_app/bin &amp;&amp; ./my_awesome_app start&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:stop</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="ss">:web</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">run</span> <span class="s2">&quot;cd </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2">/rel/my_awesome_app/bin &amp;&amp; ./my_awesome_app stop&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>We have re-written 3 default task in capistrano. They are <code>restart</code>, <code>start</code> and <code>stop</code>. These are used to run the script which was generated in step 2. Note that this script is generated by the command `<code>mix release</code> on line 41. You will need to change the application name accordingly. In my case, the application name is <code>my_awesome_app</code>.</p>

<p>Besides <code>cap deploy</code>, here the commands that you can run with this capistrano:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cap deploy:is_running <span class="c"># tell you if the application is running</span>
</span><span class='line'><span class="nv">$ </span>cap deploy:stop       <span class="c"># stop the application</span>
</span><span class='line'><span class="nv">$ </span>cap deploy:start      <span class="c"># start the application</span>
</span><span class='line'><span class="nv">$ </span>cap deploy:restart    <span class="c"># restart the application</span>
</span></code></pre></td></tr></table></div></figure>

<h4>Step 6: Create production.rb file inside config/deploy folder</h4>

<p>Create `<code>config/deploy/production.rb</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim config/deploy/production.rb
</span></code></pre></td></tr></table></div></figure>

<p>Then paste in the following code. You will need to change the server IP address in <code>xx.xx.xx.xx</code>, replace the server username in `<code>&lt;user&gt;</code> and change the path to your the compiled elixir bin folder mentioned ealier in this article:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">server</span> <span class="s2">&quot;xx.xx.xx.xx&quot;</span><span class="p">,</span> <span class="ss">:app</span><span class="p">,</span> <span class="ss">:web</span><span class="p">,</span> <span class="ss">:db</span><span class="p">,</span> <span class="ss">:primary</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:user</span><span class="p">,</span> <span class="s1">&#39;&lt;user&gt;&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:branch</span><span class="p">,</span> <span class="ss">:master</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:mix_env</span><span class="p">,</span> <span class="ss">:prod</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s2">&quot;/home/&lt;user&gt;/www/my_awesome_app&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:default_environment</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;PATH&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;$PATH:/home/app/src/elixir/bin&quot;</span> <span class="c1"># --&gt; replace by path to your elixir bin folder</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>You can also create <code>staging.rb</code> inside <code>config/deploy</code> folder as well for your staging environment.</p>

<h4>Step 7: Run deploy setup and actual deploy</h4>

<p>Run the following command to initialize the capistrano folder structure for you for future deployments:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cap deploy:setup
</span></code></pre></td></tr></table></div></figure>

<p>Then launch the actual deployment and wait. On the first time, the server will take some times to install all the dependencies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cap deploy
</span></code></pre></td></tr></table></div></figure>

<h4>Step 8: Connect with nginx server</h4>

<p>Create the nginx configuration file on your nginx <code>sites-available</code> folder. In this case, it is <code>/etc/nginx/sites-available/my_awesome_app.com</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim /etc/nginx/sites-available/my-awesome-app.com
</span></code></pre></td></tr></table></div></figure>

<p>Paste in the following code. Note that <strong>you will need to change the IP Address of your server on line 6 and the Domain name on line 7 to match with your server config</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>upstream my_awesome_app <span class="o">{</span>
</span><span class='line'>  server 127.0.0.1:4000<span class="p">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>server <span class="o">{</span>
</span><span class='line'>  listen xx.xx.xx.xx:80<span class="p">;</span>
</span><span class='line'>  server_name app-url.com app-url.com<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  try_files <span class="nv">$uri</span>/index.html <span class="nv">$uri</span> @my_awesome_app<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  location @my_awesome_app <span class="o">{</span>
</span><span class='line'>    proxy_set_header Host <span class="nv">$http_host</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span>!-f <span class="nv">$request_filename</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      proxy_pass http://my_awesome_app<span class="p">;</span>
</span><span class='line'>      <span class="nb">break</span><span class="p">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  error_page <span class="m">500</span> <span class="m">502</span> <span class="m">503</span> <span class="m">504</span> /500.html<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  access_log  /var/log/nginx/my_awesome_app.log<span class="p">;</span>
</span><span class='line'>  error_log  /var/log/nginx/my_awesome_app.log<span class="p">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>I leave the default port 4000 on my phoenix configuration. But you can change it inside your <code>config/prod.exs</code></p>

<p>Then link this file to the same file name in <code>/etc/nginx/sites-enabled</code>. Note that by using <code>ln</code> command, source file always come first.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo ln -nfs /etc/nginx/sites-available/my-awesome-app.com <span class="se">\</span>
</span><span class='line'>             /etc/nginx/sites-enabled/my-awesome-app.com
</span></code></pre></td></tr></table></div></figure>

<p>Test the nginx config:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo /etc/init.d/nginx configtest
</span></code></pre></td></tr></table></div></figure>

<p>If everything is okay, restart the nginx server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo /etc/init.d/nginx restart
</span></code></pre></td></tr></table></div></figure>

<h3>Conclusion</h3>

<p>Now after so many steps, finally I can enjoy my small victory by visiting the site and see it has been deployed up :-)</p>

<p><img class="center" src="http://learnelixir.com/images/deploy_app_to_server/ubuntu.png" width="800" height="509" title="image" alt="images"></p>

<p>Happy Deploying!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy Phonenix Application to Heroku]]></title>
    <link href="http://learnelixir.com/blog/2014/10/15/deploy-phonenix-application-to-heroku-server/"/>
    <updated>2014-10-15T23:16:00+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/15/deploy-phonenix-application-to-heroku-server</id>
    <content type="html"><![CDATA[<p><strong>UPDATE</strong> on 27th Oct 14: I have updated this article in order to work with Phoenix framework version 0.5.0. Previously the Phoenix framework used in this article was 0.4.1. The source code is available on the following git URL:</p>

<p><a href="https://github.com/learnelixir/phoenix-heroku">https://github.com/learnelixir/phoenix-heroku</a>
<hr/><br/>
Phoenix is a pretty cool web framework for Elixir. However, up to date, there are still very few resources on how to deploy a Phoenix application to a web server. I tried to google on how to deploy but could not find any tutorials that provide very clear and exact steps. Hence, in this article, let walkthrouh step by step how to do that with a heroku server.</p>

<!-- more -->

<h3>Create an awesome Phoenix application</h3>

<p>From phoenix installation folder, run the following command. You can name it any name as long as you remember to use the same app name in subsequent steps.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix phoenix.new phoenix-heroku ../
</span></code></pre></td></tr></table></div></figure>

<p>Enter this new application </p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ../phoenix-heroku
</span></code></pre></td></tr></table></div></figure>

<p>and change the phoenix deps to refer to ref <code>8cffae4</code> sha. There is an error in current Phoenix 0.5 version whereby the view layout file is touched even though it does not exists. This commit https://github.com/phoenixframework/phoenix/commit/86dee56b42da5f465c81cae6b0556942069a2165 has fixed that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defp</span> <span class="n">deps</span> <span class="k">do</span>
</span><span class='line'>  <span class="p">[{</span><span class="ss">:phoenix</span><span class="p">,</span> <span class="ss">git</span><span class="p">:</span> <span class="s2">&quot;https://github.com/phoenixframework/phoenix.git&quot;</span><span class="p">,</span> <span class="ss">ref</span><span class="p">:</span> <span class="s2">&quot;8cffae4&quot;</span><span class="p">},</span>
</span><span class='line'>   <span class="p">{</span><span class="ss">:cowboy</span><span class="p">,</span> <span class="s2">&quot;~&gt; 1.0&quot;</span><span class="p">}]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now, install all the depenencies</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mix <span class="k">do</span> deps.get, compile
</span></code></pre></td></tr></table></div></figure>

<p>You will also need to modify the views to work with this phoenix version:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim web/views.ex
</span></code></pre></td></tr></table></div></figure>

<p>and change it to the following</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">PhoenixHeroku.Views</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Phoenix.View</span><span class="p">,</span> <span class="ss">root</span><span class="p">:</span> <span class="s2">&quot;web/templates&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Everything in this block is available runs in this</span>
</span><span class='line'>  <span class="c1"># module and in other views that use MyApp.View</span>
</span><span class='line'>  <span class="n">using</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># Import common functionality</span>
</span><span class='line'>    <span class="kn">import</span> <span class="nc">PhoenixHeroku.I</span><span class="mi">18</span><span class="n">n</span>
</span><span class='line'>    <span class="kn">import</span> <span class="nc">PhoenixHeroku.Router.Helpers</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Use Phoenix.HTML to import all HTML functions (forms, tags, etc)</span>
</span><span class='line'>    <span class="kn">use</span> <span class="nc">Phoenix.HTML</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Common aliases</span>
</span><span class='line'>    <span class="kn">alias</span> <span class="nc">Phoenix.Controller.Flash</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Functions defined here are available to all other views/templates</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>This is a miminal number of steps to setup a phoenix application. Eventually, you will need to add more code to build it up. Moving forward, let&#39;s deploy this application. </p>

<p>Here are the steps to deploy to Heroku server</p>

<h4>Step 1: Run git init</h4>

<p>Pretty straight forward. Just run this command in your application folder</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git init
</span></code></pre></td></tr></table></div></figure>

<h4>Step 2: Create the heroku application</h4>

<p><strong>Note</strong>: You will need to change the heroku application name, which is in this post -  <code>phoenix-heroku-demo</code> to your application name.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>heroku create phoenix-heroku-demo
</span><span class='line'>Creating phoenix-heroku-demo... <span class="k">done</span>, stack is cedar
</span><span class='line'>http://phoenix-heroku-demo.herokuapp.com/ <span class="p">|</span> git@heroku.com:phoenix-heroku-demo.git
</span><span class='line'>Git remote heroku added
</span></code></pre></td></tr></table></div></figure>

<p>After this command, Heroku will provide me a URL for my heroku app. But there is nothing there yet. Also, do note down the name, we will use it later. Mine is <code>phoenix-heroku-demo</code>. Let&#39;s move to next step</p>

<h4>Step 3: Add buildback to your app</h4>

<p>Run a heroku config:set command as following</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>heroku config:set <span class="se">\ </span>
</span><span class='line'><span class="nv">BUILDPACK_URL</span><span class="o">=</span>https://github.com/HashNuke/heroku-buildpack-elixir.git -a phoenix-heroku-demo
</span></code></pre></td></tr></table></div></figure>

<h4>Step 4: Set mix environment config</h4>

<p>You can choose to set mix environment to be staging or production at this step. Here I choose to run my app using production environment:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku config:set <span class="nv">MIX_ENV</span><span class="o">=</span>prod
</span></code></pre></td></tr></table></div></figure>

<p>After this, you will need to modify some of the config file in this Phoenix application. Let&#39;s move to step 5</p>

<h4>Step 5: Edit Procfile</h4>

<p>Create file <code>Procfile</code> inside the root of your application folder with the following content</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>web: yes <span class="p">|</span> mix compile.protocols <span class="o">&amp;&amp;</span> elixir -pa _build/prod/consolidated -S mix phoenix.start
</span></code></pre></td></tr></table></div></figure>

<p>If in step 4, you have specified staging environment, you will need to use the folder <code>_build/staging/consolidated</code> for the <code>-pa</code> option here. </p>

<h4>Step 6: Edit elixir_buildpack.config</h4>

<p>Create file <code>elixir_buildpack.config</code> inside the root of your application folder with the following content. Note that we will need to use Elixir 1.0.1 here as the Phoenix build at the point that I wrote this article requires that.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">erlang_version</span><span class="o">=</span>17.2
</span><span class='line'><span class="nv">elixir_version</span><span class="o">=</span>1.0.1
</span><span class='line'><span class="nv">always_rebuild</span><span class="o">=</span><span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>

<h4>Step 7: Commit everything and push</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git add . <span class="o">&amp;&amp;</span> git commit -am <span class="s2">&quot;initial commit&quot;</span>
</span><span class='line'><span class="nv">$ </span>git push heroku master
</span></code></pre></td></tr></table></div></figure>

<p>It can be quite slow in this first time pushing to heroku master as there is a need to compile all the elixir depenencies on Heroku server, but subsequently it will be quite fast. Now I go to <code>http://phoenix-heroku-demo.herokuapp.com/</code> and hooray the phoenix home page is there</p>

<p><img class="center" src="http://learnelixir.com/images/deploy_app_to_server/heroku.png" width="800" height="509" title="image" alt="images"></p>

<p>In subsequent deploys, you will just need to perform this step - step 7</p>

<p><strong>Tips</strong>: On your terminal, in order to run custom command for your phoenix app, you can trigger <code>heroku run</code>. For instance, if I want to run seed file, I can type the following command from my terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>heroku run mix run seeds.ex
</span></code></pre></td></tr></table></div></figure>

<p>This has concluded for Heroku deploy. Happy Deploying :-) </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spawn Process and Concurrency in Elixir]]></title>
    <link href="http://learnelixir.com/blog/2014/10/14/spawn-process-and-concurrency-in-elixir/"/>
    <updated>2014-10-14T23:36:28+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/14/spawn-process-and-concurrency-in-elixir</id>
    <content type="html"><![CDATA[<p>Concurrency in Elixir can be achieved by using 3 things. They are <strong>spawning process</strong>, <strong>sending messages</strong> and <strong>receiving messages</strong>. Let&#39;s look at how we can spawn a new process in Elixir</p>

<!-- more -->

<h3>Spawning Process</h3>

<p>To spawn a new process in Elixir, we will first need to define a function and call <code>spawn</code>. This function can be an anonymous function or a function defined in a module. </p>

<h4>Spawn process from Anonymous function</h4>

<p>For instance, if we have:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">fun</span> <span class="p">=</span> <span class="k">fn</span> <span class="p">-&gt;</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">end</span>
</span><span class='line'><span class="c1">#Function&lt;20.90072148/0 in :erl_eval.expr/5&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>We can then call spawn on this function </p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">pid</span> <span class="p">=</span> <span class="n">spawn</span><span class="p">(</span><span class="n">fun</span><span class="p">)</span>
</span><span class='line'><span class="c1">#PID&lt;0.56.0&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>spawn</code> function will return you a <code>PID</code> struct with pid number of the spawn process inside. This process is then by killed by itself after finish running.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Process</span><span class="p">.</span><span class="n">alive?</span><span class="p">(</span><span class="n">pid</span><span class="p">)</span>
</span><span class='line'><span class="no">false</span>
</span></code></pre></td></tr></table></div></figure>

<p>Another way to spawn is calling spawn/3 a function defined in <code>defmodule</code>. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">Fib</span> <span class="k">do</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fib</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fib</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">pid</span> <span class="p">=</span> <span class="n">spawn</span><span class="p">(</span><span class="nc">Fib</span><span class="p">,</span> <span class="ss">:fib</span><span class="p">,</span> <span class="p">[</span><span class="mi">10</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>

<p>The first argument is the module name, second argument is function name and the last argument is the list of the arguments. Later we will see how this <code>spawn</code> can be used. Before that, let move on to how to send a message to a process.</p>

<h4>Sending Messages</h4>

<p>We can send a message to a running process in Elixir. The most obvious example is sending a message to the process running your <code>iex</code>. The <code>iex</code> is actually a process itself and when we call <code>self()</code>, it will return the PID number:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">self_pid</span> <span class="p">=</span> <span class="n">self</span><span class="p">()</span>
</span><span class='line'><span class="c1">#PID&lt;0.53.0&gt;</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Process</span><span class="p">.</span><span class="n">alive?</span><span class="p">(</span><span class="n">self_pid</span><span class="p">)</span>
</span><span class='line'><span class="no">true</span>
</span></code></pre></td></tr></table></div></figure>

<p>Since the process is alive, we can send a message to this process by triggering <code>send/2</code> function</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">send</span> <span class="n">self</span><span class="p">(),</span> <span class="p">{</span><span class="ss">:any</span><span class="p">,</span> <span class="s2">&quot;message&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>send</code> takes 2 argument, the first one is the PID of the process that you would like to send the message to and the second argument is the message in a form of a tuple. It can be any tuple.</p>

<h3>Receiving Messages</h3>

<p>Receiving messages in Elixir can be called anywhere after the <code>send</code> command is triggered. When a message is sent to a process, the message is stored in that process <strong>mailbox</strong> and waits there. When <code>receive</code> function is called, that message will then be retrieved.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">send</span> <span class="n">self</span><span class="p">(),</span> <span class="p">{</span><span class="ss">:any</span><span class="p">,</span> <span class="s2">&quot;message&quot;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="ss">:any</span><span class="p">,</span> <span class="s2">&quot;message&quot;</span><span class="p">}</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="k">receive</span> <span class="k">do</span>
</span><span class='line'>       <span class="p">{</span><span class="ss">:any</span><span class="p">,</span> <span class="s2">&quot;message&quot;</span><span class="p">}</span> <span class="p">-&gt;</span> <span class="s2">&quot;We have received a message&quot;</span>
</span><span class='line'>     <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>How these 3 things <strong>spawn processes</strong>, <strong>sending messages</strong> and <strong>receiving messages</strong> can work together? Let&#39;s take a look at the following code to generate a fibonacci number by supplying a sequence number</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">Fib</span> <span class="k">do</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fib</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fib</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>After we defined this module <code>Fib</code>, we can just call:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Fib</span><span class="p">.</span><span class="n">fib</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="mi">55</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now, let make Fib module a bit more interesting by making use of the <strong>spawn processes</strong>, <strong>sending messages</strong> and <strong>receiving messages</strong>. Let define a new module called CFib</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">CFib</span> <span class="k">do</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fib</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fib</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now in <code>fib(n)</code> function definition, instead of just calling the the calculation on <code>n - 1</code> and <code>n - 2</code>, we will make these 2 calculations as 2 processes running concurrently.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">def</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">calculate_fib</span> <span class="p">=</span> <span class="k">fn</span> <span class="n">n</span> <span class="p">-&gt;</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="k">end</span>
</span><span class='line'>  <span class="n">spawn</span><span class="p">(</span><span class="bp">__MODULE__</span><span class="p">,</span> <span class="ss">:fib_at_child</span><span class="p">,</span> <span class="p">[</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">calculate_fib</span><span class="p">,</span> <span class="n">self</span><span class="p">])</span>
</span><span class='line'>  <span class="n">spawn</span><span class="p">(</span><span class="bp">__MODULE__</span><span class="p">,</span> <span class="ss">:fib_at_child</span><span class="p">,</span> <span class="p">[</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="n">calculate_fib</span><span class="p">,</span> <span class="n">self</span><span class="p">])</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">def</span> <span class="n">fib_at_child</span><span class="p">(</span><span class="n">sequence</span><span class="p">,</span> <span class="n">func</span><span class="p">,</span> <span class="n">parent</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">send</span> <span class="n">parent</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span><span class="p">,</span> <span class="n">func</span><span class="p">.(</span><span class="n">sequence</span><span class="p">)]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Inside <code>fib</code> function, we have spawned 2 processes for function <code>fib_at_child</code> with arguments <code>n - 1</code> and <code>n - 2</code> respectively, the anonymous function to calculate fibonacci based on a sequence number and the parent process itself. We have also defined an extra function call <code>fib_at_child</code> which will be used to execute the function on the sequence number and send back the result of the calculation back to the parent process. Take note that the function <code>fib_at_child</code> now is running at the child process instead of the parent process. That is the reason why we will need to use <code>send</code> function to send back the result to parent.</p>

<p>The last step is to receive the result at the original process and add the two results</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">def</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">calculate_fib</span> <span class="p">=</span> <span class="k">fn</span> <span class="n">n</span> <span class="p">-&gt;</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="k">end</span>
</span><span class='line'>  <span class="n">first_pid</span> <span class="p">=</span> <span class="n">spawn</span><span class="p">(</span><span class="bp">__MODULE__</span><span class="p">,</span> <span class="ss">:fib_at_child</span><span class="p">,</span> <span class="p">[</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">calculate_fib</span><span class="p">,</span> <span class="n">self</span><span class="p">])</span>
</span><span class='line'>  <span class="n">second_pid</span> <span class="p">=</span> <span class="n">spawn</span><span class="p">(</span><span class="bp">__MODULE__</span><span class="p">,</span> <span class="ss">:fib_at_child</span><span class="p">,</span> <span class="p">[</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="n">calculate_fib</span><span class="p">,</span> <span class="n">self</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fib_of_n_1</span> <span class="p">=</span> <span class="k">receive</span> <span class="ss">do</span><span class="p">:</span> <span class="p">{</span><span class="o">^</span><span class="n">first_pid</span><span class="p">,</span> <span class="n">value</span><span class="p">}</span> <span class="p">-&gt;</span> <span class="n">value</span>
</span><span class='line'>  <span class="n">fib_of_n_2</span> <span class="p">=</span> <span class="k">receive</span> <span class="ss">do</span><span class="p">:</span> <span class="p">{</span><span class="o">^</span><span class="n">second_pid</span><span class="p">,</span> <span class="n">value</span><span class="p">}</span> <span class="p">-&gt;</span> <span class="n">value</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fib_of_n_1</span> <span class="o">+</span> <span class="n">fib_of_n_2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">def</span> <span class="n">fib_at_child</span><span class="p">(</span><span class="n">sequence</span><span class="p">,</span> <span class="n">func</span><span class="p">,</span> <span class="n">parent</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">send</span> <span class="n">parent</span><span class="p">,</span> <span class="p">{</span><span class="n">self</span><span class="p">,</span> <span class="n">func</span><span class="p">.(</span><span class="n">sequence</span><span class="p">)}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>And here is the complete program of CFib</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">CFib</span> <span class="k">do</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fib</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fib</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">calculate_fib</span> <span class="p">=</span> <span class="k">fn</span> <span class="n">n</span> <span class="p">-&gt;</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="k">end</span>
</span><span class='line'>      <span class="n">first_pid</span> <span class="p">=</span> <span class="n">spawn</span><span class="p">(</span><span class="bp">__MODULE__</span><span class="p">,</span> <span class="ss">:fib_at_child</span><span class="p">,</span> <span class="p">[</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">calculate_fib</span><span class="p">,</span> <span class="n">self</span><span class="p">])</span>
</span><span class='line'>      <span class="n">second_pid</span> <span class="p">=</span> <span class="n">spawn</span><span class="p">(</span><span class="bp">__MODULE__</span><span class="p">,</span> <span class="ss">:fib_at_child</span><span class="p">,</span> <span class="p">[</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="n">calculate_fib</span><span class="p">,</span> <span class="n">self</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">fib_of_n_1</span> <span class="p">=</span> <span class="k">receive</span> <span class="ss">do</span><span class="p">:</span> <span class="p">({</span><span class="o">^</span><span class="n">first_pid</span><span class="p">,</span> <span class="n">value</span><span class="p">}</span> <span class="p">-&gt;</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fib_of_n_2</span> <span class="p">=</span> <span class="k">receive</span> <span class="ss">do</span><span class="p">:</span> <span class="p">({</span><span class="o">^</span><span class="n">second_pid</span><span class="p">,</span> <span class="n">value</span><span class="p">}</span> <span class="p">-&gt;</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">fib_of_n_1</span> <span class="o">+</span> <span class="n">fib_of_n_2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fib_at_child</span><span class="p">(</span><span class="n">sequence</span><span class="p">,</span> <span class="n">func</span><span class="p">,</span> <span class="n">parent</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">send</span> <span class="n">parent</span><span class="p">,</span> <span class="p">{</span><span class="n">self</span><span class="p">,</span> <span class="n">func</span><span class="p">.(</span><span class="n">sequence</span><span class="p">)}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nc">CFib</span><span class="p">.</span><span class="n">fib</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="c1"># 55</span>
</span></code></pre></td></tr></table></div></figure>

<p>That&#39;s all for this article. I hope you enjoyed this. Happy coding :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quote and Unquote in Elixir]]></title>
    <link href="http://learnelixir.com/blog/2014/10/13/quote-and-unquote-in-elixir/"/>
    <updated>2014-10-13T22:35:08+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/13/quote-and-unquote-in-elixir</id>
    <content type="html"><![CDATA[<p>Quote and Unquote function in Elixir can be confusing in the beginning. However, once you know them quite well, they can become very handy. In this article, we will look deeper into Quote and Unquote and see how it can help in doing some meta programming.</p>

<!-- more -->

<h3>Quote</h3>

<p>Quote is a function in Elixir which is used to break an expression into an abstract syntax tree (AST). This AST is an internal presentation an expression in a compiler, which will be then used to evaluate the expression to a value. For instance</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="k">quote</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span>
</span><span class='line'><span class="p">{</span><span class="ss">:+</span><span class="p">,</span> <span class="p">[</span><span class="ss">context</span><span class="p">:</span> <span class="nc">Elixir</span><span class="p">,</span> <span class="ss">import</span><span class="p">:</span> <span class="nc">Kernel</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>

<p>So the expression <code>1 + 2</code> is presented as a tuple of 3 elements in Elixir compiler: </p>

<ul>
<li>A symbol of plus sign (<code>:+</code>) or can be called the function name</li>
<li>A keyword list containing meta data (<code>[context: Elixir, import: Kernel]</code>)</li>
<li>The argument list (<code>[1, 2]</code>)</li>
</ul>

<p>Ignoring the keyword list containing meta data, it can be understood as an abstract syntax tree, where the function name is the root node and the 2 arguments are the leaves of the tree</p>

<p><img class="center" src="http://learnelixir.com/images/quote_and_unquote/ast1.png" width="250" height="250" title="image" alt="images"></p>

<p>If now we try on a more complex expression <code>1 + 2 * 3</code>, it will present a more complex abstract syntax tree</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="k">quote</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="mi">3</span>
</span><span class='line'><span class="p">{</span><span class="ss">:+</span><span class="p">,</span> <span class="p">[</span><span class="ss">context</span><span class="p">:</span> <span class="nc">Elixir</span><span class="p">,</span> <span class="ss">import</span><span class="p">:</span> <span class="nc">Kernel</span><span class="p">],</span>
</span><span class='line'> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="p">{</span><span class="ss">:*</span><span class="p">,</span> <span class="p">[</span><span class="ss">context</span><span class="p">:</span> <span class="nc">Elixir</span><span class="p">,</span> <span class="ss">import</span><span class="p">:</span> <span class="nc">Kernel</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]}]}</span>
</span></code></pre></td></tr></table></div></figure>

<p><img class="center" src="http://learnelixir.com/images/quote_and_unquote/ast2.png" width="325" height="400" title="image" alt="images"></p>

<p>When evaluating this expression, Elixir compiler will travel upward starting from the most left leaf. For example, the AST tree above will be evaluated as <code>(2 * 3) + 1</code>. </p>

<p>In order to evaluate a quoted expression Elixir, we need to use <code>Code.eval_quoted</code> function. For instance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Code</span><span class="p">.</span><span class="n">eval_quoted</span><span class="p">(</span><span class="k">quote</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="mi">7</span><span class="p">,</span> <span class="p">[]}</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>Code.eval_quoted</code> function call returns a tuple of the evaluation value and a map of all variable resulted from the evaluation. 7 in tis case is the value of the evaluation and since there is no variable binding in this case, empty array will be returned.</p>

<p>Quote can be used with function call as well. For instance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="k">quote</span> <span class="ss">do</span><span class="p">:</span> <span class="n">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="ss">:sum</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Quote function is like a function which is used to put an expression between a quote so that it can be used later on. </p>

<p>Next let&#39;s try to define some variables and use those in quote body:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">a</span> <span class="p">=</span> <span class="mi">1</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">b</span> <span class="p">=</span> <span class="mi">2</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Code</span><span class="p">.</span><span class="n">eval_quoted</span><span class="p">(</span><span class="k">quote</span> <span class="ss">do</span><span class="p">:</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="o">**</span> <span class="p">(</span><span class="nc">CompileError</span><span class="p">)</span> <span class="n">nofile</span><span class="err">:</span><span class="mi">1</span><span class="err">:</span> <span class="n">undefined</span> <span class="n">function</span> <span class="n">a</span><span class="o">/</span><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>

<p>The <code>eval_quoted</code> function call will give you an error on undefined function a. This happens because when <code>Code.eval_quoted</code> is called, it does not know any <code>a</code> value, because the a here is not the same variable that we defined outside ealier. In order to refer a variable defined outside quote, unquote function needs to be used</p>

<h3>Unquote</h3>

<p>So here, how it should be written if a variable is referred to outside of the scope of quote:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">a</span> <span class="p">=</span> <span class="mi">1</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">b</span> <span class="p">=</span> <span class="mi">2</span>
</span><span class='line'><span class="n">b</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="k">quote</span> <span class="ss">do</span><span class="p">:</span> <span class="k">unquote</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">+</span> <span class="k">unquote</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="ss">:+</span><span class="p">,</span> <span class="p">[</span><span class="ss">context</span><span class="p">:</span> <span class="nc">Elixir</span><span class="p">,</span> <span class="ss">import</span><span class="p">:</span> <span class="nc">Kernel</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>

<p>As you can see, the value of a and b are now evaluated correctly <strong>before</strong> Elixir construct the abstract syntax tree and these values are actually computed at <strong>compiled time</strong> and not <strong>runtime</strong>.  Now, let say, we define a function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">a</span> <span class="p">=</span> <span class="mi">1</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">b</span> <span class="p">=</span> <span class="mi">2</span>
</span><span class='line'><span class="n">b</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">fun</span> <span class="p">=</span> <span class="k">fn</span> <span class="p">-&gt;</span> <span class="k">quote</span> <span class="k">do</span>
</span><span class='line'>   <span class="k">unquote</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">+</span> <span class="k">unquote</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="p">{</span><span class="ss">:+</span><span class="p">,</span> <span class="p">[</span><span class="ss">context</span><span class="p">:</span> <span class="nc">Elixir</span><span class="p">,</span> <span class="ss">import</span><span class="p">:</span> <span class="nc">Kernel</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now we try to change <code>a</code> value and call the function again to see if the presentation will change with the new <code>a</code> value:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">a</span> <span class="p">=</span> <span class="mi">10</span>
</span><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">fun</span><span class="p">.</span><span class="n">call</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span><span class="ss">:+</span><span class="p">,</span> <span class="p">[</span><span class="ss">context</span><span class="p">:</span> <span class="nc">Elixir</span><span class="p">,</span> <span class="ss">import</span><span class="p">:</span> <span class="nc">Kernel</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>

<p>As you can see, although a&#39;s value is change but the funtioncal representing <code>a + b</code> is still reflecting the original value of a and b. 
The way that we use quote and unquote in Elixir can be very creative and dynamic, for instance, we can define like following to play with the real function definition at runtime.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">num1</span> <span class="p">=</span> <span class="mi">5</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">num2</span> <span class="p">=</span> <span class="mi">2</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">perform</span> <span class="p">=</span> <span class="k">fn</span> <span class="n">fun</span> <span class="p">-&gt;</span> <span class="nc">Code</span><span class="p">.</span><span class="n">eval_quoted</span><span class="p">(</span><span class="k">quote</span> <span class="ss">do</span><span class="p">:</span> <span class="k">unquote</span><span class="p">(</span><span class="n">fun</span><span class="p">)(</span><span class="k">unquote</span><span class="p">(</span><span class="n">num1</span><span class="p">),</span> <span class="k">unquote</span><span class="p">(</span><span class="n">num2</span><span class="p">)))</span> <span class="k">end</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">perform</span><span class="p">.(</span><span class="ss">:rem</span><span class="p">)</span> <span class="c1"># calculate remaining of 5 and 2</span>
</span><span class='line'><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="p">[]}</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">perform</span><span class="p">.(</span><span class="ss">:div</span><span class="p">)</span> <span class="c1"># calculate division result of 5 and 2</span>
</span><span class='line'><span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="p">[]}</span>
</span></code></pre></td></tr></table></div></figure>

<p>That&#39;s all for now. I hope you enjoy this article.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ecto vs Active Record]]></title>
    <link href="http://learnelixir.com/blog/2014/10/11/ecto-vs-active-record/"/>
    <updated>2014-10-11T21:37:22+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/11/ecto-vs-active-record</id>
    <content type="html"><![CDATA[<p>This post is about comparing the feature and performance between Elixir&#39;s Ecto library - database wrapper and languge integrated query for Elixir and Ruby on Rails Active Record.</p>

<!-- more -->

<h3>Round 1: Database Migration</h3>

<h4>Active Record</h4>

<p>In Ruby on Rails Active Record, we can generate a migration for a model by following these steps:</p>

<h5><em>Step 1</em>: Generate model file and migration file</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rails g model book title:string description:text author:string publisher:string
</span></code></pre></td></tr></table></div></figure>

<p>And the content of the migration file is as following</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateBooks</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:books</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:name</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">text</span> <span class="ss">:description</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:author</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:publisher</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<h5><em>Step 2</em>: Create the database</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle <span class="nb">exec </span>rake db:create
</span></code></pre></td></tr></table></div></figure>

<h5><em>Step 3</em>: Run the migration</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake db:migrate
</span></code></pre></td></tr></table></div></figure>

<p>That&#39;s all for Active Record</p>

<h4>Ecto</h4>

<p>Assuming that you have already put in <code>ecto</code> and <code>postgrex</code> dependencies and already run <code>mix deps.get</code>, here are the steps:</p>

<h5><em>Step 1</em>: Create Repo file by manually adding web/models/repo.ex file witht the following content</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">BookStoreElixir.Repo</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Ecto.Repo</span><span class="p">,</span> <span class="ss">adapter</span><span class="p">:</span> <span class="nc">Ecto.Adapters.Postgres</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">conf</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">parse_url</span> <span class="s2">&quot;ecto://postgresuser:password@localhost/book_store_elixir&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">priv</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">app_dir</span><span class="p">(</span><span class="ss">:book_store_elixir</span><span class="p">,</span> <span class="s2">&quot;priv/repo&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<h5><em>Step 2</em>: Create the Postgres Database</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>createdb book_store_elixir --encoding<span class="o">=</span><span class="s1">&#39;utf-8&#39;</span> --locale<span class="o">=</span>en_US.UTF-8 --template<span class="o">=</span>template0
</span></code></pre></td></tr></table></div></figure>

<h5><em>Step 3</em>: Create model file <code>web/models/book.ex</code> with the following code:</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">BookStoreElixir.Book</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Ecto.Model</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">schema</span> <span class="s2">&quot;books&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">field</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>    <span class="n">field</span> <span class="ss">:description</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>    <span class="n">field</span> <span class="ss">:author</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>    <span class="n">field</span> <span class="ss">:publisher</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<h5><em>Step 4</em>: Generate a migration file from terminal</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix ecto.gen.migration BookStoreElixir.Repo create_book
</span></code></pre></td></tr></table></div></figure>

<h5><em>Step 5</em>: Edit the newly generated migration file</h5>

<p>There is a need a type the SQL to create the table here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim priv/repo/migrations/20141011143244_create_book.exs
</span></code></pre></td></tr></table></div></figure>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">BookStoreElixir.Repo.Migrations.CreateBook</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Ecto.Migration</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">up</span> <span class="k">do</span>
</span><span class='line'>    <span class="s2">&quot;CREATE TABLE books(id serial primary key, title varchar(125), </span>
</span><span class='line'><span class="s2">                  description text, author varchar(255), publisher varchar(255))&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">down</span> <span class="k">do</span>
</span><span class='line'>    <span class="s2">&quot;DROP TABLE books&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<h5><em>Step 6</em>: Run the migration file</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix ecto.migrate BookStoreElixir.Repo
</span></code></pre></td></tr></table></div></figure>

<h5><em>Step 7</em>: Add <code>BookStoreElixir.Repo</code> as a worker in line 11 of <code>lib/book_store_elixir.ex</code></h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">BookStoreElixir</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Application</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># See http://elixir-lang.org/docs/stable/elixir/Application.html</span>
</span><span class='line'>  <span class="c1"># for more information on OTP Applications</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">start</span><span class="p">(</span><span class="n">_type</span><span class="p">,</span> <span class="n">_args</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="kn">import</span> <span class="nc">Supervisor.Spec</span><span class="p">,</span> <span class="ss">warn</span><span class="p">:</span> <span class="no">false</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">children</span> <span class="p">=</span> <span class="p">[</span>
</span><span class='line'>      <span class="c1"># Define workers and child supervisors to be supervised</span>
</span><span class='line'>      <span class="n">worker</span><span class="p">(</span><span class="nc">BookStoreElixir.Repo</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">opts</span> <span class="p">=</span> <span class="p">[</span><span class="ss">strategy</span><span class="p">:</span> <span class="ss">:one_for_one</span><span class="p">,</span> <span class="ss">name</span><span class="p">:</span> <span class="nc">BookStoreElixir.Supervisor</span><span class="p">]</span>
</span><span class='line'>    <span class="nc">Supervisor</span><span class="p">.</span><span class="n">start_link</span><span class="p">(</span><span class="n">children</span><span class="p">,</span> <span class="n">opts</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<h5>Conclusion for Database Migration:</h5>

<p>Active Record wins as there are fewer number of steps (3 steps in Active Record vs 7 steps in Ecto). Ecto will need to have more mix tasks in order to be more on par with Active Record.</p>

<h3>Round 2: Database CRUD (Create, Read, Update, Delete) operations Syntax</h3>

<h4>1 - Create</h4>

<h5>Active Record</h5>

<p>To create a new record in Active Record, we will use <code>create</code> command on <code>Book</code> model 
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="no">Book</span><span class="o">.</span><span class="n">create</span><span class="p">({</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Ruby 1.9 &amp; 2.0&quot;</span><span class="p">,</span> <span class="p">&lt;/span&gt;
</span><span class='line'>          <span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas, with Chad Fowler and Andy Hunt&quot;</span><span class="p">,</span> <span class="p">&lt;/span&gt;
</span><span class='line'>          <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bokshelf&quot;</span><span class="p">,</span> <span class="p">&lt;/span&gt;
</span><span class='line'>          <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Ruby is the fastest growing and most exciting dynamic language out there. &lt;/span&gt;
</span><span class='line'><span class="s2">                        If you need to get working programs delivered fast, &lt;/span&gt;
</span><span class='line'><span class="s2">                        you should add Ruby to your toolbox.&quot;</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></p>

<h5>Ecto</h5>

<p>To create a new record in Ecto, we will use <code>insert</code> command on Book <code>Repo</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Repo</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Book</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">BookStoreElixir.Repo</span><span class="p">.</span><span class="n">insert</span><span class="p">({</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Ruby 1.9 &amp; 2.0&quot;</span><span class="p">,</span> <span class="err">\</span>
</span><span class='line'>          <span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas, with Chad Fowler and Andy Hunt&quot;</span><span class="p">,</span> <span class="err">\</span>
</span><span class='line'>          <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bokshelf&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Ruby is the fastest growing and most exciting dynamic language out there. </span><span class="err">\</span><span class="s2"></span>
</span><span class='line'><span class="s2">                        If you need to get working programs delivered fast, </span><span class="err">\</span><span class="s2"></span>
</span><span class='line'><span class="s2">                        you should add Ruby to your toolbox.&quot;</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>

<p>Syntax wise, they are quite similar. Although Active Record code seems to be a bit neater but it can be considered a draw for creation syntax.</p>

<h4>2 - Read</h4>

<h5>Active Record</h5>

<p>In Active Record, you can perform quite an entensive list of queries by using <code>where</code>, <code>order</code>, <code>limit</code>, <code>offset</code>, <code>group</code>, <code>join</code>, <code>having</code>, <code>select</code>, <code>pluck</code>, <code>includes</code>. For instance</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="no">Book</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;title LIKE ?&quot;</span><span class="p">,</span> <span class="s2">&quot;%Programming%&quot;</span><span class="p">)</span> <span class="p">\</span>
</span><span class='line'>         <span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="ss">:desc</span><span class="p">)</span> <span class="p">\</span>
</span><span class='line'>         <span class="o">.</span><span class="n">limit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">\</span>
</span><span class='line'>         <span class="o">.</span><span class="n">offset</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">\</span>
</span><span class='line'>         <span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="s2">&quot;id&quot;</span><span class="p">)</span> <span class="p">\</span>
</span><span class='line'>         <span class="o">.</span><span class="n">having</span><span class="p">(</span><span class="s2">&quot;books.id &gt;= 1&quot;</span><span class="p">)</span> <span class="p">\</span>
</span><span class='line'>         <span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span> <span class="p">\</span>
</span><span class='line'>         <span class="o">.</span><span class="n">pluck</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>Pretty amazing that Active Record can do chaining in combine into 1 single query. </p>

<h5>Ecto</h5>

<p>There are 2 types of writing Query in Ecto</p>

<ul>
<li><em>First Way</em>: Using query syntax provide by Ecto</li>
</ul>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Book</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Repo</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">import</span> <span class="nc">Ecto.Query</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">from</span> <span class="n">book</span> <span class="ow">in</span> <span class="nc">BookStoreElixir.Book</span><span class="p">,</span> <span class="ss">select</span><span class="p">:</span> <span class="n">book</span><span class="p">.</span><span class="n">id</span><span class="p">,</span> <span class="err">\</span>
</span><span class='line'>                                        <span class="ss">where</span><span class="p">:</span> <span class="n">like</span><span class="p">(</span><span class="n">book</span><span class="p">.</span><span class="n">title</span><span class="p">,</span> <span class="s2">&quot;%Programming%&quot;</span><span class="p">),</span> <span class="err">\</span>
</span><span class='line'>                                        <span class="ss">order_by</span><span class="p">:</span> <span class="p">[</span><span class="ss">desc</span><span class="p">:</span> <span class="n">book</span><span class="p">.</span><span class="n">id</span><span class="p">],</span> <span class="err">\</span>
</span><span class='line'>                                        <span class="ss">limit</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="err">\</span>
</span><span class='line'>                                        <span class="ss">offset</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="err">\</span>
</span><span class='line'>                                        <span class="ss">group_by</span><span class="p">:</span> <span class="n">book</span><span class="p">.</span><span class="n">id</span><span class="p">,</span> <span class="err">\</span>
</span><span class='line'>                                        <span class="ss">having</span><span class="p">:</span> <span class="n">book</span><span class="p">.</span><span class="n">id</span> <span class="o">&gt;=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<ul>
<li><em>Second Way</em>: Using chaining by utilising Elixir Pipe will make query just like Active Record:</li>
</ul>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Book</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Repo</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">import</span> <span class="nc">Ecto.Query</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">query</span> <span class="p">=</span> <span class="nc">Book</span> <span class="o">|&gt;</span> <span class="n">select</span><span class="p">([</span><span class="n">book</span><span class="p">],</span> <span class="n">book</span><span class="p">.</span><span class="n">id</span><span class="p">)</span> <span class="err">\</span>
</span><span class='line'>                  <span class="o">|&gt;</span> <span class="n">where</span><span class="p">([</span><span class="n">book</span><span class="p">],</span> <span class="n">like</span><span class="p">(</span><span class="n">book</span><span class="p">.</span><span class="n">title</span><span class="p">,</span> <span class="s2">&quot;%Programming%&quot;</span><span class="p">))</span> <span class="err">\</span>
</span><span class='line'>                  <span class="o">|&gt;</span> <span class="n">order_by</span><span class="p">([</span><span class="n">book</span><span class="p">],</span> <span class="ss">desc</span><span class="p">:</span> <span class="n">book</span><span class="p">.</span><span class="n">id</span><span class="p">)</span> <span class="err">\</span>
</span><span class='line'>                  <span class="o">|&gt;</span> <span class="n">limit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="err">\</span>
</span><span class='line'>                  <span class="o">|&gt;</span> <span class="n">offset</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="err">\</span>
</span><span class='line'>                  <span class="o">|&gt;</span> <span class="n">group_by</span><span class="p">([</span><span class="n">book</span><span class="p">],</span> <span class="n">book</span><span class="p">.</span><span class="n">id</span><span class="p">)</span> <span class="err">\</span>
</span><span class='line'>                  <span class="o">|&gt;</span> <span class="n">having</span><span class="p">([</span><span class="n">book</span><span class="p">],</span> <span class="n">book</span><span class="p">.</span><span class="n">id</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>Syntax wise, both Ecto and Active Record have shown that they are quite expressive in showing the data transformation through a series of query functions. However, Active Record syntax is still considered better in this Round as it is showing an easier approach. Although, the second way of query that we use for Elixir Ecto is pretty closed to Active Record syntax, it still exhibits a more wordy syntax than Active Record. Albeit, Elixir Ecto is using a nice approach by letting programmer to have access to a &quot;so called&quot; object instance in the query - <code>having[book, book.id &gt;= 1)</code> vs <code>&quot;having(&quot;books.id &gt;= 1&quot;)</code></p>

<h4>3 - Update</h4>

<h4>Active Record</h4>

<p>To update a record, we will use <code>update_attributes</code> on <code>Book</code> instance </p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">book</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">book</span><span class="o">.</span><span class="n">update_attributes</span><span class="p">({</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Ruby9 &amp;ss 2.0 (4th edition)&quot;</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>

<h4>Ecto</h4>

<p>To update a record, we will use `<code>update</code> on <code>BookStoreElixir.Repo</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Book</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Repo</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">book</span> <span class="p">=</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">one</span><span class="p">(</span><span class="nc">Book</span><span class="p">)</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">update</span><span class="p">(%{</span><span class="n">book</span> <span class="p">|</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Ruby9 &amp;ss 2.0 (4th edition)&quot;</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>

<p>Both Ecto and Active Record have exhibited almost the same level of code when updating a record. Hence, it is a draw.</p>

<h4>4 - Delete</h4>

<h4>Active Record</h4>

<p>To delete a record, we will use <code>destroy</code> on a <code>Book</code> instance</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">book</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">book</span><span class="o">.</span><span class="n">destroy</span>
</span></code></pre></td></tr></table></div></figure>

<h4>Ecto</h4>

<p>To delete a record, we will use <code>delete</code> on <code>BookStoreElixir.repo</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Book</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Repo</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">book</span> <span class="p">=</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">one</span><span class="p">(</span><span class="nc">Book</span><span class="p">)</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="n">book</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>Both Ecto and Active Record have exhibited almost the same level of code when delete a record. Hence, it is a draw.</p>

<p>So for this Round 2, Active Record is the <strong>winner</strong> (1 vs 0).</p>

<h3>Round 3: Speed of Creation</h3>

<p>Note that this is tested on my local machine. The result here is just for your reference, and should not be treated as an official benchmark.
I am using Ruby 2.1.2, running on Rails 4.1.4 and Elixir 1.0.0. Both Rails and Elixir application are running with Postgres 9.3.5. For Rails, environment in Rails 4.1.4 has been preloaded with Spring, hence there is a not a need for system to spend time to load the Rails environment. Further more, the Rails code was run with the log mode the same as on production - i.e. no query log was printed out.</p>

<h4>Active Record</h4>

<p>Here is the code inside <code>db/seeds.rb</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># first round 100, second round 10,000, third round 1,000,000</span>
</span><span class='line'><span class="n">number_of_records</span> <span class="o">=</span> <span class="mi">100</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">.</span><span class="n">.number_of_records</span>
</span><span class='line'>  <span class="no">Book</span><span class="o">.</span><span class="n">create</span><span class="p">({</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Book Title </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="p">\</span>
</span><span class='line'>               <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Description </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="p">\</span>
</span><span class='line'>               <span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Author </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="p">\</span>
</span><span class='line'>               <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;Publisher </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here is how I run it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">time </span>bundle <span class="nb">exec </span>rake db:seed
</span></code></pre></td></tr></table></div></figure>

<p>Here are the results of 3 running rounds (with creating 100, 10,000 records and 1 million records). Each time database drop, creation and migration were performed before hand.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>real0m1.706s
</span><span class='line'>user0m1.401s
</span><span class='line'>sys0m0.229s
</span><span class='line'>
</span><span class='line'>real  0m12.328s
</span><span class='line'>user  0m7.820s
</span><span class='line'>sys 0m1.041s
</span><span class='line'>
</span><span class='line'>real  17m52.272s
</span><span class='line'>user  10m41.534s
</span><span class='line'>sys 1m20.044s
</span></code></pre></td></tr></table></div></figure>

<p>Active Record took <strong>1.706 seconds</strong>,  <strong>12.328 seconds</strong> and a whooping <strong>17 minutes 52.272 seconds</strong> to complete 100, 10,000 and 1 million record creation run.</p>

<h4>Ecto</h4>

<p>I create a file seeds.ex inside the elixir project folder with the following content</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kn">alias</span> <span class="nc">BookStoreElixir.Book</span>
</span><span class='line'><span class="kn">alias</span> <span class="nc">BookStoreElixir.Repo</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># First round 100, second round 10,000, third round 1,000,000</span>
</span><span class='line'><span class="n">number_of_records</span> <span class="p">=</span> <span class="mi">100</span>
</span><span class='line'><span class="n">range</span> <span class="p">=</span> <span class="mi">1</span><span class="p">..</span><span class="mi">100</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="p">&lt;-</span> <span class="n">range</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">book</span> <span class="p">=</span> <span class="p">%</span><span class="nc">Book</span><span class="p">{</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Book Title </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="err">\</span>
</span><span class='line'>               <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Description </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="err">\</span>
</span><span class='line'>               <span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Author </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="err">\</span>
</span><span class='line'>               <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;Publisher </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="nc">Repo</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">book</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then run this seeds</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">time </span>mix run seeds.ex
</span></code></pre></td></tr></table></div></figure>

<p>And here is the reusult of 3 runs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>real  0m0.624s
</span><span class='line'>user  0m0.513s
</span><span class='line'>sys 0m0.187s
</span><span class='line'>
</span><span class='line'>real  0m5.109s
</span><span class='line'>user  0m2.459s
</span><span class='line'>sys 0m1.002s
</span><span class='line'>
</span><span class='line'>real  6m15.161s
</span><span class='line'>user  3m19.126s
</span><span class='line'>sys 2m53.117s
</span></code></pre></td></tr></table></div></figure>

<p>Ecto took merely <strong>0.624 seconds</strong>, <strong>5.109 seconds</strong> and <strong>6 minutes 15.161 seconds</strong> to complete the same 3 runs of creation 100, 10,000 and 1 million records. </p>

<p>Here is the chart that shows the performance of Ecto vs Active Record through 3 runs:</p>

<p><img class="center" src="http://learnelixir.com/images/ecto_vs_active_record/creation_chart.png" width="710" height="467" title="image" alt="images"></p>

<p>Ecto is approximately <strong>62%</strong> faster than Active Record. Hence, Ecto is the winner in this round.</p>

<h4>Round 4: Speed of Updating</h4>

<p>We will now run updating on 100, 10,000 and 1 million records in each database each. We will update the records, one by one to have a new book title. As usual, let&#39;s start with Active Record first</p>

<h5>Active Record</h5>

<p>Now in my <code>db/seeds.rb</code> file, I will change it like following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Book</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">book</span><span class="o">|</span>
</span><span class='line'>  <span class="n">book</span><span class="o">.</span><span class="n">update_attributes</span><span class="p">({</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;New Book Title </span><span class="si">#{</span><span class="n">book</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>And run this file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">time </span>bundle <span class="nb">exec </span>rake db:seed
</span></code></pre></td></tr></table></div></figure>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>real  0m1.725s
</span><span class='line'>user  0m1.423s
</span><span class='line'>sys 0m0.243s
</span><span class='line'>
</span><span class='line'>real  0m12.414s
</span><span class='line'>user  0m6.936s
</span><span class='line'>sys 0m1.109s
</span><span class='line'>
</span><span class='line'>real  23m30.364s
</span><span class='line'>user  15m22.126s
</span><span class='line'>sys 1m26.698s
</span></code></pre></td></tr></table></div></figure>

<p>Active Record took <strong>1.725 seconds</strong>, <strong>12.414 seconds</strong> and <strong>23 minutes, 30.364 seconds</strong> to update all 100, 10,000 and 1 million records respectively.</p>

<h5>Ecto</h5>

<p>We will change the <code>seeds.ex</code> file to following</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kn">alias</span> <span class="nc">BookStoreElixir.Book</span>
</span><span class='line'><span class="kn">alias</span> <span class="nc">BookStoreElixir.Repo</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># range = 1..10000</span>
</span><span class='line'><span class="c1"># for i &lt;- range do</span>
</span><span class='line'><span class="c1">#  book = %Book{title: &quot;Book Title #{i}&quot;, \</span>
</span><span class='line'>                <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Description </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="err">\</span>
</span><span class='line'>                <span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Author </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="err">\</span>
</span><span class='line'>                <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;Publisher </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}</span>
</span><span class='line'><span class="c1">#  Repo.insert(book)</span>
</span><span class='line'><span class="c1"># end</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">book</span> <span class="p">&lt;-</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="nc">Book</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">book</span> <span class="p">=</span> <span class="p">%{</span><span class="n">book</span> <span class="p">|</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;New Book Title </span><span class="si">#{</span><span class="n">book</span><span class="p">.</span><span class="n">id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="nc">Repo</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">book</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Before you can run this file, you will need to do a bit modification on <code>postgrex</code> library as this library is throwing a time out if a query spends more than 5 seconds to complete. <code>Repo.all(Book)</code> will definitely take up more than 5 seconds to load up the entire collection of books into the memory</p>

<p>From the project folder, what I did was edit file <code>deps/ecto/lib/ecto/adapters/postgres.ex</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim deps/ecto/lib/ecto/adapters/postgres.ex
</span></code></pre></td></tr></table></div></figure>

<p>Then search for <code>@timeout 5000</code> and replace by <code>@timeout :infinity</code></p>

<p>Now you can run and time the running time of this file</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">time </span>mix run seeds.ex
</span></code></pre></td></tr></table></div></figure>

<p>Here are the result of 3 runs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>real  0m0.606s
</span><span class='line'>user  0m0.509s
</span><span class='line'>sys 0m0.184s
</span><span class='line'>
</span><span class='line'>real  0m5.495s
</span><span class='line'>user  0m2.515s
</span><span class='line'>sys 0m1.071s
</span><span class='line'>
</span><span class='line'>real  7m12.016s
</span><span class='line'>user  3m49.446s
</span><span class='line'>sys 3m7.004s
</span></code></pre></td></tr></table></div></figure>

<p>Ecto took merely <strong>0.606 seconds</strong>, <strong>5.495 seconds</strong> and <strong>7 minutes, 12 seconds</strong> to update 100, 10,000 records and 1 million records respectively. Apparently, Ecto is the winner.</p>

<p>Here is the chart showing the above elapsed time:</p>

<p><img class="center" src="http://learnelixir.com/images/ecto_vs_active_record/update_chart.png" width="633" height="444" title="image" alt="images"></p>

<h3>Conclusion</h3>

<p>With the fact that Active Record and Ecto each has 2 wons, it is concluded to be a draw between Active Record and Ecto. Ecto seems to be very promising library, which provides a very interesting way to write a database query. The steps to setup and the syntax of Ecto will definitely improve in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Experience Pipe Operator in Elixir]]></title>
    <link href="http://learnelixir.com/blog/2014/10/10/experience-pipe-operator-in-elixir/"/>
    <updated>2014-10-10T21:09:55+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/10/experience-pipe-operator-in-elixir</id>
    <content type="html"><![CDATA[<p>Pipe operator in Elixir is new to me. When I first saw it, I thought it was weird. However, after I read some Elixir code and experience myself, it is quite an interesting thing to use. Here&#39;s why:</p>

<!--more-->

<p>Let start with the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">FunWithNumber</span> <span class="k">do</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">increase</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">double</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="n">n</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now, in a common lanugage like Java or Ruby, in order to increase a number and then double it, here is what I will need to write in Elixir:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="nc">ExUnit</span><span class="p">.</span><span class="n">start</span>
</span><span class='line'><span class="kd">defmodule</span> <span class="nc">TestFunWithNumber</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">ExUnit.Case</span>
</span><span class='line'>  <span class="kn">import</span> <span class="nc">FunWithNumber</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">test</span> <span class="s2">&quot;evaluates to 4 if I increase 1 by 1 and double the result&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">assert</span> <span class="n">double</span><span class="p">(</span><span class="n">increase</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span> <span class="o">==</span> <span class="mi">4</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Whereas, using Elixir pipe operator <code>|&gt;</code>, I can write like following and the test should still pass</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">test</span> <span class="s2">&quot;evaluates to 4 if I increase 1 by 1 and double the result using Pipe&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">assert</span> <span class="mi">1</span> <span class="o">|&gt;</span> <span class="n">increase</span> <span class="o">|&gt;</span> <span class="n">double</span> <span class="o">==</span> <span class="mi">4</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Something to take note here is that I am using number <code>1</code> to pipe its value to function <code>increase</code> and then pipe the result returning from increase to <code>double</code> function. It is quite amazing to read the code in this way instead of the original way whereby I have to read code from inside out. With pipe operator, it is a sequence of operations, which the <strong>linput</strong> of previous operation will be <strong>output</strong> of the next operation and so on. It is truly a way to <strong>transform data</strong> via multiple step functions.</p>

<p>You will notice that I do not need to supply any argument to <code>sequence</code> or <code>double</code> function call. It will auto bind all the arguments by itself.</p>

<p>Here is another example, that I pipe a list into two functions</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">ListUtils</span> <span class="k">do</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">select</span><span class="p">([],</span> <span class="n">_guard</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="p">[]</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">select</span><span class="p">([</span><span class="n">head</span> <span class="p">|</span> <span class="n">tail</span><span class="p">],</span> <span class="n">check</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">check</span><span class="p">.(</span><span class="n">head</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="p">[</span><span class="n">head</span> <span class="p">|</span> <span class="n">select</span><span class="p">(</span><span class="n">tail</span><span class="p">,</span> <span class="n">check</span><span class="p">)]</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">select</span><span class="p">(</span><span class="n">tail</span><span class="p">,</span> <span class="n">check</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nc">ExUnit</span><span class="p">.</span><span class="n">start</span>
</span><span class='line'>
</span><span class='line'><span class="kd">defmodule</span> <span class="nc">TestPipeDemo</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">ExUnit.Case</span>
</span><span class='line'>  <span class="kn">import</span> <span class="nc">ListUtils</span>
</span><span class='line'>  <span class="n">test</span> <span class="s2">&quot;Select number divisible by 3 on a sequence&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">list</span> <span class="p">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</span><span class='line'>    <span class="n">is_odd</span> <span class="p">=</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">rem</span><span class="p">(</span><span class="ni">&amp;1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">is_divided_by_3</span> <span class="p">=</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">rem</span><span class="p">(</span><span class="ni">&amp;1</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="p">=</span> <span class="n">list</span> <span class="o">|&gt;</span> <span class="n">select</span><span class="p">(</span><span class="n">is_odd</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">select</span><span class="p">(</span><span class="n">is_divided_by_3</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert</span> <span class="n">result</span> <span class="o">==</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>If you look at line 21, the list was used to send itself to the first <code>select</code> function then to the second <code>select</code> function. </p>

<p>That&#39;s all for this article. We will cover more advanced topic on Pipe on upcoming articles :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anonymous Function in Elixir]]></title>
    <link href="http://learnelixir.com/blog/2014/10/09/anonymous-function-in-elixir/"/>
    <updated>2014-10-09T08:05:11+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/09/anonymous-function-in-elixir</id>
    <content type="html"><![CDATA[<p>This is one of my favorite topic when talking about anonymous function. The reason why is that anonymous function in Elixir is a very simple way to express something without having to turn on a text editor. I can specify an anonymous function right away in an Elixir console and test it straight away. Here&#39;s how:</p>

<!-- more -->

<p>From your elixir terminal, you can quickly define an anonymous function like below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">itself</span> <span class="p">=</span> <span class="k">fn</span> <span class="n">n</span> <span class="p">-&gt;</span> <span class="n">n</span> <span class="k">end</span>
</span><span class='line'><span class="c1">#Function&lt;6.90072148/1 in :erl_eval.expr/5&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Anonymous function starts with <code>fn</code> keyword, following by a list of arguments, then the symbol <code>-&gt;</code>, then the expression and ends with an <code>end</code> keyword. You can define an anonymous function with many arguments like below</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">sum</span> <span class="p">=</span> <span class="k">fn</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="p">-&gt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="k">end</span>
</span><span class='line'><span class="c1">#Function&lt;12.90072148/2 in :erl_eval.expr/5&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now, in order to call this anonymous function, you will need to use the <code>dot</code> notation. This is a bit different from calling a function defined in <code>defmodule</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">sum</span> <span class="p">=</span> <span class="k">fn</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="p">-&gt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="k">end</span>
</span><span class='line'><span class="c1">#Function&lt;12.90072148/2 in :erl_eval.expr/5&gt;</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">sum</span><span class="p">.(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="mi">15</span>
</span></code></pre></td></tr></table></div></figure>

<p>Some body like me will feel a bit ackward in the beginning when we need to use <code>dot</code> notation to call an anonymous function. However, it is true that this <code>dot</code> notation is used to differentiate between calling a function without any arguments and using a variable.  For instance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">my_self</span> <span class="p">=</span> <span class="k">fn</span> <span class="p">-&gt;</span> <span class="mi">5</span> <span class="k">end</span>
</span><span class='line'><span class="c1">#Function&lt;6.90072148/1 in :erl_eval.expr/5&gt;</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">other_self</span> <span class="p">=</span> <span class="mi">5</span>
</span><span class='line'><span class="mi">5</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">my_self</span><span class="p">.()</span> <span class="c1"># I am calling an anonymous function</span>
</span><span class='line'><span class="mi">5</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">other_self</span> <span class="c1"># I am using a variable</span>
</span><span class='line'><span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>

<p>Like Javascript, function in Elixir is first class citizen. Specifically, this means the language supports passing functions as arguments to other functions, returning them as the values from other functions, and assigning them to variables or storing them in data structures. </p>

<p>So let&#39;s see how we can pass a function as an argument to another function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">ListUtils</span> <span class="k">do</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">select</span><span class="p">([],</span> <span class="n">_check</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="p">[]</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">select</span><span class="p">([</span><span class="n">head</span> <span class="p">|</span> <span class="n">tail</span><span class="p">],</span> <span class="n">check</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">check</span><span class="p">.(</span><span class="n">head</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="p">[</span><span class="n">head</span> <span class="p">|</span> <span class="n">select</span><span class="p">(</span><span class="n">tail</span><span class="p">,</span> <span class="n">check</span><span class="p">)]</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">select</span><span class="p">(</span><span class="n">tail</span><span class="p">,</span> <span class="n">check</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">is_odd</span> <span class="p">=</span> <span class="k">fn</span> <span class="n">n</span> <span class="p">-&gt;</span> <span class="n">rem</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">end</span>
</span><span class='line'><span class="nc">ListUtils</span><span class="p">.</span><span class="n">select</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="n">is_odd</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<ul>
<li>Here is we define a <code>ListUtils</code> module which contains <code>select</code> function to filter based on the argument <code>check</code> function. </li>
<li>On line 12, we define an anonymous function and assign that function to variable <code>is_odd</code>.</li>
<li>On line 13, we pass the <code>is_odd</code> variable (now is bound to the anonymous) as an argument to <code>select</code> function.</li>
<li>You can expect the result returning from the <code>select</code> function call is <code>[1, 3]</code></li>
</ul>

<p>So this is how an anonymous function can be assigned to a variable and passed to another function. In addition, we can directly supply the anonymous function into the function call without first assigning to a variable like below and it still works!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="nc">ListUtils</span><span class="p">.</span><span class="n">select</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="k">fn</span> <span class="n">n</span> <span class="p">-&gt;</span> <span class="n">rem</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">end</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>Further more, in Elixir, there is a short hand syntax that can convert the line above into following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="nc">ListUtils</span><span class="p">.</span><span class="n">select</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">rem</span><span class="p">(</span><span class="ni">&amp;1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>

<p>We have transformed the anonymous function from <code>fn n -&gt; rem(n, 2) == 1 end</code> to <code>&amp;(rem(&amp;1, 2) == 1)</code>. In the later case, <code>&amp;1</code> is actually <code>n</code> variable in first case. I usually do not recommend to use this for multiple argument function as it might confuse the reader
. However, it is still readable and understandable for just 1 argument. Anyway, for your information, multiple argument function can be rewritten as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">sum</span> <span class="p">=</span> <span class="k">fn</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="p">-&gt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="k">end</span>
</span><span class='line'><span class="c1"># is equivalent to </span>
</span><span class='line'><span class="n">sum</span> <span class="p">=</span> <span class="o">&amp;</span><span class="p">(</span><span class="ni">&amp;1</span> <span class="o">+</span> <span class="ni">&amp;2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>That&#39;s all for this article. I hope you enjoy this article if you reach this far. Please leave some comments if you have any questions or recommendations :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing With Model in Elixir Phoenix Console]]></title>
    <link href="http://learnelixir.com/blog/2014/10/08/playing-with-model-in-elixir-phoenix-console/"/>
    <updated>2014-10-08T07:20:21+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/08/playing-with-model-in-elixir-phoenix-console</id>
    <content type="html"><![CDATA[<p>You will need to have the source code of this article http://learnelixir.com/blog/2014/10/04/build-web-app-with-elixir/ before being able to follow this article. So basically, after you finish that article, you will have a model Book. Let turn on elixir console to play around with this model. To turn on elixir console with phoenix, type the following command</p>

<!-- more -->

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>iex -S mix
</span></code></pre></td></tr></table></div></figure>

<p>Now you are inside elixir console mode, let&#39;s start with retrieve our first book</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">BookStore.Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nc">BookStore.Books</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: Functional |&gt; Concurrent |&gt; Pragmatic |&gt; Fun&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>As you can see, we can use <code>BookStore.Repo</code> to retrieve a book. Here is the review of <code>BookStore.Repo</code> code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">BookStore.Repo</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Ecto.Repo</span><span class="p">,</span> <span class="ss">adapter</span><span class="p">:</span> <span class="nc">Ecto.Adapters.Postgres</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">conf</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">parse_url</span> <span class="s2">&quot;ecto://postgresuser:password@localhost/book_store&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">priv</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">app_dir</span><span class="p">(</span><span class="ss">:book_store</span><span class="p">,</span> <span class="s2">&quot;priv/repo&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>From the elixir console, we also can retrieve all books just like what we did in the controller</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">BookStore.Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="nc">BookStore.Books</span><span class="p">)</span>
</span><span class='line'><span class="p">[%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: Functional |&gt; Concurrent |&gt; Pragmatic |&gt; Fun&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir&quot;</span><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure>

<p>As you can see, this time round, it returns you an array of Books. Up to this point, I feel a bit annoying every time I need to type <code>BookStore.Books</code>, <code>BookStore.Repo</code>, then I find out that <code>alias</code> in Elixir can help to shorten this syntax by just calling <code>Books</code> and <code>Repo</code>. So now, what you need to do is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStore.Repo</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="nc">Repo</span>
</span><span class='line'><span class="no">nil</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStore.Books</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="nc">Books</span>
</span></code></pre></td></tr></table></div></figure>

<p>By default <code>alias</code>, if you call <code>alias</code> without supplying <code>as</code>, it will automatically set the alias to the last part of the module name. Hence in this case, you can just simply call</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStore.Repo</span>
</span><span class='line'><span class="no">nil</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStore.Books</span>
</span><span class='line'><span class="no">nil</span>
</span></code></pre></td></tr></table></div></figure>

<p>So now, it will be much pleasure to write the command in the console</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="nc">Books</span><span class="p">)</span>
</span><span class='line'><span class="p">[%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: Functional |&gt; Concurrent |&gt; Pragmatic |&gt; Fun&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir&quot;</span><span class="p">}]</span>
</span><span class='line'>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nc">Books</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: Functional |&gt; Concurrent |&gt; Pragmatic |&gt; Fun&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Next, you can assign a book from the database call inside the console:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">book</span> <span class="p">=</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">books</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: Functional |&gt; Concurrent |&gt; Pragmatic |&gt; Fun&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">book</span><span class="p">.</span><span class="n">author</span>
</span><span class='line'><span class="s2">&quot;Dave Thomas&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">book</span><span class="p">.</span><span class="n">description</span>
</span><span class='line'><span class="s2">&quot;Programming Elixir: Functional |&gt; Concurrent |&gt; Pragmatic |&gt; Fun&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>To update this book, you will need to reassign the book with itself plus the updated properties and let <code>Repo</code> handle the update by calling <code>update</code> function on Repor</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span>  <span class="n">book</span> <span class="p">=</span> <span class="p">%{</span><span class="n">book</span> <span class="p">|</span> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: a lot more fun&quot;</span><span class="p">,</span> <span class="err">\</span>
</span><span class='line'>                      <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir with fun&quot;</span><span class="p">}</span>
</span><span class='line'><span class="p">%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: a lot more fun&quot;</span><span class="p">,</span> <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir with fun&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">book</span><span class="p">)</span>
</span><span class='line'><span class="ss">:ok</span>
</span><span class='line'>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nc">Books</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: a lot more fun&quot;</span><span class="p">,</span> <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir with fun&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Next, you also can create a new book by calling <code>insert</code> command on <code>Repo</code>. Pretty straight forward.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">insert</span><span class="p">(%</span><span class="nc">Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Simon St. Laurent, J. David Eisenberg&quot;</span><span class="p">,</span> <span class="err">\</span>
</span><span class='line'>                        <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Elixir is an excellent language if you want to </span><span class="err">\</span><span class="s2"></span>
</span><span class='line'><span class="s2">                                      learn about functional programming, and with this hands-on </span><span class="err">\</span><span class="s2"></span>
</span><span class='line'><span class="s2">                                      introduction&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;O&#39;Reilly&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Introducing Elixir&quot;</span><span class="p">})</span>
</span><span class='line'><span class="p">%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Simon St. Laurent, J. David Eisenberg&quot;</span><span class="p">,</span>
</span><span class='line'>                 <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Elixir is an excellent language if you want to learn about </span><span class="err">\</span><span class="s2"></span>
</span><span class='line'><span class="s2">                               functional programming, and with this hands-on introduction&quot;</span><span class="p">,</span> <span class="err">\</span>
</span><span class='line'>                 <span class="ss">id</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;O&#39;Reilly&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Introducing Elixir&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now try to get all books again</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="nc">Books</span><span class="p">)</span>
</span><span class='line'><span class="p">[%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: a lot more fun&quot;</span><span class="p">,</span> <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir with fun&quot;</span><span class="p">},</span>
</span><span class='line'> <span class="p">%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Simon St. Laurent, J. David Eisenberg&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Elixir is an excellent language if you want to learn about </span><span class="err">\</span><span class="s2"></span>
</span><span class='line'><span class="s2">                functional programming, and with this hands-on introduction&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;O&#39;Reilly&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Introducing Elixir&quot;</span><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure>

<p>Note this book is created with id <code>2</code>. Now we can delete this book by calling <code>delete</code> command on <code>Repo</code>. </p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">introducing_elixir_book</span> <span class="p">=</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nc">Books</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="p">%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Simon St. Laurent, J. David Eisenberg&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Elixir is an excellent language if you want to learn </span><span class="err">\</span><span class="s2"></span>
</span><span class='line'><span class="s2">               about functional programming, and with this hands-on introduction&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;O&#39;Reilly&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Introducing Elixir&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="n">introducing_elixir_book</span><span class="p">)</span>
</span><span class='line'><span class="ss">:ok</span>
</span></code></pre></td></tr></table></div></figure>

<p>Retrieving all books again, you will see the deleted book is really deleted.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="nc">Books</span><span class="p">)</span>
</span><span class='line'><span class="p">[%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: Functional |&gt; Concurrent |&gt; Pragmatic |&gt; Fun&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir&quot;</span><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure>

<p>That&#39;s all for this article. I really hope you enjoy it. These basic command on the model will play a very important role when you need to build a RESTful controller, which will be cover in the near future article :-) </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Have Fun With Pattern Matching in Elixir]]></title>
    <link href="http://learnelixir.com/blog/2014/10/07/have-fun-with-pattern-matching-in-elixir/"/>
    <updated>2014-10-07T22:28:03+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/07/have-fun-with-pattern-matching-in-elixir</id>
    <content type="html"><![CDATA[<p>In this article, we will look deeper into pattern matching in Elixir. Coming from prologue background, I think pattern matching is quite a fun thing to do. Prologue is a too hard core language for this kind of thing, whereas Elixir is mixing just well between normal programming language and pattern matching&#8230;</p>

<!-- more -->

<p>First, let&#39;s look at the very basic pattern matching in Elixir:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">variable</span> <span class="p">=</span> <span class="mi">1</span>
</span><span class='line'><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>

<p>In a common programming language like Ruby or Java, this is simple an assignment. However, in Elixir, this assignment operator is called the match operator. Here is why</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">variable</span> <span class="p">=</span> <span class="mi">1</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="mi">1</span> <span class="p">=</span> <span class="n">variable</span>
</span><span class='line'><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>

<p>In Ruby or Java, the expression <code>1 = variable</code> will give you a syntax error because 1 cannot be assigned to a variable. But in Elixir, it is just fine, because 1 and variable are matching in value. However, you cannot match an undefined variable with a number when the variable in on the right hand side</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="mi">2</span> <span class="p">=</span> <span class="n">x</span>
</span><span class='line'><span class="o">**</span> <span class="p">(</span><span class="nc">RuntimeError</span><span class="p">)</span> <span class="n">undefined</span> <span class="ss">function</span><span class="p">:</span> <span class="n">x</span><span class="o">/</span><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>

<p>Without pre-definining <code>x</code> variable, Elixir will think that you are trying to call a function <code>x</code> (<code>x/0</code>) without any argument. Now, let&#39;s go further to matching few variables at the same time</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">]</span> <span class="p">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">a</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">b</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">c</span>
</span><span class='line'><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>

<p>After this matching operation, <code>a</code>, <code>b</code> and <code>c</code> will have value <code>1</code>, <code>2</code> and <code>3</code> respectively. This is extremely useful when you need to assign a list of variables or when you return a function as a tuple. We can now go a bit further by first trying to understand a definition of a list:</p>

<p><strong>A list is a series of element which can have 0 elements.</strong></p>

<p>So based on this definition, I can write a list as following</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>a list is <span class="o">[]</span> <span class="c"># empty list</span>
</span><span class='line'><span class="c"># or</span>
</span><span class='line'>a list is <span class="o">[</span>element1, element2, element3, element4, etc...<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>The first is easy to understand, a list can be empty. The second list basically shows that it can have many elements, which can be understood that a list is combined from <code>element1</code> and the rest of the element:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>list is <span class="o">[</span>element1, and the remaining<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>In mathematics, we can say</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">list</span> <span class="o">=</span> <span class="o">[</span>head <span class="p">|</span> tail<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>Where <code>head</code> is <code>element1</code> and <code>tail</code> is the remaining. So now we apply this into Elixir pattern matching</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">list</span> <span class="p">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="p">[</span><span class="n">head</span> <span class="p">|</span> <span class="n">tail</span><span class="p">]</span> <span class="p">=</span> <span class="n">list</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>Because of patter matching, <code>head</code> is now carrying value <code>1</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">head</span>
</span><span class='line'><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>

<p>And tail is now carrying the remaining of the list which is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">tail</span>
</span><span class='line'><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>So if we want to get our all elements of this list, we can just simply continue to assign like following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="p">[</span><span class="n">head1</span> <span class="p">|</span> <span class="n">tail1</span><span class="p">]</span> <span class="p">=</span> <span class="n">tail</span>
</span><span class='line'><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">head1</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">tail1</span>
</span><span class='line'><span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>So on so forth we will be able to extract every single element of this list using pattern matching. You can note that we never talk about a for loop, yet we still can go through the loop easily using Pattern Matching.</p>

<p>The applications of pattern matching is endless, but I am going to show you a classic pattern matching by trying to calculate a sum of a list. </p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">Utils</span> <span class="k">do</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">sum</span><span class="p">([]),</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">sum</span><span class="p">([</span><span class="n">head</span> <span class="p">|</span> <span class="n">tail</span><span class="p">]),</span> <span class="ss">do</span><span class="p">:</span> <span class="n">head</span> <span class="o">+</span> <span class="n">sum</span><span class="p">(</span><span class="n">tail</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nc">Utils</span><span class="p">.</span><span class="n">sum</span><span class="p">([])</span> <span class="c1"># return 0</span>
</span><span class='line'><span class="nc">Utils</span><span class="p">.</span><span class="n">sum</span><span class="p">([</span><span class="mi">9</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">6</span><span class="p">])</span> <span class="c1"># returns 30</span>
</span></code></pre></td></tr></table></div></figure>

<p>Let&#39;s go through quickly how this work:</p>

<ul>
<li>On line 2, we definied a sum function for an empty list (pattern matching an empty list in sum function&#39;s argument) and return 0.</li>
<li>On line 3, we defined another sum function but with a non empty list, this function then returns the result as the value of <code>head</code> + the sum of the remaining inside the list (<code>sum(tail)</code>). It is actually a recursion by calling the function itself in its evaluation.</li>
</ul>

<p>So by now you should have a basic understanding how Elixir pattern matching works. Eventually, you will see more and more this type of pattern matching throughout Elixir Programming.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic Testing With Elixir]]></title>
    <link href="http://learnelixir.com/blog/2014/10/06/basic-testing-with-elixir/"/>
    <updated>2014-10-06T22:31:16+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/06/basic-testing-with-elixir</id>
    <content type="html"><![CDATA[<p>In this article, we will go through some basic testing syntax with elixir. Elixir is a language that very well supports unit test and I totally love it when I first see it on the video. Let&#39;s start by writing a simple assertion</p>

<!--more-->

<p>You can use your favorite editor to edit an <code>.ex</code> file. In my case, I create a test folder and edit my <code>sample.ex</code> inside</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir <span class="nb">test</span>
</span><span class='line'><span class="nv">$ </span>vim <span class="nb">test</span>/sample.ex
</span></code></pre></td></tr></table></div></figure>

<p>Now, inside this <code>sample.ex</code>, I can immediately write my first assertion like below</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="nc">ExUnit</span><span class="p">.</span><span class="n">start</span>
</span><span class='line'>
</span><span class='line'><span class="kd">defmodule</span> <span class="nc">TestIt</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">ExUnit.Case</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">test</span> <span class="s2">&quot;1 + 1 is 2&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">assert</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">==</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>As you can see, the test case can be written in a very simple manner. It starts with <code>ExUnit.start</code> and then make use of <code>ExUnit.Case</code> in <code>use ExUnit.Case</code></p>

<p>You can then run this file by this command</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>elixir sample.ex
</span><span class='line'>.
</span><span class='line'>
</span><span class='line'>Finished in 0.03 seconds <span class="o">(</span>0.03s on load, 0.00s on tests<span class="o">)</span>
</span><span class='line'><span class="m">1</span> tests, <span class="m">0</span> failures
</span><span class='line'>
</span><span class='line'>Randomized with seed 322828
</span></code></pre></td></tr></table></div></figure>

<p>That&#39;s for the start, now we can following a Test Driven Development method (TDD) to develop something basic just for learning purpose. Let&#39;s write fibonacci generate. </p>

<p>Giving a sequence number, the program will generate out a fibonacci number. Before we start writing, let&#39;s review the definition of fibonacci number </p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>fibonacci<span class="o">(</span>0<span class="o">)</span> <span class="o">=</span> 1
</span><span class='line'>fibonacci<span class="o">(</span>1<span class="o">)</span> <span class="o">=</span> 1
</span><span class='line'>fibonacci<span class="o">(</span>n<span class="o">)</span> <span class="o">=</span> fibonacci<span class="o">(</span>n - 1<span class="o">)</span> + fibonacci<span class="o">(</span>n - 2<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>With this definition in mind, let start by writing the first test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="nc">ExUnit</span><span class="p">.</span><span class="n">start</span>
</span><span class='line'>
</span><span class='line'><span class="kd">defmodule</span> <span class="nc">TestIt</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">ExUnit.Case</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">test</span> <span class="s2">&quot;fibonacci number 0 is 1&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">assert</span> <span class="nc">Sequence</span><span class="p">.</span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Run this test and you can expect a failure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>elixir sample.ex
</span><span class='line'>
</span><span class='line'>  1<span class="o">)</span> <span class="nb">test </span>fibonacci number <span class="m">0</span> is <span class="m">1</span> <span class="o">(</span>TestIt<span class="o">)</span>
</span><span class='line'>     sample.ex:6
</span><span class='line'>     ** <span class="o">(</span>UndefinedFunctionError<span class="o">)</span> undefined <span class="k">function</span>: <span class="se">\</span>
</span><span class='line'>            Sequence.fibonacci/1 <span class="o">(</span>module Sequence is not available<span class="o">)</span>
</span><span class='line'>     stacktrace:
</span><span class='line'>       Sequence.fibonacci<span class="o">(</span>0<span class="o">)</span>
</span><span class='line'>       sample.ex:7
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Finished in 0.03 seconds <span class="o">(</span>0.03s on load, 0.00s on tests<span class="o">)</span>
</span><span class='line'><span class="m">1</span> tests, <span class="m">1</span> failures
</span><span class='line'>
</span><span class='line'>Randomized with seed 490020
</span></code></pre></td></tr></table></div></figure>

<p>As you can expect, the failure is because we do not have any module <code>Sequence</code> and function <code>fibonacci</code>. Let go to <code>sample.ex</code> and add in a function fibonacci:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="nc">ExUnit</span><span class="p">.</span><span class="n">start</span>
</span><span class='line'>
</span><span class='line'><span class="kd">defmodule</span> <span class="nc">Sequence</span> <span class="k">do</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">defmodule</span> <span class="nc">TestIt</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">ExUnit.Case</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">test</span> <span class="s2">&quot;fibonacci number 0 is 1&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">assert</span> <span class="nc">Sequence</span><span class="p">.</span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now we have <code>fibonacci</code> function in <code>Sequence</code> module, which takes in a number and always return 1. Run the test again</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>elixir sample.ex
</span><span class='line'>.
</span><span class='line'>
</span><span class='line'>Finished in 0.04 seconds <span class="o">(</span>0.04s on load, 0.00s on tests<span class="o">)</span>
</span><span class='line'><span class="m">1</span> tests, <span class="m">0</span> failures
</span><span class='line'>
</span><span class='line'>Randomized with seed 311294
</span></code></pre></td></tr></table></div></figure>

<p>Great! It passed. We are at green state now. We can now refactor a bit to make our source code a bit shorter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="nc">ExUnit</span><span class="p">.</span><span class="n">start</span>
</span><span class='line'>
</span><span class='line'><span class="kd">defmodule</span> <span class="nc">Sequence</span> <span class="k">do</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">defmodule</span> <span class="nc">TestIt</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">ExUnit.Case</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">test</span> <span class="s2">&quot;fibonacci number 0 is 1&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">assert</span> <span class="nc">Sequence</span><span class="p">.</span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>I have moved the block inside <code>def fibonacci</code> to become something shorter. In fact, <code>def</code> is a function call in Elixir, which takes in a pattern (<code>fibonacci(n)</code>) and <code>do</code> something. This something needs to be a regular expression.</p>

<p>Now run the test again and you would expect it to pass</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>elixir sample.ex
</span><span class='line'>sample.ex:4: warning: variable n is unused
</span><span class='line'>.
</span><span class='line'>
</span><span class='line'>Finished in 0.04 seconds <span class="o">(</span>0.04s on load, 0.00s on tests<span class="o">)</span>
</span><span class='line'><span class="m">1</span> tests, <span class="m">0</span> failures
</span><span class='line'>
</span><span class='line'>Randomized with seed 999642
</span></code></pre></td></tr></table></div></figure>

<p>You can ignore the warning of unused variable n for now. We will come back to that shortly. Now, let&#39;s write some more test cases:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="nc">ExUnit</span><span class="p">.</span><span class="n">start</span>
</span><span class='line'>
</span><span class='line'><span class="kd">defmodule</span> <span class="nc">Sequence</span> <span class="k">do</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">defmodule</span> <span class="nc">TestIt</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">ExUnit.Case</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">test</span> <span class="s2">&quot;fibonacci number 0 is 1&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">assert</span> <span class="nc">Sequence</span><span class="p">.</span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">test</span> <span class="s2">&quot;fibonacci number 1 is 1&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">assert</span> <span class="nc">Sequence</span><span class="p">.</span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">test</span> <span class="s2">&quot;fibonacci number 2 is 2&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">assert</span> <span class="nc">Sequence</span><span class="p">.</span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">test</span> <span class="s2">&quot;fibonacci number 3 is 3&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">assert</span> <span class="nc">Sequence</span><span class="p">.</span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">test</span> <span class="s2">&quot;fibonacci number 4 is 5&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">assert</span> <span class="nc">Sequence</span><span class="p">.</span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">test</span> <span class="s2">&quot;fibonacci number 10 is 89&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">assert</span> <span class="nc">Sequence</span><span class="p">.</span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="o">==</span> <span class="mi">89</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>And when run the test, it will fail as expected</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>elixir sample.ex
</span><span class='line'>  1<span class="o">)</span> <span class="nb">test </span>fibonacci number <span class="m">2</span> is <span class="m">2</span> <span class="o">(</span>TestIt<span class="o">)</span>
</span><span class='line'>     sample.ex:18
</span><span class='line'>     Assertion <span class="nv">with</span> <span class="o">==</span> failed
</span><span class='line'>     code: Sequence.fibonacci<span class="o">(</span>2<span class="o">)</span> <span class="o">==</span> 2
</span><span class='line'>     lhs:  1
</span><span class='line'>     rhs:  2
</span><span class='line'>     stacktrace:
</span><span class='line'>       sample.ex:19
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  2<span class="o">)</span> <span class="nb">test </span>fibonacci number <span class="m">3</span> is <span class="m">3</span> <span class="o">(</span>TestIt<span class="o">)</span>
</span><span class='line'>     sample.ex:22
</span><span class='line'>     Assertion <span class="nv">with</span> <span class="o">==</span> failed
</span><span class='line'>     code: Sequence.fibonacci<span class="o">(</span>2<span class="o">)</span> <span class="o">==</span> 2
</span><span class='line'>     lhs:  1
</span><span class='line'>     rhs:  2
</span><span class='line'>     stacktrace:
</span><span class='line'>       sample.ex:23
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  3<span class="o">)</span> <span class="nb">test </span>fibonacci number <span class="m">4</span> is <span class="m">5</span> <span class="o">(</span>TestIt<span class="o">)</span>
</span><span class='line'>     sample.ex:26
</span><span class='line'>     Assertion <span class="nv">with</span> <span class="o">==</span> failed
</span><span class='line'>     code: Sequence.fibonacci<span class="o">(</span>2<span class="o">)</span> <span class="o">==</span> 2
</span><span class='line'>     lhs:  1
</span><span class='line'>     rhs:  2
</span><span class='line'>     stacktrace:
</span><span class='line'>       sample.ex:27
</span><span class='line'>
</span><span class='line'>..
</span><span class='line'>
</span><span class='line'>  4<span class="o">)</span> <span class="nb">test </span>fibonacci number <span class="m">10</span> is <span class="m">89</span> <span class="o">(</span>TestIt<span class="o">)</span>
</span><span class='line'>     sample.ex:30
</span><span class='line'>     Assertion <span class="nv">with</span> <span class="o">==</span> failed
</span><span class='line'>     code: Sequence.fibonacci<span class="o">(</span>10<span class="o">)</span> <span class="o">==</span> 89
</span><span class='line'>     lhs:  1
</span><span class='line'>     rhs:  89
</span><span class='line'>     stacktrace:
</span><span class='line'>       sample.ex:31
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Finished in 0.06 seconds <span class="o">(</span>0.06s on load, 0.00s on tests<span class="o">)</span>
</span><span class='line'><span class="m">6</span> tests, <span class="m">4</span> failures
</span><span class='line'>
</span><span class='line'>Randomized with seed 982355
</span></code></pre></td></tr></table></div></figure>

<p>Now let try to write the code to pass these cases using the definition</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">Sequence</span> <span class="k">do</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="ow">when</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Note that <code>when n &lt;= 1</code> in the first function definition is Elixir guard conidtion&#8220;. Now, run the test and everything is passed</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>elixir sample.ex
</span><span class='line'>......
</span><span class='line'>
</span><span class='line'>Finished in 0.06 seconds <span class="o">(</span>0.06s on load, 0.00s on tests<span class="o">)</span>
</span><span class='line'><span class="m">6</span> tests, <span class="m">0</span> failures
</span><span class='line'>
</span><span class='line'>Randomized with seed 456516
</span></code></pre></td></tr></table></div></figure>

<p>Since elixir function definition is patterned matching. You also can write as following to match according to the mathematic definition</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">Sequence</span> <span class="k">do</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fibonacci</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fibonacci</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here we do not need a guard condition for n in third function as it will match first and second if n is 0 or 1. The function matching is top to bottom. Run the test again</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>elixir sample.ex
</span><span class='line'>......
</span><span class='line'>
</span><span class='line'>Finished in 0.06 seconds <span class="o">(</span>0.06s on load, 0.00s on tests<span class="o">)</span>
</span><span class='line'><span class="m">6</span> tests, <span class="m">0</span> failures
</span><span class='line'>
</span><span class='line'>Randomized with seed 163178
</span></code></pre></td></tr></table></div></figure>

<p>We concluded this article here and hope you have learned and enjoyed the following from Elixir. Thank you for your time</p>

<ul>
<li>TDD in Elixir</li>
<li>ExUnit Test</li>
<li>Function Pattern Matching</li>
<li>Guard Conditions</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Listing App With Elixir, Phoenix, Postgres and Ecto]]></title>
    <link href="http://learnelixir.com/blog/2014/10/05/build-web-app-with-elixir/"/>
    <updated>2014-10-05T23:22:42+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/05/build-web-app-with-elixir</id>
    <content type="html"><![CDATA[<p><strong>UPDATE</strong> on 26th Oct 14: I have updated this article in order to work with Phoenix framework version 0.5.0. Previously the Phoenix framework used in this article was 0.4.1
<hr/><br/>
In this article, let&#39;s go through the process of creating and build a simple web app which lists a set of books using Elixir, Phoenix, Postgres and Ecto. I hope you will enjoy :-)</p>

<!--more-->

<h3>Create Elixir Book Store Project</h3>

<p>From the phoenix installation folder, run the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix phoenix.new book_store ../
</span></code></pre></td></tr></table></div></figure>

<p>Now enter the project folder and get all the dependencies and start the phoenix project:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ../book_store
</span><span class='line'><span class="nv">$ </span>mix <span class="k">do</span> deps.get, compile
</span><span class='line'><span class="nv">$ </span>mix phoenix.start
</span></code></pre></td></tr></table></div></figure>

<p>Open the browser, and go to the url <code>http://localhost:4000</code></p>

<p><img class="left" src="http://learnelixir.com/images/build-web-app-with-elixir/phoenix_page.png" width="800" height="510" title="image" alt="images"></p>

<h3>Add Ecto To The Project</h3>

<p>From the project root folder, open file <code>mix.exs</code>, scroll down to the end of the file, then you will see <code>defp deps do</code> function definition. You will need to add in <code>postgrex</code> and <code>ecto</code> dependencies</p>

<ul>
<li><code>postgrex</code> (https://github.com/ericmj/postgrex) is the PostgresSQL driver for Elixir</li>
<li><code>ecto</code> (https://github.com/elixir-lang/ecto) is a database wrapper and language integrated query for Elixir </li>
</ul>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defp</span> <span class="n">deps</span> <span class="k">do</span>
</span><span class='line'>  <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:phoenix</span><span class="p">,</span> <span class="s2">&quot;0.5.0&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:cowboy</span><span class="p">,</span> <span class="s2">&quot;~&gt; 1.0.0&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:postgrex</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.5&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:ecto</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.2.0&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>In the same file, you will also need to update the application function definition to include <code>postgrex</code> and <code>ecto</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">def</span> <span class="n">application</span> <span class="k">do</span>
</span><span class='line'>  <span class="p">[</span>
</span><span class='line'>    <span class="ss">mod</span><span class="p">:</span> <span class="p">{</span> <span class="nc">BookStore</span><span class="p">,</span> <span class="p">[]</span> <span class="p">},</span>
</span><span class='line'>    <span class="ss">applications</span><span class="p">:</span> <span class="p">[</span><span class="ss">:phoenix</span><span class="p">,</span> <span class="ss">:cowboy</span><span class="p">,</span> <span class="ss">:logger</span><span class="p">,</span> <span class="ss">:postgrex</span><span class="p">,</span> <span class="ss">:ecto</span><span class="p">]</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Run the following commands in the terminal to get all the dependencies.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix deps.get
</span></code></pre></td></tr></table></div></figure>

<h3>Create A Repo</h3>

<p>A repo is a basic interfacte to a database (which is postgres). Open <code>web/models/repo.ex</code> and add the following code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">BookStore.Repo</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Ecto.Repo</span><span class="p">,</span> <span class="ss">adapter</span><span class="p">:</span> <span class="nc">Ecto.Adapters.Postgres</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">conf</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">parse_url</span> <span class="s2">&quot;ecto://postgresuser:password@localhost/book_store&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">priv</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">app_dir</span><span class="p">(</span><span class="ss">:book_store</span><span class="p">,</span> <span class="s2">&quot;priv/repo&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>We have defined PostgreSQL connection with a URL format. What you will need to do is changing the <code>postgresuser</code> and <code>password</code> to be the real postgres username and password on your database.</p>

<p>The next step that we need to do is to make sure that our Repo module is started with our application, and is supervised. You can do this by opening file <code>lib/book_store.ex</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">BookStore</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Application</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># See http://elixir-lang.org/docs/stable/elixir/Application.html</span>
</span><span class='line'>  <span class="c1"># for more information on OTP Applications</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">start</span><span class="p">(</span><span class="n">_type</span><span class="p">,</span> <span class="n">_args</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="kn">import</span> <span class="nc">Supervisor.Spec</span><span class="p">,</span> <span class="ss">warn</span><span class="p">:</span> <span class="no">false</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">children</span> <span class="p">=</span> <span class="p">[</span>
</span><span class='line'>      <span class="c1"># Define workers and child supervisors to be supervised</span>
</span><span class='line'>      <span class="n">worker</span><span class="p">(</span><span class="nc">BookStore.Repo</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">opts</span> <span class="p">=</span> <span class="p">[</span><span class="ss">strategy</span><span class="p">:</span> <span class="ss">:one_for_one</span><span class="p">,</span> <span class="ss">name</span><span class="p">:</span> <span class="nc">BookStore.Supervisor</span><span class="p">]</span>
</span><span class='line'>    <span class="nc">Supervisor</span><span class="p">.</span><span class="n">start_link</span><span class="p">(</span><span class="n">children</span><span class="p">,</span> <span class="n">opts</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Line number 11 is the only line that we add inside this file.</p>

<p>To make sure that everything is good, let&#39;s compile the project:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix compile
</span></code></pre></td></tr></table></div></figure>

<p>Next, let&#39;s create the <code>book_store</code> database in postgres</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>createdb book_store --encoding<span class="o">=</span><span class="s1">&#39;utf-8&#39;</span> --locale<span class="o">=</span>en_US.UTF-8 --template<span class="o">=</span>template0<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<h3>Create a model</h3>

<p>Create a model file <code>web/models/books.ex</code> with the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">BookStore.Books</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Ecto.Model</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">schema</span> <span class="s2">&quot;books&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">field</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>    <span class="n">field</span> <span class="ss">:description</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>    <span class="n">field</span> <span class="ss">:author</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>    <span class="n">field</span> <span class="ss">:publisher</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<h3>Generate Migration Script</h3>

<p>We will also need to create a database migration for books model by using the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix ecto.gen.migration BookStore.Repo create_book
</span><span class='line'>Compiled lib/book_store.ex
</span><span class='line'>Compiled web/models/repo.ex
</span><span class='line'>Generated book_store.app
</span><span class='line'>* creating priv/repo/migrations
</span><span class='line'>* creating priv/repo/migrations/20141005013526_create_book.exs
</span></code></pre></td></tr></table></div></figure>

<p>Now open the just generated migration file <code>priv/repo/migrations/20141005013526_create_book.exs</code> and change with the following code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">BookStore.Repo.Migrations.CreateBook</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Ecto.Migration</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">up</span> <span class="k">do</span>
</span><span class='line'>    <span class="p">[</span><span class="s2">&quot;CREATE TABLE books(</span><span class="err">\</span><span class="s2"></span>
</span><span class='line'><span class="s2">        id serial primary key, </span><span class="err">\</span><span class="s2"></span>
</span><span class='line'><span class="s2">        title varchar(125), </span><span class="err">\</span><span class="s2"></span>
</span><span class='line'><span class="s2">        description text, </span><span class="err">\</span><span class="s2"></span>
</span><span class='line'><span class="s2">        author varchar(255), </span><span class="err">\</span><span class="s2"></span>
</span><span class='line'><span class="s2">        publisher varchar(255))&quot;</span><span class="p">,</span><span class="err">\</span>
</span><span class='line'>
</span><span class='line'>     <span class="s2">&quot;INSERT INTO books(title, description, author, publisher) </span><span class="err">\</span><span class="s2"></span>
</span><span class='line'><span class="s2">             VALUES ( </span><span class="err">\</span><span class="s2"></span>
</span><span class='line'><span class="s2">                &#39;Programming Elixir&#39;, </span><span class="err">\</span><span class="s2"></span>
</span><span class='line'><span class="s2">                &#39;Programming Elixir: Functional |&gt; Concurrent |&gt; Pragmatic |&gt; Fun&#39;, </span><span class="err">\</span><span class="s2"></span>
</span><span class='line'><span class="s2">                &#39;Dave Thomas&#39;, </span><span class="err">\</span><span class="s2"></span>
</span><span class='line'><span class="s2">                &#39;The Pragmatic Bookshelf&#39;)&quot;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">down</span> <span class="k">do</span>
</span><span class='line'>    <span class="s2">&quot;DROP TABLE books&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Inside this migration file, you will see up and down function. <code>up</code> function is run when you run the database migration, <code>down</code> function is run when you revert or rollback this database migration</p>

<p>Now run the migration</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix ecto.migrate BookStore.Repo
</span><span class='line'>* running UP _build/dev/lib/book_store/priv/repo/migrations/20141005013526_create_book.exs<span class="sb">``</span>
</span></code></pre></td></tr></table></div></figure>

<h3>Create A Query</h3>

<p>Create <code>web/models/queries.ex</code> folder. </p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">BookStore.Queries</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">import</span> <span class="nc">Ecto.Query</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">books_query</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">query</span> <span class="p">=</span> <span class="n">from</span> <span class="n">book</span> <span class="ow">in</span> <span class="nc">BookStore.Books</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">select</span><span class="p">:</span> <span class="n">book</span>
</span><span class='line'>    <span class="nc">BookStore.Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<h3>Route books index page to Book controller index action</h3>

<p>Open file <code>web/router.ex</code>, we will need to map the root route to <code>BookController</code>. Note that in Phoenix, controller name is singular + <code>Controller</code> whereas in Rails, it is <code>BooksController</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">BookStore.Router</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Phoenix.Router</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">scope</span> <span class="s2">&quot;/&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">pipe_through</span> <span class="ss">:browser</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">get</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="nc">BookStore.BookController</span><span class="p">,</span> <span class="ss">:index</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:books</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<h3>Create BookController and get all books</h3>

<p>Create a file called <code>book_controller.ex</code> inside <code>web/controllers</code> folder with the following source code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">BookStore.BookController</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Phoenix.Controller</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">plug</span> <span class="ss">:action</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">index</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="n">_params</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">books</span> <span class="p">=</span> <span class="nc">BookStore.Queries</span><span class="p">.</span><span class="n">books_query</span>
</span><span class='line'>    <span class="n">render</span> <span class="n">conn</span><span class="p">,</span> <span class="s2">&quot;index&quot;</span><span class="p">,</span> <span class="ss">books</span><span class="p">:</span> <span class="n">books</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<h3>Create books index page view</h3>

<p>Next thing that we will need to do is to create an index page for books listing. First, create folder <code>book</code> inside <code>web/template</code>. </p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir web/templates/book
</span></code></pre></td></tr></table></div></figure>

<p>Second, create a book view file - <code>web/views/book_view.ex</code> with the following content</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">BookStore.BookView</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">BookStore.Views</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Finally, create file <code>web/template/book/index.html.eex</code> and paste in the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;</span>Our Books<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">&#39;table table-bodered table-striped&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;thead&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;th&gt;</span>#<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>      <span class="nt">&lt;th&gt;</span>Title<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>      <span class="nt">&lt;th&gt;</span>Description<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>      <span class="nt">&lt;th&gt;</span>Author<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>      <span class="nt">&lt;th&gt;</span>Publisher<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/thead&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tbody&gt;</span>
</span><span class='line'>    <span class="err">&lt;</span>%= for book <span class="nt">&lt;-</span> <span class="err">@</span><span class="na">books</span> <span class="na">do</span> <span class="err">%</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= book.id %&gt;<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= book.title %&gt;<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= book.description %&gt;<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= book.author %&gt;<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= book.publisher %&gt;<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="err">&lt;</span>% end %&gt;
</span><span class='line'>  <span class="nt">&lt;/tbody&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Refresh the browser and voila, this is what we will get:</p>

<p><img class="left" src="http://learnelixir.com/images/build-web-app-with-elixir/complete.png" width="800" height="346" title="image" alt="images"></p>

<h3>Common Pitfall</h3>

<p>I seldom hit the following error when trying to restart phoenix although all the codes are correct 
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">=</span>INFO <span class="nv">REPORT</span><span class="o">====</span> 5-Oct-2014::09:57:47 <span class="o">===</span>
</span><span class='line'>    application: logger
</span><span class='line'>    exited: stopped
</span><span class='line'>    <span class="nb">type</span>: temporary
</span><span class='line'>** <span class="o">(</span>Mix<span class="o">)</span> Could not start application book<em>store: exited in: BookStore.start<span class="o">(</span>:normal, <span class="o">[])</span>
</span><span class='line'>    ** <span class="o">(</span>EXIT<span class="o">)</span> an exception was raised:
</span><span class='line'>        ** <span class="o">(</span>UndefinedFunctionError<span class="o">)</span> undefined <span class="k">function</span>: BookStore.start/2
</span><span class='line'>          <span class="o">(</span>module BookStore is not available<span class="o">)</span>
</span><span class='line'>            BookStore.start<span class="o">(</span>:normal, <span class="o">[])</span>
</span><span class='line'>            <span class="o">(</span>kernel<span class="o">)</span> application</em>master.erl:272: :application<em>master.start</em>it_old/4
</span></code></pre></td></tr></table></div></figure></p>

<p>To fix this, you will need to clean compile all your elixir code: </p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix clean
</span><span class='line'><span class="nv">$ </span>mix compile
</span><span class='line'><span class="nv">$ </span>mix phoenix.start
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Learn Elixir Language]]></title>
  <link href="http://learnelixir.com/atom.xml" rel="self"/>
  <link href="http://learnelixir.com/"/>
  <updated>2014-10-17T08:18:21+08:00</updated>
  <id>http://learnelixir.com/</id>
  <author>
    <name><![CDATA[Learn Elixir]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Deploy Phoenix Application to a Ubuntu Server]]></title>
    <link href="http://learnelixir.com/blog/2014/10/16/deploy-phoenix-application-to-a-ubuntu-server-with-nginx/"/>
    <updated>2014-10-16T22:26:46+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/16/deploy-phoenix-application-to-a-ubuntu-server-with-nginx</id>
    <content type="html"><![CDATA[<p>In previous article, we have already learned how to deploy a Phoenix Application to Heroku server. I am actually quite curious to see how Elixir, and Phoenix can work with nginx server. That&rsquo;s the reason why I try to dig into this topic. Here are the steps that I managed to find out how to automate the deployment process and run the application on nginx server.</p>

<!-- more -->


<h3>Step to set create a basic Phoenix application.</h3>

<p>You can skip this section if you already have a Phoenix application to deploy</p>

<p>From phoenix installation folder, run the following command. You can name it any name as long as you remember to use the same app name in subsequent steps.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix phoenix.new my_awesome_app ../
</span></code></pre></td></tr></table></div></figure>


<p>Enter this new application folder and install all the dependencies</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ../my_awesome_app
</span><span class='line'>mix <span class="k">do</span> deps.get, compile
</span></code></pre></td></tr></table></div></figure>


<p>This is a miminal number of steps to setup a phoenix application. Eventually, you will need to add more code to build it up. Moving forward, let&rsquo;s deploy this application.</p>

<h3>Deploy and Deploy</h3>

<h4>Step 1: Install capistrano and capify</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gem install capistrano --version<span class="o">=</span>2.15.5
</span></code></pre></td></tr></table></div></figure>


<p>then capify it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>capify .
</span><span class='line'><span class="o">[</span>add<span class="o">]</span> writing <span class="s1">&#39;./Capfile&#39;</span>
</span><span class='line'><span class="o">[</span>add<span class="o">]</span> writing <span class="s1">&#39;./config/deploy.rb&#39;</span>
</span><span class='line'><span class="o">[</span><span class="k">done</span><span class="o">]</span> capified!
</span></code></pre></td></tr></table></div></figure>


<p>and create a folder for multi staging deploy later.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir config/deploy
</span></code></pre></td></tr></table></div></figure>


<h4>Step 2: Add exrm to the dependencies</h4>

<p>Exrm stands for Elixir Release Management. It is a very nice tool to help release this phoenix app into a runnable standalone application. Everytime we deploy, we will need to run <code>mix release</code> to generate a ready-to-run application. Exrm will help us to handle the release process nicely.</p>

<p>To start, you will need to add <code>exrm</code> into <code>mix.exs</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defp</span> <span class="n">deps</span> <span class="k">do</span>
</span><span class='line'>  <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:phoenix</span><span class="p">,</span> <span class="s2">&quot;0.4.1&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:cowboy</span><span class="p">,</span> <span class="s2">&quot;~&gt; 1.0.0&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:exrm</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.14.11&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And install</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix deps.get
</span></code></pre></td></tr></table></div></figure>


<h4>Step 3: Change the way the application starts</h4>

<p>Add in <strong>line 12</strong> to the application file in lib folder. In my case it is <code>lib/my_awesome_app.ex</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">MyAwesomeApp</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Application</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># See http://elixir-lang.org/docs/stable/elixir/Application.html</span>
</span><span class='line'>  <span class="c1"># for more information on OTP Applications</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">start</span><span class="p">(</span><span class="n">_type</span><span class="p">,</span> <span class="n">_args</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="kn">import</span> <span class="nc">Supervisor.Spec</span><span class="p">,</span> <span class="ss">warn</span><span class="p">:</span> <span class="no">false</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">children</span> <span class="p">=</span> <span class="p">[</span>
</span><span class='line'>      <span class="c1"># Define workers and child supervisors to be supervised</span>
</span><span class='line'>      <span class="c1"># worker(TestApp.Worker, [arg1, arg2, arg3])</span>
</span><span class='line'>      <span class="n">worker</span><span class="p">(</span><span class="nc">MyAwesomeApp.Router</span><span class="p">,</span> <span class="p">[],</span> <span class="ss">function</span><span class="p">:</span> <span class="ss">:start</span><span class="p">)</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">IO</span><span class="p">.</span><span class="n">puts</span> <span class="p">(</span><span class="n">inspect</span> <span class="n">children</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">opts</span> <span class="p">=</span> <span class="p">[</span><span class="ss">strategy</span><span class="p">:</span> <span class="ss">:one_for_one</span><span class="p">,</span> <span class="ss">name</span><span class="p">:</span> <span class="nc">MyAwesomeApp.Supervisor</span><span class="p">]</span>
</span><span class='line'>    <span class="nc">Supervisor</span><span class="p">.</span><span class="n">start_link</span><span class="p">(</span><span class="n">children</span><span class="p">,</span> <span class="n">opts</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>After adding line 12, your application in development mode will no longer be able to start the normal way - <code>mix phoenix.start</code>. It will crash immediately like below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Running MyAwesomeApp.Router with Cowboy on port 4000
</span><span class='line'>** <span class="o">(</span>CaseClauseError<span class="o">)</span> no <span class="k">case</span> clause matching: <span class="o">{</span>:error, <span class="o">{</span>:already_started, <span class="c">#PID&lt;0.149.0&gt;}}</span>
</span><span class='line'>    <span class="o">(</span>phoenix<span class="o">)</span> lib/phoenix/router.ex:78: Phoenix.Router.start_adapter/2
</span><span class='line'>    <span class="o">(</span>phoenix<span class="o">)</span> lib/mix/tasks/phoenix/start.ex:12: Mix.Tasks.Phoenix.Start.run/1
</span><span class='line'>    <span class="o">(</span>mix<span class="o">)</span> lib/mix/cli.ex:55: Mix.CLI.run_task/2
</span><span class='line'>    <span class="o">(</span>elixir<span class="o">)</span> src/elixir_lexical.erl:17: :elixir_lexical.run/3
</span><span class='line'>    <span class="o">(</span>elixir<span class="o">)</span> lib/code.ex:316: Code.require_file/2
</span></code></pre></td></tr></table></div></figure>


<p>To fix this issue, you will need to run the phoenix server using the command below in development mode:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>iex -S mix phoenix.start
</span></code></pre></td></tr></table></div></figure>


<h4>Step 3: Push all the source code to a git repository</h4>

<p>Create a git place for your code to be stored in online. For my case, I have created a public github project at <code>git@github.com:learnelixir/my-awesome-app.git</code></p>

<p>Then from the application root folder, type the following commands to add the git remote url. Remember to change the git url accordingly</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git init
</span><span class='line'><span class="nv">$ </span>git remote add origin git@github.com:learnelixir/my-awesome-app.git
</span></code></pre></td></tr></table></div></figure>


<p>Then push everything up to this repo</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git add . <span class="o">&amp;&amp;</span> git commit -am <span class="s2">&quot;initial commit&quot;</span>
</span><span class='line'><span class="nv">$ </span>git push origin master
</span></code></pre></td></tr></table></div></figure>


<h4>Step 4: Install erlang and elixir on ubuntu server</h4>

<p>Login to your server, and run the following command to install erlang and elixir environment:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="err">$</span> <span class="n">wget</span> <span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="n">packages</span><span class="p">.</span><span class="n">erlang</span><span class="o">-</span><span class="n">solutions</span><span class="p">.</span><span class="n">com</span><span class="o">/</span><span class="n">erlang</span><span class="o">-</span><span class="n">solutions_1</span><span class="p">.</span><span class="mi">0</span><span class="n">_all</span><span class="p">.</span><span class="n">deb</span>
</span><span class='line'><span class="err">$</span> <span class="n">sudo</span> <span class="n">dpkg</span> <span class="o">-</span><span class="n">i</span> <span class="n">erlang</span><span class="o">-</span><span class="n">solutions_1</span><span class="p">.</span><span class="mi">0</span><span class="n">_all</span><span class="p">.</span><span class="n">deb</span>
</span><span class='line'><span class="err">$</span> <span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">update</span>
</span><span class='line'><span class="err">$</span> <span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">erlang</span>
</span><span class='line'><span class="err">$</span> <span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">elixir</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Step 5: Adjust your locale to UTF8</h4>

<p>Elixir is quite particular about the locale issue. It will give a lot of warnings later when we deploy if we do not set it up now. You can start by running the following commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">LANGUAGE</span><span class="o">=</span>en_US.UTF-8
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">LANG</span><span class="o">=</span>en_US.UTF-8
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">LC_ALL</span><span class="o">=</span>en_US.UTF-8
</span><span class='line'><span class="nv">$ </span>locale-gen en_US.UTF-8
</span><span class='line'><span class="nv">$ </span>sudo apt-get install locales
</span><span class='line'><span class="nv">$ </span>sudo dpkg-reconfigure locales
</span></code></pre></td></tr></table></div></figure>


<p>Then put the following export lines at the end of <code>~/.profile</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">LANGUAGE</span><span class="o">=</span>en_US.UTF-8
</span><span class='line'><span class="nb">export </span><span class="nv">LANG</span><span class="o">=</span>en_US.UTF-8
</span><span class='line'><span class="nb">export </span><span class="nv">LC_ALL</span><span class="o">=</span>en_US.UTF-8
</span></code></pre></td></tr></table></div></figure>


<p>Finally, put the following code at the end of <code>/etc/environment</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">LC_ALL</span><span class="o">=</span>en_US.UTF-8
</span><span class='line'><span class="nv">LANG</span><span class="o">=</span>en_US.UTF-8
</span></code></pre></td></tr></table></div></figure>


<h4>Step 5: Edit config/deploy.rb</h4>

<p>Edit <code>config/deploy.rb</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim config/deploy.rb
</span></code></pre></td></tr></table></div></figure>


<p>And paste in the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/ext/multistage&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:stages</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;staging&quot;</span><span class="p">,</span> <span class="s2">&quot;production&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:default_stage</span><span class="p">,</span> <span class="s2">&quot;production&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:keep_releases</span><span class="p">,</span> <span class="mi">5</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:application</span><span class="p">,</span> <span class="s2">&quot;My Awesome App&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:repository</span><span class="p">,</span>  <span class="s2">&quot;git@github.com:learnelixir/my-awesome-app.git&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:scm</span><span class="p">,</span> <span class="ss">:git</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:branch</span><span class="p">,</span> <span class="ss">:master</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:use_sudo</span><span class="p">,</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:normalize_asset_timestamps</span><span class="p">,</span> <span class="kp">false</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_via</span><span class="p">,</span> <span class="ss">:remote_cache</span>
</span><span class='line'><span class="n">after</span> <span class="s2">&quot;deploy:update&quot;</span><span class="p">,</span> <span class="s2">&quot;deploy:cleanup&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">after</span> <span class="s2">&quot;deploy:update&quot;</span><span class="p">,</span> <span class="s2">&quot;deploy:build&quot;</span><span class="p">,</span> <span class="s2">&quot;deploy:cleanup&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:assets</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:precompile</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="ss">:web</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># do nothing</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">is_application_running?</span><span class="p">(</span><span class="n">current_path</span><span class="p">)</span>
</span><span class='line'>  <span class="n">pid</span> <span class="o">=</span> <span class="n">capture</span><span class="p">(</span><span class="sx">%Q{ps ax -o pid= -o command=|</span>
</span><span class='line'><span class="sx">      grep &quot;/home/app/www/my_awesome_app/current/rel/my_awesome_app/.*/[b]eam&quot;|awk &#39;{print $1}&#39;}</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">pid</span> <span class="o">!=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:is_running</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="ss">:web</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">is_running</span> <span class="o">=</span> <span class="n">is_application_running?</span><span class="p">(</span><span class="n">current_path</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">is_running</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Application is running&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Application is NOT running&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:build</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="ss">:web</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">run</span> <span class="s2">&quot;cd </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2"> &amp;&amp; mix deps.get &amp;&amp; MIX_ENV=</span><span class="si">#{</span><span class="n">mix_env</span><span class="si">}</span><span class="s2"> mix release&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:restart</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="ss">:web</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">is_application_running?</span><span class="p">(</span><span class="n">current_path</span><span class="p">)</span>
</span><span class='line'>      <span class="n">run</span> <span class="s2">&quot;cd </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2">/rel/my_awesome_app/bin &amp;&amp; ./my_awesome_app stop&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">run</span> <span class="s2">&quot;cd </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2">/rel/my_awesome_app/bin &amp;&amp; ./my_awesome_app start&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:start</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="ss">:web</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">run</span> <span class="s2">&quot;cd </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2">/rel/my_awesome_app/bin &amp;&amp; ./my_awesome_app start&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:stop</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="ss">:web</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">run</span> <span class="s2">&quot;cd </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2">/rel/my_awesome_app/bin &amp;&amp; ./my_awesome_app stop&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have re-written 3 default task in capistrano. They are <code>restart</code>, <code>start</code> and <code>stop</code>. These are used to run the script which was generated in step 2. Note that this script is generated by the command <code>`mix release</code> on line 41. You will need to change the application name accordingly. In my case, the application name is <code>my_awesome_app</code>.</p>

<p>Besides <code>cap deploy</code>, here the commands that you can run with this capistrano:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cap deploy:is_running <span class="c"># tell you if the application is running</span>
</span><span class='line'><span class="nv">$ </span>cap deploy:stop       <span class="c"># stop the application</span>
</span><span class='line'><span class="nv">$ </span>cap deploy:start      <span class="c"># start the application</span>
</span><span class='line'><span class="nv">$ </span>cap deploy:restart    <span class="c"># restart the application</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Step 6: Create production.rb file inside config/deploy folder</h4>

<p>Create <code>`config/deploy/production.rb</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim config/deploy/production.rb
</span></code></pre></td></tr></table></div></figure>


<p>Then paste in the following code. You will need to change the server IP address in <code>xx.xx.xx.xx</code>, and replace the server username in <code>`&lt;user&gt;</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">server</span> <span class="s2">&quot;xx.xx.xx.xx&quot;</span><span class="p">,</span> <span class="ss">:app</span><span class="p">,</span> <span class="ss">:web</span><span class="p">,</span> <span class="ss">:db</span><span class="p">,</span> <span class="ss">:primary</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:user</span><span class="p">,</span> <span class="s1">&#39;&lt;user&gt;&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:branch</span><span class="p">,</span> <span class="ss">:master</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:mix_env</span><span class="p">,</span> <span class="ss">:prod</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s2">&quot;/home/&lt;user&gt;/www/my_awesome_app&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also create <code>staging.rb</code> inside <code>config/deploy</code> folder as well for your staging environment.</p>

<h4>Step 7: Run deploy setup and actual deploy</h4>

<p>Run the following command to initialize the capistrano folder structure for you for future deployments:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cap deploy:setup
</span></code></pre></td></tr></table></div></figure>


<p>Then launch the actual deployment and wait. On the first time, the server will take some times to install all the dependencies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cap deploy
</span></code></pre></td></tr></table></div></figure>


<h4>Step 8: Connect with nginx server</h4>

<p>Create the nginx configuration file on your nginx <code>sites-available</code> folder. In this case, it is <code>/etc/nginx/sites-available/my_awesome_app.com</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim /etc/nginx/sites-available/my-awesome-app.com
</span></code></pre></td></tr></table></div></figure>


<p>Paste in the following code. Note that <strong>you will need to change the IP Address of your server on line 6 and the Domain name on line 7 to match with your server config</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>upstream my_awesome_app <span class="o">{</span>
</span><span class='line'>  server 127.0.0.1:4000<span class="p">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>server <span class="o">{</span>
</span><span class='line'>  listen xx.xx.xx.xx:80<span class="p">;</span>
</span><span class='line'>  server_name app-url.com app-url.com<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  try_files <span class="nv">$uri</span>/index.html <span class="nv">$uri</span> @my_awesome_app<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  location @my_awesome_app <span class="o">{</span>
</span><span class='line'>    proxy_set_header Host <span class="nv">$http_host</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span>!-f <span class="nv">$request_filename</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      proxy_pass http://my_awesome_app<span class="p">;</span>
</span><span class='line'>      <span class="nb">break</span><span class="p">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  error_page <span class="m">500</span> <span class="m">502</span> <span class="m">503</span> <span class="m">504</span> /500.html<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  access_log  /var/log/nginx/my_awesome_app.log<span class="p">;</span>
</span><span class='line'>  error_log  /var/log/nginx/my_awesome_app.log<span class="p">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I leave the default port 4000 on my phoenix configuration. But you can change it inside your <code>config/prod.exs</code></p>

<p>Then link this file to the same file name in <code>/etc/nginx/sites-enabled</code>. Note that by using <code>ln</code> command, source file always come first.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo ln -nfs /etc/nginx/sites-available/my-awesome-app.com <span class="se">\</span>
</span><span class='line'>             /etc/nginx/sites-enabled/my-awesome-app.com
</span></code></pre></td></tr></table></div></figure>


<p>Test the nginx config:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo /etc/init.d/nginx configtest
</span></code></pre></td></tr></table></div></figure>


<p>If everything is okay, restart the nginx server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo /etc/init.d/nginx restart
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>Now after so many steps, finally I can enjoy my small victory by visiting the site and see it has been deployed up :-)</p>

<p><img class="center" src="http://learnelixir.com/images/deploy_app_to_server/ubuntu.png" width="800" height="509" title="image" alt="images"></p>

<p>Happy Deploying!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy Phonenix Application to Heroku]]></title>
    <link href="http://learnelixir.com/blog/2014/10/15/deploy-phonenix-application-to-heroku-server/"/>
    <updated>2014-10-15T23:16:00+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/15/deploy-phonenix-application-to-heroku-server</id>
    <content type="html"><![CDATA[<p>Phoenix is a pretty cool web framework for Elixir. However, up to date, there are still very few resources on how to deploy a Phoenix application to a web server. I tried to google on how to deploy but could not find any tutorials that provide very clear and exact steps. Hence, in this article, let walkthrouh step by step how to do that with a heroku server.</p>

<!-- more -->


<h3>Create an awesome Phoenix application</h3>

<p>From phoenix installation folder, run the following command. You can name it any name as long as you remember to use the same app name in subsequent steps.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix phoenix.new my_awesome_app ../
</span></code></pre></td></tr></table></div></figure>


<p>Enter this new application folder and install all the dependencies</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ../my_awesome_app
</span><span class='line'>mix <span class="k">do</span> deps.get, compile
</span></code></pre></td></tr></table></div></figure>


<p>This is a miminal number of steps to setup a phoenix application. Eventually, you will need to add more code to build it up. Moving forward, let&rsquo;s deploy this application.</p>

<p>Here are the steps to deploy to Heroku server</p>

<h4>Step 1: Run git init</h4>

<p>Pretty straight forward. Just run this command in your application folder</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git init
</span></code></pre></td></tr></table></div></figure>


<h4>Step 2: Create the heroku application</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>heroku apps:create
</span><span class='line'>Creating enigmatic-tor-2697... <span class="k">done</span>, stack is cedar
</span><span class='line'>http://enigmatic-tor-2697.herokuapp.com/ <span class="p">|</span> git@heroku.com:enigmatic-tor-2697.git
</span><span class='line'>Git remote heroku added
</span></code></pre></td></tr></table></div></figure>


<p>After this command, Heroku will provide me a URL for my heroku app. But there is nothing there yet. Also, do note down the name, we will use it later. Mine is <code>enigmatic-tor-2697</code>. Let&rsquo;s move to next step</p>

<h4>Step 3: Add buildback to your app</h4>

<p>Run a heroku config:set command as following</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>heroku config:set <span class="se">\ </span>
</span><span class='line'><span class="nv">BUILDPACK_URL</span><span class="o">=</span>https://github.com/HashNuke/heroku-buildpack-elixir.git -a enigmatic-tor-2697
</span></code></pre></td></tr></table></div></figure>


<h4>Step 4: Set mix environment config</h4>

<p>You can choose to set mix environment to be staging or production at this step. Here I choose to run my app using production environment:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku config:set <span class="nv">MIX_ENV</span><span class="o">=</span>prod
</span></code></pre></td></tr></table></div></figure>


<p>After this, you will need to modify some of the config file in this Phoenix application. Let&rsquo;s move to step 5</p>

<h4>Step 5: Edit Procfile</h4>

<p>Create file <code>Procfile</code> inside the root of your application folder with the following content</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>web: yes <span class="p">|</span> mix compile.protocols <span class="o">&amp;&amp;</span> elixir -pa _build/prod/consolidated -S mix phoenix.start
</span></code></pre></td></tr></table></div></figure>


<p>If in step4, you have specified staging environment, you will need to use the folder <code>_build/staging/consolidated</code> for the <code>-pa</code> option here.</p>

<h4>Step 6: Edit elixir_buildpack.config</h4>

<p>Create file <code>elixir_buildback.config</code> inside the root of your application folder with the following content</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">erlang_version</span><span class="o">=</span>17.2
</span><span class='line'><span class="nv">elixir_version</span><span class="o">=</span>1.0.0
</span><span class='line'><span class="nv">always_build_deps</span><span class="o">=</span><span class="nb">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>You are free to change to the approriate version of erlang and elixir</p>

<h4>Step 7: Commit everything and push</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git add . <span class="o">&amp;&amp;</span> git commit -am <span class="s2">&quot;initial commit&quot;</span>
</span><span class='line'><span class="nv">$ </span>git push heroku master
</span></code></pre></td></tr></table></div></figure>


<p>It can be quite slow in this first time pushing to heroku master as there is a need to compile all the elixir depenencies on Heroku server, but subsequently it will be quite fast. Now I go to <code>http://enigmatic-tor-2697.herokuapp.com/</code> and hooray the phoenix home page is there</p>

<p><img class="center" src="http://learnelixir.com/images/deploy_app_to_server/heroku.png" width="800" height="509" title="image" alt="images"></p>

<p>In subsequent deploys, you will just need to perform this step - step 7</p>

<p>This has concluded for Heroku deploy. Happy Deploying :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spawn Process and Concurrency in Elixir]]></title>
    <link href="http://learnelixir.com/blog/2014/10/14/spawn-process-and-concurrency-in-elixir/"/>
    <updated>2014-10-14T23:36:28+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/14/spawn-process-and-concurrency-in-elixir</id>
    <content type="html"><![CDATA[<p>Concurrency in Elixir can be achieved by using 3 things. They are <strong>spawning process</strong>, <strong>sending messages</strong> and <strong>receiving messages</strong>. Let&rsquo;s look at how we can spawn a new process in Elixir</p>

<!-- more -->


<h3>Spawning Process</h3>

<p>To spawn a new process in Elixir, we will first need to define a function and call <code>spawn</code>. This function can be an anonymous function or a function defined in a module.</p>

<h4>Spawn process from Anonymous function</h4>

<p>For instance, if we have:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">fun</span> <span class="p">=</span> <span class="k">fn</span> <span class="p">-&gt;</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">end</span>
</span><span class='line'><span class="c1">#Function&lt;20.90072148/0 in :erl_eval.expr/5&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can then call spawn on this function</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">pid</span> <span class="p">=</span> <span class="n">spawn</span><span class="p">(</span><span class="n">fun</span><span class="p">)</span>
</span><span class='line'><span class="c1">#PID&lt;0.56.0&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>spawn</code> function will return you a <code>PID</code> struct with pid number of the spawn process inside. This process is then by killed by itself after finish running.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Process</span><span class="p">.</span><span class="n">alive?</span><span class="p">(</span><span class="n">pid</span><span class="p">)</span>
</span><span class='line'><span class="no">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another way to spawn is calling spawn/3 a function defined in <code>defmodule</code>. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">Fib</span> <span class="k">do</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fib</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fib</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">pid</span> <span class="p">=</span> <span class="n">spawn</span><span class="p">(</span><span class="nc">Fib</span><span class="p">,</span> <span class="ss">:fib</span><span class="p">,</span> <span class="p">[</span><span class="mi">10</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first argument is the module name, second argument is function name and the last argument is the list of the arguments. Later we will see how this <code>spawn</code> can be used. Before that, let move on to how to send a message to a process.</p>

<h4>Sending Messages</h4>

<p>We can send a message to a running process in Elixir. The most obvious example is sending a message to the process running your <code>iex</code>. The <code>iex</code> is actually a process itself and when we call <code>self()</code>, it will return the PID number:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">self_pid</span> <span class="p">=</span> <span class="n">self</span><span class="p">()</span>
</span><span class='line'><span class="c1">#PID&lt;0.53.0&gt;</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Process</span><span class="p">.</span><span class="n">alive?</span><span class="p">(</span><span class="n">self_pid</span><span class="p">)</span>
</span><span class='line'><span class="no">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since the process is alive, we can send a message to this process by triggering <code>send/2</code> function</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">send</span> <span class="n">self</span><span class="p">(),</span> <span class="p">{</span><span class="ss">:any</span><span class="p">,</span> <span class="s2">&quot;message&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>send</code> takes 2 argument, the first one is the PID of the process that you would like to send the message to and the second argument is the message in a form of a tuple. It can be any tuple.</p>

<h3>Receiving Messages</h3>

<p>Receiving messages in Elixir can be called anywhere after the <code>send</code> command is triggered. When a message is sent to a process, the message is stored in that process <strong>mailbox</strong> and waits there. When <code>receive</code> function is called, that message will then be retrieved.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">send</span> <span class="n">self</span><span class="p">(),</span> <span class="p">{</span><span class="ss">:any</span><span class="p">,</span> <span class="s2">&quot;message&quot;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="ss">:any</span><span class="p">,</span> <span class="s2">&quot;message&quot;</span><span class="p">}</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="k">receive</span> <span class="k">do</span>
</span><span class='line'>       <span class="p">{</span><span class="ss">:any</span><span class="p">,</span> <span class="s2">&quot;message&quot;</span><span class="p">}</span> <span class="p">-&gt;</span> <span class="s2">&quot;We have received a message&quot;</span>
</span><span class='line'>     <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>How these 3 things <strong>spawn processes</strong>, <strong>sending messages</strong> and <strong>receiving messages</strong> can work together? Let&rsquo;s take a look at the following code to generate a fibonacci number by supplying a sequence number</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">Fib</span> <span class="k">do</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fib</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fib</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>After we defined this module <code>Fib</code>, we can just call:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Fib</span><span class="p">.</span><span class="n">fib</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="mi">55</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, let make Fib module a bit more interesting by making use of the <strong>spawn processes</strong>, <strong>sending messages</strong> and <strong>receiving messages</strong>. Let define a new module called CFib</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">CFib</span> <span class="k">do</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fib</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fib</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now in <code>fib(n)</code> function definition, instead of just calling the the calculation on <code>n - 1</code> and <code>n - 2</code>, we will make these 2 calculations as 2 processes running concurrently.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">def</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">calculate_fib</span> <span class="p">=</span> <span class="k">fn</span> <span class="n">n</span> <span class="p">-&gt;</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="k">end</span>
</span><span class='line'>  <span class="n">spawn</span><span class="p">(</span><span class="bp">__MODULE__</span><span class="p">,</span> <span class="ss">:fib_at_child</span><span class="p">,</span> <span class="p">[</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">calculate_fib</span><span class="p">,</span> <span class="n">self</span><span class="p">])</span>
</span><span class='line'>  <span class="n">spawn</span><span class="p">(</span><span class="bp">__MODULE__</span><span class="p">,</span> <span class="ss">:fib_at_child</span><span class="p">,</span> <span class="p">[</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="n">calculate_fib</span><span class="p">,</span> <span class="n">self</span><span class="p">])</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">def</span> <span class="n">fib_at_child</span><span class="p">(</span><span class="n">sequence</span><span class="p">,</span> <span class="n">func</span><span class="p">,</span> <span class="n">parent</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">send</span> <span class="n">parent</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span><span class="p">,</span> <span class="n">func</span><span class="p">.(</span><span class="n">sequence</span><span class="p">)]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Inside <code>fib</code> function, we have spawned 2 processes for function <code>fib_at_child</code> with arguments <code>n - 1</code> and <code>n - 2</code> respectively, the anonymous function to calculate fibonacci based on a sequence number and the parent process itself. We have also defined an extra function call <code>fib_at_child</code> which will be used to execute the function on the sequence number and send back the result of the calculation back to the parent process. Take note that the function <code>fib_at_child</code> now is running at the child process instead of the parent process. That is the reason why we will need to use <code>send</code> function to send back the result to parent.</p>

<p>The last step is to receive the result at the original process and add the two results</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">def</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">calculate_fib</span> <span class="p">=</span> <span class="k">fn</span> <span class="n">n</span> <span class="p">-&gt;</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="k">end</span>
</span><span class='line'>  <span class="n">first_pid</span> <span class="p">=</span> <span class="n">spawn</span><span class="p">(</span><span class="bp">__MODULE__</span><span class="p">,</span> <span class="ss">:fib_at_child</span><span class="p">,</span> <span class="p">[</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">calculate_fib</span><span class="p">,</span> <span class="n">self</span><span class="p">])</span>
</span><span class='line'>  <span class="n">second_pid</span> <span class="p">=</span> <span class="n">spawn</span><span class="p">(</span><span class="bp">__MODULE__</span><span class="p">,</span> <span class="ss">:fib_at_child</span><span class="p">,</span> <span class="p">[</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="n">calculate_fib</span><span class="p">,</span> <span class="n">self</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fib_of_n_1</span> <span class="p">=</span> <span class="k">receive</span> <span class="ss">do</span><span class="p">:</span> <span class="p">{</span><span class="o">^</span><span class="n">first_pid</span><span class="p">,</span> <span class="n">value</span><span class="p">}</span> <span class="p">-&gt;</span> <span class="n">value</span>
</span><span class='line'>  <span class="n">fib_of_n_2</span> <span class="p">=</span> <span class="k">receive</span> <span class="ss">do</span><span class="p">:</span> <span class="p">{</span><span class="o">^</span><span class="n">second_pid</span><span class="p">,</span> <span class="n">value</span><span class="p">}</span> <span class="p">-&gt;</span> <span class="n">value</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fib_of_n_1</span> <span class="o">+</span> <span class="n">fib_of_n_2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">def</span> <span class="n">fib_at_child</span><span class="p">(</span><span class="n">sequence</span><span class="p">,</span> <span class="n">func</span><span class="p">,</span> <span class="n">parent</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">send</span> <span class="n">parent</span><span class="p">,</span> <span class="p">{</span><span class="n">self</span><span class="p">,</span> <span class="n">func</span><span class="p">.(</span><span class="n">sequence</span><span class="p">)}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here is the complete program of CFib</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">CFib</span> <span class="k">do</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fib</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fib</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">calculate_fib</span> <span class="p">=</span> <span class="k">fn</span> <span class="n">n</span> <span class="p">-&gt;</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="k">end</span>
</span><span class='line'>      <span class="n">first_pid</span> <span class="p">=</span> <span class="n">spawn</span><span class="p">(</span><span class="bp">__MODULE__</span><span class="p">,</span> <span class="ss">:fib_at_child</span><span class="p">,</span> <span class="p">[</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">calculate_fib</span><span class="p">,</span> <span class="n">self</span><span class="p">])</span>
</span><span class='line'>      <span class="n">second_pid</span> <span class="p">=</span> <span class="n">spawn</span><span class="p">(</span><span class="bp">__MODULE__</span><span class="p">,</span> <span class="ss">:fib_at_child</span><span class="p">,</span> <span class="p">[</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="n">calculate_fib</span><span class="p">,</span> <span class="n">self</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">fib_of_n_1</span> <span class="p">=</span> <span class="k">receive</span> <span class="ss">do</span><span class="p">:</span> <span class="p">({</span><span class="o">^</span><span class="n">first_pid</span><span class="p">,</span> <span class="n">value</span><span class="p">}</span> <span class="p">-&gt;</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fib_of_n_2</span> <span class="p">=</span> <span class="k">receive</span> <span class="ss">do</span><span class="p">:</span> <span class="p">({</span><span class="o">^</span><span class="n">second_pid</span><span class="p">,</span> <span class="n">value</span><span class="p">}</span> <span class="p">-&gt;</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">fib_of_n_1</span> <span class="o">+</span> <span class="n">fib_of_n_2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fib_at_child</span><span class="p">(</span><span class="n">sequence</span><span class="p">,</span> <span class="n">func</span><span class="p">,</span> <span class="n">parent</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">send</span> <span class="n">parent</span><span class="p">,</span> <span class="p">{</span><span class="n">self</span><span class="p">,</span> <span class="n">func</span><span class="p">.(</span><span class="n">sequence</span><span class="p">)}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nc">CFib</span><span class="p">.</span><span class="n">fib</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="c1"># 55</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s all for this article. I hope you enjoyed this. Happy coding :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quote and Unquote in Elixir]]></title>
    <link href="http://learnelixir.com/blog/2014/10/13/quote-and-unquote-in-elixir/"/>
    <updated>2014-10-13T22:35:08+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/13/quote-and-unquote-in-elixir</id>
    <content type="html"><![CDATA[<p>Quote and Unquote function in Elixir can be confusing in the beginning. However, once you know them quite well, they can become very handy. In this article, we will look deeper into Quote and Unquote and see how it can help in doing some meta programming.</p>

<!-- more -->


<h3>Quote</h3>

<p>Quote is a function in Elixir which is used to break an expression into an abstract syntax tree (AST). This AST is an internal presentation an expression in a compiler, which will be then used to evaluate the expression to a value. For instance</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="k">quote</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span>
</span><span class='line'><span class="p">{</span><span class="ss">:+</span><span class="p">,</span> <span class="p">[</span><span class="ss">context</span><span class="p">:</span> <span class="nc">Elixir</span><span class="p">,</span> <span class="ss">import</span><span class="p">:</span> <span class="nc">Kernel</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the expression <code>1 + 2</code> is presented as a tuple of 3 elements in Elixir compiler:</p>

<ul>
<li>A symbol of plus sign (<code>:+</code>) or can be called the function name</li>
<li>A keyword list containing meta data (<code>[context: Elixir, import: Kernel]</code>)</li>
<li>The argument list (<code>[1, 2]</code>)</li>
</ul>


<p>Ignoring the keyword list containing meta data, it can be understood as an abstract syntax tree, where the function name is the root node and the 2 arguments are the leaves of the tree</p>

<p><img class="center" src="http://learnelixir.com/images/quote_and_unquote/ast1.png" width="250" height="250" title="image" alt="images"></p>

<p>If now we try on a more complex expression <code>1 + 2 * 3</code>, it will present a more complex abstract syntax tree</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="k">quote</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="mi">3</span>
</span><span class='line'><span class="p">{</span><span class="ss">:+</span><span class="p">,</span> <span class="p">[</span><span class="ss">context</span><span class="p">:</span> <span class="nc">Elixir</span><span class="p">,</span> <span class="ss">import</span><span class="p">:</span> <span class="nc">Kernel</span><span class="p">],</span>
</span><span class='line'> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="p">{</span><span class="ss">:*</span><span class="p">,</span> <span class="p">[</span><span class="ss">context</span><span class="p">:</span> <span class="nc">Elixir</span><span class="p">,</span> <span class="ss">import</span><span class="p">:</span> <span class="nc">Kernel</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]}]}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://learnelixir.com/images/quote_and_unquote/ast2.png" width="325" height="400" title="image" alt="images"></p>

<p>When evaluating this expression, Elixir compiler will travel upward starting from the most left leaf. For example, the AST tree above will be evaluated as <code>(2 * 3) + 1</code>.</p>

<p>In order to evaluate a quoted expression Elixir, we need to use <code>Code.eval_quoted</code> function. For instance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Code</span><span class="p">.</span><span class="n">eval_quoted</span><span class="p">(</span><span class="k">quote</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="mi">7</span><span class="p">,</span> <span class="p">[]}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Code.eval_quoted</code> function call returns a tuple of the evaluation value and a map of all variable resulted from the evaluation. 7 in tis case is the value of the evaluation and since there is no variable binding in this case, empty array will be returned.</p>

<p>Quote can be used with function call as well. For instance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="k">quote</span> <span class="ss">do</span><span class="p">:</span> <span class="n">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="ss">:sum</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Quote function is like a function which is used to put an expression between a quote so that it can be used later on.</p>

<p>Next let&rsquo;s try to define some variables and use those in quote body:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">a</span> <span class="p">=</span> <span class="mi">1</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">b</span> <span class="p">=</span> <span class="mi">2</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Code</span><span class="p">.</span><span class="n">eval_quoted</span><span class="p">(</span><span class="k">quote</span> <span class="ss">do</span><span class="p">:</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="o">**</span> <span class="p">(</span><span class="nc">CompileError</span><span class="p">)</span> <span class="n">nofile</span><span class="err">:</span><span class="mi">1</span><span class="err">:</span> <span class="n">undefined</span> <span class="n">function</span> <span class="n">a</span><span class="o">/</span><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>eval_quoted</code> function call will give you an error on undefined function a. This happens because when <code>Code.eval_quoted</code> is called, it does not know any <code>a</code> value, because the a here is not the same variable that we defined outside ealier. In order to refer a variable defined outside quote, unquote function needs to be used</p>

<h3>Unquote</h3>

<p>So here, how it should be written if a variable is referred to outside of the scope of quote:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">a</span> <span class="p">=</span> <span class="mi">1</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">b</span> <span class="p">=</span> <span class="mi">2</span>
</span><span class='line'><span class="n">b</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="k">quote</span> <span class="ss">do</span><span class="p">:</span> <span class="k">unquote</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">+</span> <span class="k">unquote</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="ss">:+</span><span class="p">,</span> <span class="p">[</span><span class="ss">context</span><span class="p">:</span> <span class="nc">Elixir</span><span class="p">,</span> <span class="ss">import</span><span class="p">:</span> <span class="nc">Kernel</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the value of a and b are now evaluated correctly <strong>before</strong> Elixir construct the abstract syntax tree and these values are actually computed at <strong>compiled time</strong> and not <strong>runtime</strong>.  Now, let say, we define a function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">a</span> <span class="p">=</span> <span class="mi">1</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">b</span> <span class="p">=</span> <span class="mi">2</span>
</span><span class='line'><span class="n">b</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">fun</span> <span class="p">=</span> <span class="k">fn</span> <span class="p">-&gt;</span> <span class="k">quote</span> <span class="k">do</span>
</span><span class='line'>   <span class="k">unquote</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">+</span> <span class="k">unquote</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="p">{</span><span class="ss">:+</span><span class="p">,</span> <span class="p">[</span><span class="ss">context</span><span class="p">:</span> <span class="nc">Elixir</span><span class="p">,</span> <span class="ss">import</span><span class="p">:</span> <span class="nc">Kernel</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we try to change <code>a</code> value and call the function again to see if the presentation will change with the new <code>a</code> value:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">a</span> <span class="p">=</span> <span class="mi">10</span>
</span><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">fun</span><span class="p">.</span><span class="n">call</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span><span class="ss">:+</span><span class="p">,</span> <span class="p">[</span><span class="ss">context</span><span class="p">:</span> <span class="nc">Elixir</span><span class="p">,</span> <span class="ss">import</span><span class="p">:</span> <span class="nc">Kernel</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, although a&rsquo;s value is change but the funtioncal representing <code>a + b</code> is still reflecting the original value of a and b.
The way that we use quote and unquote in Elixir can be very creative and dynamic, for instance, we can define like following to play with the real function definition at runtime.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">num1</span> <span class="p">=</span> <span class="mi">5</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">num2</span> <span class="p">=</span> <span class="mi">2</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">perform</span> <span class="p">=</span> <span class="k">fn</span> <span class="n">fun</span> <span class="p">-&gt;</span> <span class="nc">Code</span><span class="p">.</span><span class="n">eval_quoted</span><span class="p">(</span><span class="k">quote</span> <span class="ss">do</span><span class="p">:</span> <span class="k">unquote</span><span class="p">(</span><span class="n">fun</span><span class="p">)(</span><span class="k">unquote</span><span class="p">(</span><span class="n">num1</span><span class="p">),</span> <span class="k">unquote</span><span class="p">(</span><span class="n">num2</span><span class="p">)))</span> <span class="k">end</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">perform</span><span class="p">.(</span><span class="ss">:rem</span><span class="p">)</span> <span class="c1"># calculate remaining of 5 and 2</span>
</span><span class='line'><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="p">[]}</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">perform</span><span class="p">.(</span><span class="ss">:div</span><span class="p">)</span> <span class="c1"># calculate division result of 5 and 2</span>
</span><span class='line'><span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="p">[]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s all for now. I hope you enjoy this article.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ecto vs Active Record]]></title>
    <link href="http://learnelixir.com/blog/2014/10/11/ecto-vs-active-record/"/>
    <updated>2014-10-11T21:37:22+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/11/ecto-vs-active-record</id>
    <content type="html"><![CDATA[<p>This post is about comparing the feature and performance between Elixir&rsquo;s Ecto library - database wrapper and languge integrated query for Elixir and Ruby on Rails Active Record.</p>

<!-- more -->


<h3>Round 1: Database Migration</h3>

<h4>Active Record</h4>

<p>In Ruby on Rails Active Record, we can generate a migration for a model by following these steps:</p>

<h5><em>Step 1</em>: Generate model file and migration file</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rails g model book title:string description:text author:string publisher:string
</span></code></pre></td></tr></table></div></figure>


<p>And the content of the migration file is as following</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateBooks</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:books</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:name</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">text</span> <span class="ss">:description</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:author</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:publisher</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h5><em>Step 2</em>: Create the database</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle <span class="nb">exec </span>rake db:create
</span></code></pre></td></tr></table></div></figure>


<h5><em>Step 3</em>: Run the migration</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake db:migrate
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s all for Active Record</p>

<h4>Ecto</h4>

<p>Assuming that you have already put in <code>ecto</code> and <code>postgrex</code> dependencies and already run <code>mix deps.get</code>, here are the steps:</p>

<h5><em>Step 1</em>: Create Repo file by manually adding web/models/repo.ex file witht the following content</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">BookStoreElixir.Repo</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Ecto.Repo</span><span class="p">,</span> <span class="ss">adapter</span><span class="p">:</span> <span class="nc">Ecto.Adapters.Postgres</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">conf</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">parse_url</span> <span class="s2">&quot;ecto://postgresuser:password@localhost/book_store_elixir&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">priv</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">app_dir</span><span class="p">(</span><span class="ss">:book_store_elixir</span><span class="p">,</span> <span class="s2">&quot;priv/repo&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h5><em>Step 2</em>: Create the Postgres Database</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>createdb book_store_elixir --encoding<span class="o">=</span><span class="s1">&#39;utf-8&#39;</span> --locale<span class="o">=</span>en_US.UTF-8 --template<span class="o">=</span>template0
</span></code></pre></td></tr></table></div></figure>


<h5><em>Step 3</em>: Create model file <code>web/models/book.ex</code> with the following code:</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">BookStoreElixir.Book</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Ecto.Model</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">schema</span> <span class="s2">&quot;books&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">field</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>    <span class="n">field</span> <span class="ss">:description</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>    <span class="n">field</span> <span class="ss">:author</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>    <span class="n">field</span> <span class="ss">:publisher</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h5><em>Step 4</em>: Generate a migration file from terminal</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix ecto.gen.migration BookStoreElixir.Repo create_book
</span></code></pre></td></tr></table></div></figure>


<h5><em>Step 5</em>: Edit the newly generated migration file</h5>

<p>There is a need a type the SQL to create the table here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim priv/repo/migrations/20141011143244_create_book.exs
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">BookStoreElixir.Repo.Migrations.CreateBook</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Ecto.Migration</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">up</span> <span class="k">do</span>
</span><span class='line'>    <span class="s2">&quot;CREATE TABLE books(id serial primary key, title varchar(125), </span>
</span><span class='line'><span class="s2">                  description text, author varchar(255), publisher varchar(255))&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">down</span> <span class="k">do</span>
</span><span class='line'>    <span class="s2">&quot;DROP TABLE books&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h5><em>Step 6</em>: Run the migration file</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix ecto.migrate BookStoreElixir.Repo
</span></code></pre></td></tr></table></div></figure>


<h5><em>Step 7</em>: Add <code>BookStoreElixir.Repo</code> as a worker in line 11 of <code>lib/book_store_elixir.ex</code></h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">BookStoreElixir</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Application</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># See http://elixir-lang.org/docs/stable/elixir/Application.html</span>
</span><span class='line'>  <span class="c1"># for more information on OTP Applications</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">start</span><span class="p">(</span><span class="n">_type</span><span class="p">,</span> <span class="n">_args</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="kn">import</span> <span class="nc">Supervisor.Spec</span><span class="p">,</span> <span class="ss">warn</span><span class="p">:</span> <span class="no">false</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">children</span> <span class="p">=</span> <span class="p">[</span>
</span><span class='line'>      <span class="c1"># Define workers and child supervisors to be supervised</span>
</span><span class='line'>      <span class="n">worker</span><span class="p">(</span><span class="nc">BookStoreElixir.Repo</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">opts</span> <span class="p">=</span> <span class="p">[</span><span class="ss">strategy</span><span class="p">:</span> <span class="ss">:one_for_one</span><span class="p">,</span> <span class="ss">name</span><span class="p">:</span> <span class="nc">BookStoreElixir.Supervisor</span><span class="p">]</span>
</span><span class='line'>    <span class="nc">Supervisor</span><span class="p">.</span><span class="n">start_link</span><span class="p">(</span><span class="n">children</span><span class="p">,</span> <span class="n">opts</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Conclusion for Database Migration:</h5>

<p>Active Record wins as there are fewer number of steps (3 steps in Active Record vs 7 steps in Ecto). Ecto will need to have more mix tasks in order to be more on par with Active Record.</p>

<h3>Round 2: Database CRUD (Create, Read, Update, Delete) operations Syntax</h3>

<h4>1 - Create</h4>

<h5>Active Record</h5>

<p>To create a new record in Active Record, we will use <code>create</code> command on <code>Book</code> model</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="no">Book</span><span class="o">.</span><span class="n">create</span><span class="p">({</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Ruby 1.9 &amp; 2.0&quot;</span><span class="p">,</span> <span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas, with Chad Fowler and Andy Hunt&quot;</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bokshelf&quot;</span><span class="p">,</span> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Ruby is the fastest growing and most exciting dynamic language out there. If you need to get working programs delivered fast, you should add Ruby to your toolbox.&quot;</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Ecto</h5>

<p>To create a new record in Ecto, we will use <code>insert</code> command on Book <code>Repo</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Repo</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Book</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">BookStoreElixir.Repo</span><span class="p">.</span><span class="n">insert</span><span class="p">({</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Ruby 1.9 &amp; 2.0&quot;</span><span class="p">,</span> <span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas, with Chad Fowler and Andy Hunt&quot;</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bokshelf&quot;</span><span class="p">,</span> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Ruby is the fastest growing and most exciting dynamic language out there. If you need to get working programs delivered fast, you should add Ruby to your toolbox.&quot;</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Syntax wise, they are quite similar. Although Active Record code seems to be a bit neater but it can be considered a draw for creation syntax.</p>

<h4>2 - Read</h4>

<h5>Active Record</h5>

<p>In Active Record, you can perform quite an entensive list of queries by using <code>where</code>, <code>order</code>, <code>limit</code>, <code>offset</code>, <code>group</code>, <code>join</code>, <code>having</code>, <code>select</code>, <code>pluck</code>, <code>includes</code>. For instance</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="no">Book</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;title LIKE ?&quot;</span><span class="p">,</span> <span class="s2">&quot;%Programming%&quot;</span><span class="p">)</span> <span class="p">\</span>
</span><span class='line'>         <span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="ss">:desc</span><span class="p">)</span> <span class="p">\</span>
</span><span class='line'>         <span class="o">.</span><span class="n">limit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">\</span>
</span><span class='line'>         <span class="o">.</span><span class="n">offset</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">\</span>
</span><span class='line'>         <span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="s2">&quot;id&quot;</span><span class="p">)</span> <span class="p">\</span>
</span><span class='line'>         <span class="o">.</span><span class="n">having</span><span class="p">(</span><span class="s2">&quot;books.id &gt;= 1&quot;</span><span class="p">)</span> <span class="p">\</span>
</span><span class='line'>         <span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span> <span class="p">\</span>
</span><span class='line'>         <span class="o">.</span><span class="n">pluck</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty amazing that Active Record can do chaining in combine into 1 single query.</p>

<h5>Ecto</h5>

<p>There are 2 types of writing Query in Ecto</p>

<ul>
<li><em>First Way</em>: Using query syntax provide by Ecto</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Book</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Repo</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">import</span> <span class="nc">Ecto.Query</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">from</span> <span class="n">book</span> <span class="ow">in</span> <span class="nc">BookStoreElixir.Book</span><span class="p">,</span> <span class="ss">select</span><span class="p">:</span> <span class="n">book</span><span class="p">.</span><span class="n">id</span><span class="p">,</span> <span class="err">\</span>
</span><span class='line'>                                        <span class="ss">where</span><span class="p">:</span> <span class="n">like</span><span class="p">(</span><span class="n">book</span><span class="p">.</span><span class="n">title</span><span class="p">,</span> <span class="s2">&quot;%Programming%&quot;</span><span class="p">),</span> <span class="err">\</span>
</span><span class='line'>                                        <span class="ss">order_by</span><span class="p">:</span> <span class="p">[</span><span class="ss">desc</span><span class="p">:</span> <span class="n">book</span><span class="p">.</span><span class="n">id</span><span class="p">],</span> <span class="err">\</span>
</span><span class='line'>                                        <span class="ss">limit</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="err">\</span>
</span><span class='line'>                                        <span class="ss">offset</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="err">\</span>
</span><span class='line'>                                        <span class="ss">group_by</span><span class="p">:</span> <span class="n">book</span><span class="p">.</span><span class="n">id</span><span class="p">,</span> <span class="err">\</span>
</span><span class='line'>                                        <span class="ss">having</span><span class="p">:</span> <span class="n">book</span><span class="p">.</span><span class="n">id</span> <span class="o">&gt;=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><em>Second Way</em>: Using chaining by utilising Elixir Pipe will make query just like Active Record:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Book</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Repo</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">import</span> <span class="nc">Ecto.Query</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">query</span> <span class="p">=</span> <span class="nc">Book</span> <span class="o">|&gt;</span> <span class="n">select</span><span class="p">([</span><span class="n">book</span><span class="p">],</span> <span class="n">book</span><span class="p">.</span><span class="n">id</span><span class="p">)</span> <span class="err">\</span>
</span><span class='line'>                  <span class="o">|&gt;</span> <span class="n">where</span><span class="p">([</span><span class="n">book</span><span class="p">],</span> <span class="n">like</span><span class="p">(</span><span class="n">book</span><span class="p">.</span><span class="n">title</span><span class="p">,</span> <span class="s2">&quot;%Programming%&quot;</span><span class="p">))</span> <span class="err">\</span>
</span><span class='line'>                  <span class="o">|&gt;</span> <span class="n">order_by</span><span class="p">([</span><span class="n">book</span><span class="p">],</span> <span class="ss">desc</span><span class="p">:</span> <span class="n">book</span><span class="p">.</span><span class="n">id</span><span class="p">)</span> <span class="err">\</span>
</span><span class='line'>                  <span class="o">|&gt;</span> <span class="n">limit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="err">\</span>
</span><span class='line'>                  <span class="o">|&gt;</span> <span class="n">offset</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="err">\</span>
</span><span class='line'>                  <span class="o">|&gt;</span> <span class="n">group_by</span><span class="p">([</span><span class="n">book</span><span class="p">],</span> <span class="n">book</span><span class="p">.</span><span class="n">id</span><span class="p">)</span> <span class="err">\</span>
</span><span class='line'>                  <span class="o">|&gt;</span> <span class="n">having</span><span class="p">([</span><span class="n">book</span><span class="p">],</span> <span class="n">book</span><span class="p">.</span><span class="n">id</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Syntax wise, both Ecto and Active Record have shown that they are quite expressive in showing the data transformation through a series of query functions. However, Active Record syntax is still considered better in this Round as it is showing an easier approach. Although, the second way of query that we use for Elixir Ecto is pretty closed to Active Record syntax, it still exhibits a more wordy syntax than Active Record. Albeit, Elixir Ecto is using a nice approach by letting programmer to have access to a &ldquo;so called&rdquo; object instance in the query - <code>having[book, book.id &gt;= 1)</code> vs <code>"having("books.id &gt;= 1")</code></p>

<h4>3 - Update</h4>

<h4>Active Record</h4>

<p>To update a record, we will use <code>update_attributes</code> on <code>Book</code> instance</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">book</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">book</span><span class="o">.</span><span class="n">update_attributes</span><span class="p">({</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Ruby9 &amp;ss 2.0 (4th edition)&quot;</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Ecto</h4>

<p>To update a record, we will use <code>`update</code> on <code>BookStoreElixir.Repo</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Book</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Repo</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">book</span> <span class="p">=</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">one</span><span class="p">(</span><span class="nc">Book</span><span class="p">)</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">update</span><span class="p">(%{</span><span class="n">book</span> <span class="p">|</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Ruby9 &amp;ss 2.0 (4th edition)&quot;</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Both Ecto and Active Record have exhibited almost the same level of code when updating a record. Hence, it is a draw.</p>

<h4>4 - Delete</h4>

<h4>Active Record</h4>

<p>To delete a record, we will use <code>destroy</code> on a <code>Book</code> instance</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">book</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">book</span><span class="o">.</span><span class="n">destroy</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Ecto</h4>

<p>To delete a record, we will use <code>delete</code> on <code>BookStoreElixir.repo</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Book</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Repo</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">book</span> <span class="p">=</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">one</span><span class="p">(</span><span class="nc">Book</span><span class="p">)</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="n">book</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Both Ecto and Active Record have exhibited almost the same level of code when delete a record. Hence, it is a draw.</p>

<p>So for this Round 2, Active Record is the <strong>winner</strong> (1 vs 0).</p>

<h3>Round 3: Speed of Creation</h3>

<p>Note that this is tested on my local machine. The result here is just for your reference, and should not be treated as an official benchmark.
I am using Ruby 2.1.2, running on Rails 4.1.4 and Elixir 1.0.0. Both Rails and Elixir application are running with Postgres 9.3.5. For Rails, environment in Rails 4.1.4 has been preloaded with Spring, hence there is a not a need for system to spend time to load the Rails environment. Further more, the Rails code was run with the log mode the same as on production - i.e. no query log was printed out.</p>

<h4>Active Record</h4>

<p>Here is the code inside <code>db/seeds.rb</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># first round 100, second round 10,000, third round 1,000,000</span>
</span><span class='line'><span class="n">number_of_records</span> <span class="o">=</span> <span class="mi">100</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">.</span><span class="n">.number_of_records</span>
</span><span class='line'>  <span class="no">Book</span><span class="o">.</span><span class="n">create</span><span class="p">({</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Book Title </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Description </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Author </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;Publisher </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is how I run it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">time </span>bundle <span class="nb">exec </span>rake db:seed
</span></code></pre></td></tr></table></div></figure>


<p>Here are the results of 3 running rounds (with creating 100, 10,000 records and 1 million records). Each time database drop, creation and migration were performed before hand.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>real0m1.706s
</span><span class='line'>user0m1.401s
</span><span class='line'>sys0m0.229s
</span><span class='line'>
</span><span class='line'>real  0m12.328s
</span><span class='line'>user  0m7.820s
</span><span class='line'>sys 0m1.041s
</span><span class='line'>
</span><span class='line'>real  17m52.272s
</span><span class='line'>user  10m41.534s
</span><span class='line'>sys 1m20.044s
</span></code></pre></td></tr></table></div></figure>


<p>Active Record took <strong>1.706 seconds</strong>,  <strong>12.328 seconds</strong> and a whooping <strong>17 minutes 52.272 seconds</strong> to complete 100, 10,000 and 1 million record creation run.</p>

<h4>Ecto</h4>

<p>I create a file seeds.ex inside the elixir project folder with the following content</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kn">alias</span> <span class="nc">BookStoreElixir.Book</span>
</span><span class='line'><span class="kn">alias</span> <span class="nc">BookStoreElixir.Repo</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># First round 100, second round 10,000, third round 1,000,000</span>
</span><span class='line'><span class="n">number_of_records</span> <span class="p">=</span> <span class="mi">100</span>
</span><span class='line'><span class="n">range</span> <span class="p">=</span> <span class="mi">1</span><span class="p">..</span><span class="mi">100</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="p">&lt;-</span> <span class="n">range</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">book</span> <span class="p">=</span> <span class="p">%</span><span class="nc">Book</span><span class="p">{</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Book Title </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Description </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Author </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;Publisher </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="nc">Repo</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">book</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then run this seeds</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">time </span>mix run seeds.ex
</span></code></pre></td></tr></table></div></figure>


<p>And here is the reusult of 3 runs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>real  0m0.624s
</span><span class='line'>user  0m0.513s
</span><span class='line'>sys 0m0.187s
</span><span class='line'>
</span><span class='line'>real  0m5.109s
</span><span class='line'>user  0m2.459s
</span><span class='line'>sys 0m1.002s
</span><span class='line'>
</span><span class='line'>real  6m15.161s
</span><span class='line'>user  3m19.126s
</span><span class='line'>sys 2m53.117s
</span></code></pre></td></tr></table></div></figure>


<p>Ecto took merely <strong>0.624 seconds</strong>, <strong>5.109 seconds</strong> and <strong>6 minutes 15.161 seconds</strong> to complete the same 3 runs of creation 100, 10,000 and 1 million records.</p>

<p>Here is the chart that shows the performance of Ecto vs Active Record through 3 runs:</p>

<p><img class="center" src="http://learnelixir.com/images/ecto_vs_active_record/creation_chart.png" width="710" height="467" title="image" alt="images"></p>

<p>Ecto is approximately <strong>62%</strong> faster than Active Record. Hence, Ecto is the winner in this round.</p>

<h4>Round 4: Speed of Updating</h4>

<p>We will now run updating on 100, 10,000 and 1 million records in each database each. We will update the records, one by one to have a new book title. As usual, let&rsquo;s start with Active Record first</p>

<h5>Active Record</h5>

<p>Now in my <code>db/seeds.rb</code> file, I will change it like following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Book</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">book</span><span class="o">|</span>
</span><span class='line'>  <span class="n">book</span><span class="o">.</span><span class="n">update_attributes</span><span class="p">({</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;New Book Title </span><span class="si">#{</span><span class="n">book</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And run this file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">time </span>bundle <span class="nb">exec </span>rake db:seed
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>real  0m1.725s
</span><span class='line'>user  0m1.423s
</span><span class='line'>sys 0m0.243s
</span><span class='line'>
</span><span class='line'>real  0m12.414s
</span><span class='line'>user  0m6.936s
</span><span class='line'>sys 0m1.109s
</span><span class='line'>
</span><span class='line'>real  23m30.364s
</span><span class='line'>user  15m22.126s
</span><span class='line'>sys 1m26.698s
</span></code></pre></td></tr></table></div></figure>


<p>Active Record took <strong>1.725 seconds</strong>, <strong>12.414 seconds</strong> and <strong>23 minutes, 30.364 seconds</strong> to update all 100, 10,000 and 1 million records respectively.</p>

<h5>Ecto</h5>

<p>We will change the <code>seeds.ex</code> file to following</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kn">alias</span> <span class="nc">BookStoreElixir.Book</span>
</span><span class='line'><span class="kn">alias</span> <span class="nc">BookStoreElixir.Repo</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># range = 1..10000</span>
</span><span class='line'><span class="c1"># for i &lt;- range do</span>
</span><span class='line'><span class="c1">#  book = %Book{title: &quot;Book Title #{i}&quot;, description: &quot;Description #{i}&quot;, author: &quot;Author #{i}&quot;, publisher: &quot;Publisher #{i}&quot;}</span>
</span><span class='line'><span class="c1">#  Repo.insert(book)</span>
</span><span class='line'><span class="c1"># end</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">book</span> <span class="p">&lt;-</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="nc">Book</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">book</span> <span class="p">=</span> <span class="p">%{</span><span class="n">book</span> <span class="p">|</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;New Book Title </span><span class="si">#{</span><span class="n">book</span><span class="p">.</span><span class="n">id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="nc">Repo</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">book</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Before you can run this file, you will need to do a bit modification on <code>postgrex</code> library as this library is throwing a time out if a query spends more than 5 seconds to complete. <code>Repo.all(Book)</code> will definitely take up more than 5 seconds to load up the entire collection of books into the memory</p>

<p>From the project folder, what I did was edit file <code>deps/ecto/lib/ecto/adapters/postgres.ex</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim deps/ecto/lib/ecto/adapters/postgres.ex
</span></code></pre></td></tr></table></div></figure>


<p>Then search for <code>@timeout 5000</code> and replace by <code>@timeout :infinity</code></p>

<p>Now you can run and time the running time of this file</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">time </span>mix run seeds.ex
</span></code></pre></td></tr></table></div></figure>


<p>Here are the result of 3 runs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>real  0m0.606s
</span><span class='line'>user  0m0.509s
</span><span class='line'>sys 0m0.184s
</span><span class='line'>
</span><span class='line'>real  0m5.495s
</span><span class='line'>user  0m2.515s
</span><span class='line'>sys 0m1.071s
</span><span class='line'>
</span><span class='line'>real  7m12.016s
</span><span class='line'>user  3m49.446s
</span><span class='line'>sys 3m7.004s
</span></code></pre></td></tr></table></div></figure>


<p>Ecto took merely <strong>0.606 seconds</strong>, <strong>5.495 seconds</strong> and <strong>7 minutes, 12 seconds</strong> to update 100, 10,000 records and 1 million records respectively. Apparently, Ecto is the winner.</p>

<p>Here is the chart showing the above elapsed time:</p>

<p><img class="center" src="http://learnelixir.com/images/ecto_vs_active_record/update_chart.png" width="633" height="444" title="image" alt="images"></p>

<h3>Conclusion</h3>

<p>With the fact that Active Record and Ecto each has 2 wons, it is concluded to be a draw between Active Record and Ecto. Ecto seems to be very promising library, which provides a very interesting way to write a database query. The steps to setup and the syntax of Ecto will definitely improve in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Experience Pipe Operator in Elixir]]></title>
    <link href="http://learnelixir.com/blog/2014/10/10/experience-pipe-operator-in-elixir/"/>
    <updated>2014-10-10T21:09:55+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/10/experience-pipe-operator-in-elixir</id>
    <content type="html"><![CDATA[<p>Pipe operator in Elixir is new to me. When I first saw it, I thought it was weird. However, after I read some Elixir code and experience myself, it is quite an interesting thing to use. Here&rsquo;s why:</p>

<!-- more -->


<p>Let start with the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">FunWithNumber</span> <span class="k">do</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">increase</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">double</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="n">n</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, in a common lanugage like Java or Ruby, in order to increase a number and then double it, here is what I will need to write in Elixir:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="nc">ExUnit</span><span class="p">.</span><span class="n">start</span>
</span><span class='line'><span class="kd">defmodule</span> <span class="nc">TestFunWithNumber</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">ExUnit.Case</span>
</span><span class='line'>  <span class="kn">import</span> <span class="nc">FunWithNumber</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">test</span> <span class="s2">&quot;evaluates to 4 if I increase 1 by 1 and double the result&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">assert</span> <span class="n">double</span><span class="p">(</span><span class="n">increase</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span> <span class="o">==</span> <span class="mi">4</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Whereas, using Elixir pipe operator <code>|&gt;</code>, I can write like following and the test should still pass</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">test</span> <span class="s2">&quot;evaluates to 4 if I increase 1 by 1 and double the result using Pipe&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">assert</span> <span class="mi">1</span> <span class="o">|&gt;</span> <span class="n">increase</span> <span class="o">|&gt;</span> <span class="n">double</span> <span class="o">==</span> <span class="mi">4</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Something to take note here is that I am using number <code>1</code> to pipe its value to function <code>increase</code> and then pipe the result returning from increase to <code>double</code> function. It is quite amazing to read the code in this way instead of the original way whereby I have to read code from inside out. With pipe operator, it is a sequence of operations, which the <strong>linput</strong> of previous operation will be <strong>output</strong> of the next operation and so on. It is truly a way to <strong>transform data</strong> via multiple step functions.</p>

<p>You will notice that I do not need to supply any argument to <code>sequence</code> or <code>double</code> function call. It will auto bind all the arguments by itself.</p>

<p>Here is another example, that I pipe a list into two functions</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">ListUtils</span> <span class="k">do</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">select</span><span class="p">([],</span> <span class="n">_guard</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="p">[]</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">select</span><span class="p">([</span><span class="n">head</span> <span class="p">|</span> <span class="n">tail</span><span class="p">],</span> <span class="n">check</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">check</span><span class="p">.(</span><span class="n">head</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="p">[</span><span class="n">head</span> <span class="p">|</span> <span class="n">select</span><span class="p">(</span><span class="n">tail</span><span class="p">,</span> <span class="n">check</span><span class="p">)]</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">select</span><span class="p">(</span><span class="n">tail</span><span class="p">,</span> <span class="n">check</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nc">ExUnit</span><span class="p">.</span><span class="n">start</span>
</span><span class='line'>
</span><span class='line'><span class="kd">defmodule</span> <span class="nc">TestPipeDemo</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">ExUnit.Case</span>
</span><span class='line'>  <span class="kn">import</span> <span class="nc">ListUtils</span>
</span><span class='line'>  <span class="n">test</span> <span class="s2">&quot;Select number divisible by 3 on a sequence&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">list</span> <span class="p">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</span><span class='line'>    <span class="n">is_odd</span> <span class="p">=</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">rem</span><span class="p">(</span><span class="ni">&amp;1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">is_divided_by_3</span> <span class="p">=</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">rem</span><span class="p">(</span><span class="ni">&amp;1</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="p">=</span> <span class="n">list</span> <span class="o">|&gt;</span> <span class="n">select</span><span class="p">(</span><span class="n">is_odd</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">select</span><span class="p">(</span><span class="n">is_divided_by_3</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert</span> <span class="n">result</span> <span class="o">==</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you look at line 21, the list was used to send itself to the first <code>select</code> function then to the second <code>select</code> function.</p>

<p>That&rsquo;s all for this article. We will cover more advanced topic on Pipe on upcoming articles :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anonymous Function in Elixir]]></title>
    <link href="http://learnelixir.com/blog/2014/10/09/anonymous-function-in-elixir/"/>
    <updated>2014-10-09T08:05:11+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/09/anonymous-function-in-elixir</id>
    <content type="html"><![CDATA[<p>This is one of my favorite topic when talking about anonymous function. The reason why is that anonymous function in Elixir is a very simple way to express something without having to turn on a text editor. I can specify an anonymous function right away in an Elixir console and test it straight away. Here&rsquo;s how:</p>

<!-- more -->


<p>From your elixir terminal, you can quickly define an anonymous function like below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">itself</span> <span class="p">=</span> <span class="k">fn</span> <span class="n">n</span> <span class="p">-&gt;</span> <span class="n">n</span> <span class="k">end</span>
</span><span class='line'><span class="c1">#Function&lt;6.90072148/1 in :erl_eval.expr/5&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Anonymous function starts with <code>fn</code> keyword, following by a list of arguments, then the symbol <code>-&gt;</code>, then the expression and ends with an <code>end</code> keyword. You can define an anonymous function with many arguments like below</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">sum</span> <span class="p">=</span> <span class="k">fn</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="p">-&gt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="k">end</span>
</span><span class='line'><span class="c1">#Function&lt;12.90072148/2 in :erl_eval.expr/5&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, in order to call this anonymous function, you will need to use the <code>dot</code> notation. This is a bit different from calling a function defined in <code>defmodule</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">sum</span> <span class="p">=</span> <span class="k">fn</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="p">-&gt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="k">end</span>
</span><span class='line'><span class="c1">#Function&lt;12.90072148/2 in :erl_eval.expr/5&gt;</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">sum</span><span class="p">.(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="mi">15</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some body like me will feel a bit ackward in the beginning when we need to use <code>dot</code> notation to call an anonymous function. However, it is true that this <code>dot</code> notation is used to differentiate between calling a function without any arguments and using a variable.  For instance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">my_self</span> <span class="p">=</span> <span class="k">fn</span> <span class="p">-&gt;</span> <span class="mi">5</span> <span class="k">end</span>
</span><span class='line'><span class="c1">#Function&lt;6.90072148/1 in :erl_eval.expr/5&gt;</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">other_self</span> <span class="p">=</span> <span class="mi">5</span>
</span><span class='line'><span class="mi">5</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">my_self</span><span class="p">.()</span> <span class="c1"># I am calling an anonymous function</span>
</span><span class='line'><span class="mi">5</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">other_self</span> <span class="c1"># I am using a variable</span>
</span><span class='line'><span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>


<p>Like Javascript, function in Elixir is first class citizen. Specifically, this means the language supports passing functions as arguments to other functions, returning them as the values from other functions, and assigning them to variables or storing them in data structures.</p>

<p>So let&rsquo;s see how we can pass a function as an argument to another function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">ListUtils</span> <span class="k">do</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">select</span><span class="p">([],</span> <span class="n">_check</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="p">[]</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">select</span><span class="p">([</span><span class="n">head</span> <span class="p">|</span> <span class="n">tail</span><span class="p">],</span> <span class="n">check</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">check</span><span class="p">.(</span><span class="n">head</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="p">[</span><span class="n">head</span> <span class="p">|</span> <span class="n">select</span><span class="p">(</span><span class="n">tail</span><span class="p">,</span> <span class="n">check</span><span class="p">)]</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">select</span><span class="p">(</span><span class="n">tail</span><span class="p">,</span> <span class="n">check</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">is_odd</span> <span class="p">=</span> <span class="k">fn</span> <span class="n">n</span> <span class="p">-&gt;</span> <span class="n">rem</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">end</span>
</span><span class='line'><span class="nc">ListUtils</span><span class="p">.</span><span class="n">select</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="n">is_odd</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Here is we define a <code>ListUtils</code> module which contains <code>select</code> function to filter based on the argument <code>check</code> function.</li>
<li>On line 12, we define an anonymous function and assign that function to variable <code>is_odd</code>.</li>
<li>On line 13, we pass the <code>is_odd</code> variable (now is bound to the anonymous) as an argument to <code>select</code> function.</li>
<li>You can expect the result returning from the <code>select</code> function call is <code>[1, 3]</code></li>
</ul>


<p>So this is how an anonymous function can be assigned to a variable and passed to another function. In addition, we can directly supply the anonymous function into the function call without first assigning to a variable like below and it still works!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="nc">ListUtils</span><span class="p">.</span><span class="n">select</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="k">fn</span> <span class="n">n</span> <span class="p">-&gt;</span> <span class="n">rem</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">end</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Further more, in Elixir, there is a short hand syntax that can convert the line above into following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="nc">ListUtils</span><span class="p">.</span><span class="n">select</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">rem</span><span class="p">(</span><span class="ni">&amp;1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have transformed the anonymous function from <code>fn n -&gt; rem(n, 2) == 1 end</code> to <code>&amp;(rem(&amp;1, 2) == 1)</code>. In the later case, <code>&amp;1</code> is actually <code>n</code> variable in first case. I usually do not recommend to use this for multiple argument function as it might confuse the reader
. However, it is still readable and understandable for just 1 argument. Anyway, for your information, multiple argument function can be rewritten as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">sum</span> <span class="p">=</span> <span class="k">fn</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="p">-&gt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="k">end</span>
</span><span class='line'><span class="c1"># is equivalent to </span>
</span><span class='line'><span class="n">sum</span> <span class="p">=</span> <span class="o">&amp;</span><span class="p">(</span><span class="ni">&amp;1</span> <span class="o">+</span> <span class="ni">&amp;2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s all for this article. I hope you enjoy this article if you reach this far. Please leave some comments if you have any questions or recommendations :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing With Model in Elixir Phoenix Console]]></title>
    <link href="http://learnelixir.com/blog/2014/10/08/playing-with-model-in-elixir-phoenix-console/"/>
    <updated>2014-10-08T07:20:21+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/08/playing-with-model-in-elixir-phoenix-console</id>
    <content type="html"><![CDATA[<p>You will need to have the source code of this article <a href="http://learnelixir.com/blog/2014/10/04/build-web-app-with-elixir/">http://learnelixir.com/blog/2014/10/04/build-web-app-with-elixir/</a> before being able to follow this article. So basically, after you finish that article, you will have a model Book. Let turn on elixir console to play around with this model. To turn on elixir console with phoenix, type the following command</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>iex -S mix
</span></code></pre></td></tr></table></div></figure>


<p>Now you are inside elixir console mode, let&rsquo;s start with retrieve our first book</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">BookStore.Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nc">BookStore.Books</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: Functional |&gt; Concurrent |&gt; Pragmatic |&gt; Fun&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, we can use <code>BookStore.Repo</code> to retrieve a book. Here is the review of <code>BookStore.Repo</code> code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">BookStore.Repo</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Ecto.Repo</span><span class="p">,</span> <span class="ss">adapter</span><span class="p">:</span> <span class="nc">Ecto.Adapters.Postgres</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">conf</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">parse_url</span> <span class="s2">&quot;ecto://postgresuser:password@localhost/book_store&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">priv</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">app_dir</span><span class="p">(</span><span class="ss">:book_store</span><span class="p">,</span> <span class="s2">&quot;priv/repo&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>From the elixir console, we also can retrieve all books just like what we did in the controller</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">BookStore.Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="nc">BookStore.Books</span><span class="p">)</span>
</span><span class='line'><span class="p">[%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: Functional |&gt; Concurrent |&gt; Pragmatic |&gt; Fun&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir&quot;</span><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, this time round, it returns you an array of Books. Up to this point, I feel a bit annoying every time I need to type <code>BookStore.Books</code>, <code>BookStore.Repo</code>, then I find out that <code>alias</code> in Elixir can help to shorten this syntax by just calling <code>Books</code> and <code>Repo</code>. So now, what you need to do is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStore.Repo</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="nc">Repo</span>
</span><span class='line'><span class="no">nil</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStore.Books</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="nc">Books</span>
</span></code></pre></td></tr></table></div></figure>


<p>By default <code>alias</code>, if you call <code>alias</code> without supplying <code>as</code>, it will automatically set the alias to the last part of the module name. Hence in this case, you can just simply call</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStore.Repo</span>
</span><span class='line'><span class="no">nil</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStore.Books</span>
</span><span class='line'><span class="no">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now, it will be much pleasure to write the command in the console</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="nc">Books</span><span class="p">)</span>
</span><span class='line'><span class="p">[%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: Functional |&gt; Concurrent |&gt; Pragmatic |&gt; Fun&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir&quot;</span><span class="p">}]</span>
</span><span class='line'>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nc">Books</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: Functional |&gt; Concurrent |&gt; Pragmatic |&gt; Fun&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, you can assign a book from the database call inside the console:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">book</span> <span class="p">=</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">books</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: Functional |&gt; Concurrent |&gt; Pragmatic |&gt; Fun&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">book</span><span class="p">.</span><span class="n">author</span>
</span><span class='line'><span class="s2">&quot;Dave Thomas&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">book</span><span class="p">.</span><span class="n">description</span>
</span><span class='line'><span class="s2">&quot;Programming Elixir: Functional |&gt; Concurrent |&gt; Pragmatic |&gt; Fun&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To update this book, you will need to reassign the book with itself plus the updated properties and let <code>Repo</code> handle the update by calling <code>update</code> function on Repor</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span>  <span class="n">book</span> <span class="p">=</span> <span class="p">%{</span><span class="n">book</span> <span class="p">|</span> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: a lot more fun&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir with fun&quot;</span><span class="p">}</span>
</span><span class='line'><span class="p">%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: a lot more fun&quot;</span><span class="p">,</span> <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir with fun&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">book</span><span class="p">)</span>
</span><span class='line'><span class="ss">:ok</span>
</span><span class='line'>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nc">Books</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: a lot more fun&quot;</span><span class="p">,</span> <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir with fun&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, you also can create a new book by calling <code>insert</code> command on <code>Repo</code>. Pretty straight forward.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">insert</span><span class="p">(%</span><span class="nc">Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Simon St. Laurent, J. David Eisenberg&quot;</span><span class="p">,</span> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Elixir is an excellent language if you want to learn about functional programming, and with this hands-on introduction&quot;</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;O&#39;Reilly&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Introducing Elixir&quot;</span><span class="p">})</span>
</span><span class='line'><span class="p">%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Simon St. Laurent, J. David Eisenberg&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Elixir is an excellent language if you want to learn about functional programming, and with this hands-on introduction&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">id</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;O&#39;Reilly&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Introducing Elixir&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now try to get all books again</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="nc">Books</span><span class="p">)</span>
</span><span class='line'><span class="p">[%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: a lot more fun&quot;</span><span class="p">,</span> <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir with fun&quot;</span><span class="p">},</span>
</span><span class='line'> <span class="p">%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Simon St. Laurent, J. David Eisenberg&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Elixir is an excellent language if you want to learn about functional programming, and with this hands-on introduction&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;O&#39;Reilly&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Introducing Elixir&quot;</span><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note this book is created with id <code>2</code>. Now we can delete this book by calling <code>delete</code> command on <code>Repo</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">introducing_elixir_book</span> <span class="p">=</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nc">Books</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="p">%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Simon St. Laurent, J. David Eisenberg&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Elixir is an excellent language if you want to learn about functional programming, and with this hands-on introduction&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;O&#39;Reilly&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Introducing Elixir&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="n">introducing_elixir_book</span><span class="p">)</span>
</span><span class='line'><span class="ss">:ok</span>
</span></code></pre></td></tr></table></div></figure>


<p>Retrieving all books again, you will see the deleted book is really deleted.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="nc">Books</span><span class="p">)</span>
</span><span class='line'><span class="p">[%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: Functional |&gt; Concurrent |&gt; Pragmatic |&gt; Fun&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir&quot;</span><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s all for this article. I really hope you enjoy it. These basic command on the model will play a very important role when you need to build a RESTful controller, which will be cover in the near future article :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Have Fun With Pattern Matching in Elixir]]></title>
    <link href="http://learnelixir.com/blog/2014/10/07/have-fun-with-pattern-matching-in-elixir/"/>
    <updated>2014-10-07T22:28:03+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/07/have-fun-with-pattern-matching-in-elixir</id>
    <content type="html"><![CDATA[<p>In this article, we will look deeper into pattern matching in Elixir. Coming from prologue background, I think pattern matching is quite a fun thing to do. Prologue is a too hard core language for this kind of thing, whereas Elixir is mixing just well between normal programming language and pattern matching&hellip;</p>

<!-- more -->


<p>First, let&rsquo;s look at the very basic pattern matching in Elixir:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">variable</span> <span class="p">=</span> <span class="mi">1</span>
</span><span class='line'><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>In a common programming language like Ruby or Java, this is simple an assignment. However, in Elixir, this assignment operator is called the match operator. Here is why</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">variable</span> <span class="p">=</span> <span class="mi">1</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="mi">1</span> <span class="p">=</span> <span class="n">variable</span>
</span><span class='line'><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Ruby or Java, the expression <code>1 = variable</code> will give you a syntax error because 1 cannot be assigned to a variable. But in Elixir, it is just fine, because 1 and variable are matching in value. However, you cannot match an undefined variable with a number when the variable in on the right hand side</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="mi">2</span> <span class="p">=</span> <span class="n">x</span>
</span><span class='line'><span class="o">**</span> <span class="p">(</span><span class="nc">RuntimeError</span><span class="p">)</span> <span class="n">undefined</span> <span class="ss">function</span><span class="p">:</span> <span class="n">x</span><span class="o">/</span><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Without pre-definining <code>x</code> variable, Elixir will think that you are trying to call a function <code>x</code> (<code>x/0</code>) without any argument. Now, let&rsquo;s go further to matching few variables at the same time</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">]</span> <span class="p">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">a</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">b</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">c</span>
</span><span class='line'><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>After this matching operation, <code>a</code>, <code>b</code> and <code>c</code> will have value <code>1</code>, <code>2</code> and <code>3</code> respectively. This is extremely useful when you need to assign a list of variables or when you return a function as a tuple. We can now go a bit further by first trying to understand a definition of a list:</p>

<p><strong>A list is a series of element which can have 0 elements.</strong></p>

<p>So based on this definition, I can write a list as following</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>a list is <span class="o">[]</span> <span class="c"># empty list</span>
</span><span class='line'><span class="c"># or</span>
</span><span class='line'>a list is <span class="o">[</span>element1, element2, element3, element4, etc...<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first is easy to understand, a list can be empty. The second list basically shows that it can have many elements, which can be understood that a list is combined from <code>element1</code> and the rest of the element:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>list is <span class="o">[</span>element1, and the remaining<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>In mathematics, we can say</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">list</span> <span class="o">=</span> <span class="o">[</span>head <span class="p">|</span> tail<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where <code>head</code> is <code>element1</code> and <code>tail</code> is the remaining. So now we apply this into Elixir pattern matching</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">list</span> <span class="p">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="p">[</span><span class="n">head</span> <span class="p">|</span> <span class="n">tail</span><span class="p">]</span> <span class="p">=</span> <span class="n">list</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because of patter matching, <code>head</code> is now carrying value <code>1</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">head</span>
</span><span class='line'><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>And tail is now carrying the remaining of the list which is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">tail</span>
</span><span class='line'><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So if we want to get our all elements of this list, we can just simply continue to assign like following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="p">[</span><span class="n">head1</span> <span class="p">|</span> <span class="n">tail1</span><span class="p">]</span> <span class="p">=</span> <span class="n">tail</span>
</span><span class='line'><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">head1</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="n">iex</span><span class="o">&gt;</span> <span class="n">tail1</span>
</span><span class='line'><span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So on so forth we will be able to extract every single element of this list using pattern matching. You can note that we never talk about a for loop, yet we still can go through the loop easily using Pattern Matching.</p>

<p>The applications of pattern matching is endless, but I am going to show you a classic pattern matching by trying to calculate a sum of a list.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">Utils</span> <span class="k">do</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">sum</span><span class="p">([]),</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">sum</span><span class="p">([</span><span class="n">head</span> <span class="p">|</span> <span class="n">tail</span><span class="p">]),</span> <span class="ss">do</span><span class="p">:</span> <span class="n">head</span> <span class="o">+</span> <span class="n">sum</span><span class="p">(</span><span class="n">tail</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nc">Utils</span><span class="p">.</span><span class="n">sum</span><span class="p">([])</span> <span class="c1"># return 0</span>
</span><span class='line'><span class="nc">Utils</span><span class="p">.</span><span class="n">sum</span><span class="p">([</span><span class="mi">9</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">6</span><span class="p">])</span> <span class="c1"># returns 30</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s go through quickly how this work:</p>

<ul>
<li>On line 2, we definied a sum function for an empty list (pattern matching an empty list in sum function&rsquo;s argument) and return 0.</li>
<li>On line 3, we defined another sum function but with a non empty list, this function then returns the result as the value of <code>head</code> + the sum of the remaining inside the list (<code>sum(tail)</code>). It is actually a recursion by calling the function itself in its evaluation.</li>
</ul>


<p>So by now you should have a basic understanding how Elixir pattern matching works. Eventually, you will see more and more this type of pattern matching throughout Elixir Programming.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic Testing With Elixir]]></title>
    <link href="http://learnelixir.com/blog/2014/10/06/basic-testing-with-elixir/"/>
    <updated>2014-10-06T22:31:16+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/06/basic-testing-with-elixir</id>
    <content type="html"><![CDATA[<p>In this article, we will go through some basic testing syntax with elixir. Elixir is a language that very well supports unit test and I totally love it when I first see it on the video. Let&rsquo;s start by writing a simple assertion</p>

<!--more-->


<p>You can use your favorite editor to edit an <code>.ex</code> file. In my case, I create a test folder and edit my <code>sample.ex</code> inside</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir <span class="nb">test</span>
</span><span class='line'><span class="nv">$ </span>vim <span class="nb">test</span>/sample.ex
</span></code></pre></td></tr></table></div></figure>


<p>Now, inside this <code>sample.ex</code>, I can immediately write my first assertion like below</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="nc">ExUnit</span><span class="p">.</span><span class="n">start</span>
</span><span class='line'>
</span><span class='line'><span class="kd">defmodule</span> <span class="nc">TestIt</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">ExUnit.Case</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">test</span> <span class="s2">&quot;1 + 1 is 2&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">assert</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">==</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the test case can be written in a very simple manner. It starts with <code>ExUnit.start</code> and then make use of <code>ExUnit.Case</code> in <code>use ExUnit.Case</code></p>

<p>You can then run this file by this command</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>elixir sample.ex
</span><span class='line'>.
</span><span class='line'>
</span><span class='line'>Finished in 0.03 seconds <span class="o">(</span>0.03s on load, 0.00s on tests<span class="o">)</span>
</span><span class='line'><span class="m">1</span> tests, <span class="m">0</span> failures
</span><span class='line'>
</span><span class='line'>Randomized with seed 322828
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s for the start, now we can following a Test Driven Development method (TDD) to develop something basic just for learning purpose. Let&rsquo;s write fibonacci generate.</p>

<p>Giving a sequence number, the program will generate out a fibonacci number. Before we start writing, let&rsquo;s review the definition of fibonacci number</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>fibonacci<span class="o">(</span>0<span class="o">)</span> <span class="o">=</span> 1
</span><span class='line'>fibonacci<span class="o">(</span>1<span class="o">)</span> <span class="o">=</span> 1
</span><span class='line'>fibonacci<span class="o">(</span>n<span class="o">)</span> <span class="o">=</span> fibonacci<span class="o">(</span>n - 1<span class="o">)</span> + fibonacci<span class="o">(</span>n - 2<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this definition in mind, let start by writing the first test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="nc">ExUnit</span><span class="p">.</span><span class="n">start</span>
</span><span class='line'>
</span><span class='line'><span class="kd">defmodule</span> <span class="nc">TestIt</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">ExUnit.Case</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">test</span> <span class="s2">&quot;fibonacci number 0 is 1&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">assert</span> <span class="nc">Sequence</span><span class="p">.</span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run this test and you can expect a failure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>elixir sample.ex
</span><span class='line'>
</span><span class='line'>  1<span class="o">)</span> <span class="nb">test </span>fibonacci number <span class="m">0</span> is <span class="m">1</span> <span class="o">(</span>TestIt<span class="o">)</span>
</span><span class='line'>     sample.ex:6
</span><span class='line'>     ** <span class="o">(</span>UndefinedFunctionError<span class="o">)</span> undefined <span class="k">function</span>: Sequence.fibonacci/1 <span class="o">(</span>module Sequence is not available<span class="o">)</span>
</span><span class='line'>     stacktrace:
</span><span class='line'>       Sequence.fibonacci<span class="o">(</span>0<span class="o">)</span>
</span><span class='line'>       sample.ex:7
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Finished in 0.03 seconds <span class="o">(</span>0.03s on load, 0.00s on tests<span class="o">)</span>
</span><span class='line'><span class="m">1</span> tests, <span class="m">1</span> failures
</span><span class='line'>
</span><span class='line'>Randomized with seed 490020
</span></code></pre></td></tr></table></div></figure>


<p>As you can expect, the failure is because we do not have any module <code>Sequence</code> and function <code>fibonacci</code>. Let go to <code>sample.ex</code> and add in a function fibonacci:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="nc">ExUnit</span><span class="p">.</span><span class="n">start</span>
</span><span class='line'>
</span><span class='line'><span class="kd">defmodule</span> <span class="nc">Sequence</span> <span class="k">do</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">defmodule</span> <span class="nc">TestIt</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">ExUnit.Case</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">test</span> <span class="s2">&quot;fibonacci number 0 is 1&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">assert</span> <span class="nc">Sequence</span><span class="p">.</span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we have <code>fibonacci</code> function in <code>Sequence</code> module, which takes in a number and always return 1. Run the test again</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>elixir sample.ex
</span><span class='line'>.
</span><span class='line'>
</span><span class='line'>Finished in 0.04 seconds <span class="o">(</span>0.04s on load, 0.00s on tests<span class="o">)</span>
</span><span class='line'><span class="m">1</span> tests, <span class="m">0</span> failures
</span><span class='line'>
</span><span class='line'>Randomized with seed 311294
</span></code></pre></td></tr></table></div></figure>


<p>Great! It passed. We are at green state now. We can now refactor a bit to make our source code a bit shorter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="nc">ExUnit</span><span class="p">.</span><span class="n">start</span>
</span><span class='line'>
</span><span class='line'><span class="kd">defmodule</span> <span class="nc">Sequence</span> <span class="k">do</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">defmodule</span> <span class="nc">TestIt</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">ExUnit.Case</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">test</span> <span class="s2">&quot;fibonacci number 0 is 1&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">assert</span> <span class="nc">Sequence</span><span class="p">.</span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I have moved the block inside <code>def fibonacci</code> to become something shorter. In fact, <code>def</code> is a function call in Elixir, which takes in a pattern (<code>fibonacci(n)</code>) and <code>do</code> something. This something needs to be a regular expression.</p>

<p>Now run the test again and you would expect it to pass</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>elixir sample.ex
</span><span class='line'>sample.ex:4: warning: variable n is unused
</span><span class='line'>.
</span><span class='line'>
</span><span class='line'>Finished in 0.04 seconds <span class="o">(</span>0.04s on load, 0.00s on tests<span class="o">)</span>
</span><span class='line'><span class="m">1</span> tests, <span class="m">0</span> failures
</span><span class='line'>
</span><span class='line'>Randomized with seed 999642
</span></code></pre></td></tr></table></div></figure>


<p>You can ignore the warning of unused variable n for now. We will come back to that shortly. Now, let&rsquo;s write some more test cases:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="nc">ExUnit</span><span class="p">.</span><span class="n">start</span>
</span><span class='line'>
</span><span class='line'><span class="kd">defmodule</span> <span class="nc">Sequence</span> <span class="k">do</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">defmodule</span> <span class="nc">TestIt</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">ExUnit.Case</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">test</span> <span class="s2">&quot;fibonacci number 0 is 1&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">assert</span> <span class="nc">Sequence</span><span class="p">.</span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">test</span> <span class="s2">&quot;fibonacci number 1 is 1&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">assert</span> <span class="nc">Sequence</span><span class="p">.</span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">test</span> <span class="s2">&quot;fibonacci number 2 is 2&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">assert</span> <span class="nc">Sequence</span><span class="p">.</span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">test</span> <span class="s2">&quot;fibonacci number 3 is 3&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">assert</span> <span class="nc">Sequence</span><span class="p">.</span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">test</span> <span class="s2">&quot;fibonacci number 4 is 5&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">assert</span> <span class="nc">Sequence</span><span class="p">.</span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">test</span> <span class="s2">&quot;fibonacci number 10 is 89&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">assert</span> <span class="nc">Sequence</span><span class="p">.</span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="o">==</span> <span class="mi">89</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And when run the test, it will fail as expected</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>elixir sample.ex
</span><span class='line'>  1<span class="o">)</span> <span class="nb">test </span>fibonacci number <span class="m">2</span> is <span class="m">2</span> <span class="o">(</span>TestIt<span class="o">)</span>
</span><span class='line'>     sample.ex:18
</span><span class='line'>     Assertion <span class="nv">with</span> <span class="o">==</span> failed
</span><span class='line'>     code: Sequence.fibonacci<span class="o">(</span>2<span class="o">)</span> <span class="o">==</span> 2
</span><span class='line'>     lhs:  1
</span><span class='line'>     rhs:  2
</span><span class='line'>     stacktrace:
</span><span class='line'>       sample.ex:19
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  2<span class="o">)</span> <span class="nb">test </span>fibonacci number <span class="m">3</span> is <span class="m">3</span> <span class="o">(</span>TestIt<span class="o">)</span>
</span><span class='line'>     sample.ex:22
</span><span class='line'>     Assertion <span class="nv">with</span> <span class="o">==</span> failed
</span><span class='line'>     code: Sequence.fibonacci<span class="o">(</span>2<span class="o">)</span> <span class="o">==</span> 2
</span><span class='line'>     lhs:  1
</span><span class='line'>     rhs:  2
</span><span class='line'>     stacktrace:
</span><span class='line'>       sample.ex:23
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  3<span class="o">)</span> <span class="nb">test </span>fibonacci number <span class="m">4</span> is <span class="m">5</span> <span class="o">(</span>TestIt<span class="o">)</span>
</span><span class='line'>     sample.ex:26
</span><span class='line'>     Assertion <span class="nv">with</span> <span class="o">==</span> failed
</span><span class='line'>     code: Sequence.fibonacci<span class="o">(</span>2<span class="o">)</span> <span class="o">==</span> 2
</span><span class='line'>     lhs:  1
</span><span class='line'>     rhs:  2
</span><span class='line'>     stacktrace:
</span><span class='line'>       sample.ex:27
</span><span class='line'>
</span><span class='line'>..
</span><span class='line'>
</span><span class='line'>  4<span class="o">)</span> <span class="nb">test </span>fibonacci number <span class="m">10</span> is <span class="m">89</span> <span class="o">(</span>TestIt<span class="o">)</span>
</span><span class='line'>     sample.ex:30
</span><span class='line'>     Assertion <span class="nv">with</span> <span class="o">==</span> failed
</span><span class='line'>     code: Sequence.fibonacci<span class="o">(</span>10<span class="o">)</span> <span class="o">==</span> 89
</span><span class='line'>     lhs:  1
</span><span class='line'>     rhs:  89
</span><span class='line'>     stacktrace:
</span><span class='line'>       sample.ex:31
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Finished in 0.06 seconds <span class="o">(</span>0.06s on load, 0.00s on tests<span class="o">)</span>
</span><span class='line'><span class="m">6</span> tests, <span class="m">4</span> failures
</span><span class='line'>
</span><span class='line'>Randomized with seed 982355
</span></code></pre></td></tr></table></div></figure>


<p>Now let try to write the code to pass these cases using the definition</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">Sequence</span> <span class="k">do</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="ow">when</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that <code>when n &lt;= 1</code> in the first function definition is Elixir guard conidtion&#8220;. Now, run the test and everything is passed</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>elixir sample.ex
</span><span class='line'>......
</span><span class='line'>
</span><span class='line'>Finished in 0.06 seconds <span class="o">(</span>0.06s on load, 0.00s on tests<span class="o">)</span>
</span><span class='line'><span class="m">6</span> tests, <span class="m">0</span> failures
</span><span class='line'>
</span><span class='line'>Randomized with seed 456516
</span></code></pre></td></tr></table></div></figure>


<p>Since elixir function definition is patterned matching. You also can write as following to match according to the mathematic definition</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">Sequence</span> <span class="k">do</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fibonacci</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fibonacci</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we do not need a guard condition for n in third function as it will match first and second if n is 0 or 1. The function matching is top to bottom. Run the test again</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>elixir sample.ex
</span><span class='line'>......
</span><span class='line'>
</span><span class='line'>Finished in 0.06 seconds <span class="o">(</span>0.06s on load, 0.00s on tests<span class="o">)</span>
</span><span class='line'><span class="m">6</span> tests, <span class="m">0</span> failures
</span><span class='line'>
</span><span class='line'>Randomized with seed 163178
</span></code></pre></td></tr></table></div></figure>


<p>We concluded this article here and hope you have learned and enjoyed the following from Elixir. Thank you for your time</p>

<ul>
<li>TDD in Elixir</li>
<li>ExUnit Test</li>
<li>Function Pattern Matching</li>
<li>Guard Conditions</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Listing App With Elixir, Phoenix, Postgres and Ecto]]></title>
    <link href="http://learnelixir.com/blog/2014/10/05/build-web-app-with-elixir/"/>
    <updated>2014-10-05T23:22:42+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/05/build-web-app-with-elixir</id>
    <content type="html"><![CDATA[<p>In this article, let&rsquo;s go through the process of creating and build a simple web app which lists a set of books using Elixir, Phoenix, Postgres and Ecto. I hope you will enjoy :-)</p>

<!--more-->


<h3>Create Elixir Book Store Project</h3>

<p>From the phoenix installation folder, run the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix phoenix.new book_store ../
</span></code></pre></td></tr></table></div></figure>


<p>Now enter the project folder and get all the dependencies and start the phoenix project:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ../book_store
</span><span class='line'><span class="nv">$ </span>mix <span class="k">do</span> deps.get, compile
</span><span class='line'><span class="nv">$ </span>mix phoenix.start
</span></code></pre></td></tr></table></div></figure>


<p>Open the browser, and go to the url <code>http://localhost:4000</code></p>

<p><img class="left" src="http://learnelixir.com/images/build-web-app-with-elixir/phoenix_page.png" width="800" height="510" title="image" alt="images"></p>

<h3>Add Ecto To The Project</h3>

<p>From the project root folder, open file <code>mix.exs</code>, scroll down to the end of the file, then you will see <code>defp deps do</code> function definition. You will need to add in <code>postgrex</code> and <code>ecto</code> dependencies</p>

<ul>
<li><code>postgrex</code> (<a href="https://github.com/ericmj/postgrex">https://github.com/ericmj/postgrex</a>) is the PostgresSQL driver for Elixir</li>
<li><code>ecto</code> (<a href="https://github.com/elixir-lang/ecto">https://github.com/elixir-lang/ecto</a>) is a database wrapper and language integrated query for Elixir</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defp</span> <span class="n">deps</span> <span class="k">do</span>
</span><span class='line'>  <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:phoenix</span><span class="p">,</span> <span class="s2">&quot;0.4.1&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:cowboy</span><span class="p">,</span> <span class="s2">&quot;~&gt; 1.0.0&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:postgrex</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.5&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:ecto</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.2.0&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the same file, you will also need to update the application function definition to include <code>postgrex</code> and <code>ecto</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">def</span> <span class="n">application</span> <span class="k">do</span>
</span><span class='line'>  <span class="p">[</span>
</span><span class='line'>    <span class="ss">mod</span><span class="p">:</span> <span class="p">{</span> <span class="nc">BookStore</span><span class="p">,</span> <span class="p">[]</span> <span class="p">},</span>
</span><span class='line'>    <span class="ss">applications</span><span class="p">:</span> <span class="p">[</span><span class="ss">:phoenix</span><span class="p">,</span> <span class="ss">:cowboy</span><span class="p">,</span> <span class="ss">:logger</span><span class="p">,</span> <span class="ss">:postgrex</span><span class="p">,</span> <span class="ss">:ecto</span><span class="p">]</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run the following commands in the terminal to get all the dependencies.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix deps.get
</span></code></pre></td></tr></table></div></figure>


<h3>Create A Repo</h3>

<p>A repo is a basic interfacte to a database (which is postgres). Open <code>web/models/repo.ex</code> and add the following code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">BookStore.Repo</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Ecto.Repo</span><span class="p">,</span> <span class="ss">adapter</span><span class="p">:</span> <span class="nc">Ecto.Adapters.Postgres</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">conf</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">parse_url</span> <span class="s2">&quot;ecto://postgresuser:password@localhost/book_store&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">priv</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">app_dir</span><span class="p">(</span><span class="ss">:book_store</span><span class="p">,</span> <span class="s2">&quot;priv/repo&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have defined PostgreSQL connection with a URL format, what you will need to do is to change the <code>postgresuser</code> and <code>password</code> to be the real postgres username and password on your database.</p>

<p>Since we are going to use the migration feature, we will need to have <code>priv</code> function. Inside this function, we will need to specify where is the migration script is saved, which is inside <code>priv/repo</code> directory.</p>

<p>The next step that we must do is to make sure that our Repo module is started with our application, and is supervised. Open <code>lib/book_store.ex</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">BookStore</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Application</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># See http://elixir-lang.org/docs/stable/elixir/Application.html</span>
</span><span class='line'>  <span class="c1"># for more information on OTP Applications</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">start</span><span class="p">(</span><span class="n">_type</span><span class="p">,</span> <span class="n">_args</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="kn">import</span> <span class="nc">Supervisor.Spec</span><span class="p">,</span> <span class="ss">warn</span><span class="p">:</span> <span class="no">false</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">children</span> <span class="p">=</span> <span class="p">[</span>
</span><span class='line'>      <span class="c1"># Define workers and child supervisors to be supervised</span>
</span><span class='line'>      <span class="n">worker</span><span class="p">(</span><span class="nc">BookStore.Repo</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">opts</span> <span class="p">=</span> <span class="p">[</span><span class="ss">strategy</span><span class="p">:</span> <span class="ss">:one_for_one</span><span class="p">,</span> <span class="ss">name</span><span class="p">:</span> <span class="nc">BookStore.Supervisor</span><span class="p">]</span>
</span><span class='line'>    <span class="nc">Supervisor</span><span class="p">.</span><span class="n">start_link</span><span class="p">(</span><span class="n">children</span><span class="p">,</span> <span class="n">opts</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that <code>line 11</code> is the only line that we add inside this file</p>

<p>To make sure that everything is good, let&rsquo;s compile the project:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix compile
</span></code></pre></td></tr></table></div></figure>


<p>Next, let&rsquo;s create the <code>book_store</code> database in postgres</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>createdb book_store
</span></code></pre></td></tr></table></div></figure>


<h3>Create a model</h3>

<p>Create model file <code>web/models/books.ex</code> with the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">BookStore.Books</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Ecto.Model</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">schema</span> <span class="s2">&quot;books&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">field</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>    <span class="n">field</span> <span class="ss">:description</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>    <span class="n">field</span> <span class="ss">:author</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>    <span class="n">field</span> <span class="ss">:publisher</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Generate Migration Script</h3>

<p>We will also need to create a database migration for books model by using the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix ecto.gen.migration BookStore.Repo create_book
</span><span class='line'>Compiled lib/book_store.ex
</span><span class='line'>Compiled web/models/repo.ex
</span><span class='line'>Generated book_store.app
</span><span class='line'>* creating priv/repo/migrations
</span><span class='line'>* creating priv/repo/migrations/20141005013526_create_book.exs
</span></code></pre></td></tr></table></div></figure>


<p>Now open the just generated migration file <code>priv/repo/migrations/20141005013526_create_book.exs</code> and change with the following code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">BookStore.Repo.Migrations.CreateBook</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Ecto.Migration</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">up</span> <span class="k">do</span>
</span><span class='line'>    <span class="p">[</span><span class="s2">&quot;CREATE TABLE books(id serial primary key, title varchar(125), description text, author varchar(255), publisher varchar(255))&quot;</span><span class="p">,</span>
</span><span class='line'>     <span class="s2">&quot;INSERT INTO books(title, description, author, publisher) VALUES (&#39;Programming Elixir&#39;, &#39;Programming Elixir: Functional |&gt; Concurrent |&gt; Pragmatic |&gt; Fun&#39;, &#39;Dave Thomas&#39;, &#39;The Pragmatic Bookshelf&#39;)&quot;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">down</span> <span class="k">do</span>
</span><span class='line'>    <span class="s2">&quot;DROP TABLE books&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Inside this migration file, you will see up and down function. <code>up</code> function is run when you run the database migration, <code>down</code> function is run when you revert or rollback this database migration</p>

<p>Now run the migration</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix ecto.migrate BookStore.Repo
</span><span class='line'>* running UP _build/dev/lib/book_store/priv/repo/migrations/20141005013526_create_book.exs<span class="sb">``</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Create A Query</h3>

<p>Create <code>web/models/queries.ex</code> folder.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">BookStore.Queries</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">import</span> <span class="nc">Ecto.Query</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">books_query</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">query</span> <span class="p">=</span> <span class="n">from</span> <span class="n">book</span> <span class="ow">in</span> <span class="nc">BookStore.Books</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">select</span><span class="p">:</span> <span class="n">book</span>
</span><span class='line'>    <span class="nc">BookStore.Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Route books index page to Book controller index action</h3>

<p>Open file <code>web/router.ex</code>, we will need to map the root route to <code>BookController</code>. Note that in Phoenix, controller name is singular + <code>Controller</code> whereas in Rails, it is <code>BooksController</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">BookStore.Router</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Phoenix.Router</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">get</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="nc">BookStore.BookController</span><span class="p">,</span> <span class="ss">:index</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:books</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Create BookController and get all books</h3>

<p>Create file <code>book_controller.ex</code> inside <code>web/controllers</code> folder with the following source code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">BookStore.BookController</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Phoenix.Controller</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">index</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="n">_params</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">books</span> <span class="p">=</span> <span class="nc">BookStore.Queries</span><span class="p">.</span><span class="n">books_query</span>
</span><span class='line'>    <span class="n">render</span> <span class="n">conn</span><span class="p">,</span> <span class="s2">&quot;index&quot;</span><span class="p">,</span> <span class="ss">books</span><span class="p">:</span> <span class="n">books</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Create books index page view</h3>

<p>Next thing that we will need to do is to create an index page for books listing. First, create folder <code>book</code> inside <code>web/template</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir web/templates/book
</span></code></pre></td></tr></table></div></figure>


<p>Second, create a book view file - <code>web/views/book_view.ex</code> with the following content</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">BookStore.BookView</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">BookStore.Views</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, create file <code>web/template/book/index.html.eex</code> and paste in the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;</span>Our Books<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">&#39;table table-bodered table-striped&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;thead&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;th&gt;</span>#<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>      <span class="nt">&lt;th&gt;</span>Title<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>      <span class="nt">&lt;th&gt;</span>Description<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>      <span class="nt">&lt;th&gt;</span>Author<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>      <span class="nt">&lt;th&gt;</span>Publisher<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/thead&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tbody&gt;</span>
</span><span class='line'>    <span class="err">&lt;</span>%= for book <span class="nt">&lt;-</span> <span class="err">@</span><span class="na">books</span> <span class="na">do</span> <span class="err">%</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= book.id %&gt;<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= book.title %&gt;<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= book.description %&gt;<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= book.author %&gt;<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= book.publisher %&gt;<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="err">&lt;</span>% end %&gt;
</span><span class='line'>  <span class="nt">&lt;/tbody&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Refresh the browser and voila, this is what we will get:</p>

<p><img class="left" src="http://learnelixir.com/images/build-web-app-with-elixir/complete.png" width="800" height="346" title="image" alt="images"></p>

<h3>Common Pitfall</h3>

<p>I seldom hit the following error when trying to restart phoenix although all the codes are correct</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">=</span>INFO <span class="nv">REPORT</span><span class="o">====</span> 5-Oct-2014::09:57:47 <span class="o">===</span>
</span><span class='line'>    application: logger
</span><span class='line'>    exited: stopped
</span><span class='line'>    <span class="nb">type</span>: temporary
</span><span class='line'>** <span class="o">(</span>Mix<span class="o">)</span> Could not start application book_store: exited in: BookStore.start<span class="o">(</span>:normal, <span class="o">[])</span>
</span><span class='line'>    ** <span class="o">(</span>EXIT<span class="o">)</span> an exception was raised:
</span><span class='line'>        ** <span class="o">(</span>UndefinedFunctionError<span class="o">)</span> undefined <span class="k">function</span>: BookStore.start/2 <span class="o">(</span>module BookStore is not available<span class="o">)</span>
</span><span class='line'>            BookStore.start<span class="o">(</span>:normal, <span class="o">[])</span>
</span><span class='line'>            <span class="o">(</span>kernel<span class="o">)</span> application_master.erl:272: :application_master.start_it_old/4
</span></code></pre></td></tr></table></div></figure>


<p>To fix this, you will need to clean compile all your elixir code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mix clean
</span><span class='line'><span class="nv">$ </span>mix compile
</span><span class='line'><span class="nv">$ </span>mix phoenix.start
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>

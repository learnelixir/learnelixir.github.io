<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Query | Learn Elixir Language]]></title>
  <link href="http://learnelixir.com/blog/categories/query/atom.xml" rel="self"/>
  <link href="http://learnelixir.com/"/>
  <updated>2014-11-07T07:12:48+08:00</updated>
  <id>http://learnelixir.com/</id>
  <author>
    <name><![CDATA[Learn Elixir]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ecto vs Active Record]]></title>
    <link href="http://learnelixir.com/blog/2014/10/11/ecto-vs-active-record/"/>
    <updated>2014-10-11T21:37:22+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/11/ecto-vs-active-record</id>
    <content type="html"><![CDATA[<p>This post is about comparing the feature and performance between Elixir&#39;s Ecto library - database wrapper and languge integrated query for Elixir and Ruby on Rails Active Record.</p>

<!-- more -->

<h3>Round 1: Database Migration</h3>

<h4>Active Record</h4>

<p>In Ruby on Rails Active Record, we can generate a migration for a model by following these steps:</p>

<h5><em>Step 1</em>: Generate model file and migration file</h5>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>rails g model book title:string description:text author:string publisher:string
</code></pre></div>
<p>And the content of the migration file is as following</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">CreateBooks</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
  <span class="k">def</span> <span class="nf">change</span>
    <span class="n">create_table</span> <span class="ss">:books</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:name</span>
      <span class="n">t</span><span class="o">.</span><span class="n">text</span> <span class="ss">:description</span>
      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:author</span>
      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:publisher</span>

      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<h5><em>Step 2</em>: Create the database</h5>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">bundle <span class="nb">exec </span>rake db:create
</code></pre></div>
<h5><em>Step 3</em>: Run the migration</h5>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>bundle <span class="nb">exec </span>rake db:migrate
</code></pre></div>
<p>That&#39;s all for Active Record</p>

<h4>Ecto</h4>

<p>Assuming that you have already put in <code>ecto</code> and <code>postgrex</code> dependencies and already run <code>mix deps.get</code>, here are the steps:</p>

<h5><em>Step 1</em>: Create Repo file by manually adding web/models/repo.ex file witht the following content</h5>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">BookStoreElixir.Repo</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Ecto.Repo</span><span class="p">,</span> <span class="ss">adapter</span><span class="p">:</span> <span class="nc">Ecto.Adapters.Postgres</span>

  <span class="kd">def</span> <span class="n">conf</span> <span class="k">do</span>
    <span class="n">parse_url</span> <span class="s2">&quot;ecto://postgresuser:password@localhost/book_store_elixir&quot;</span>
  <span class="k">end</span>

  <span class="kd">def</span> <span class="n">priv</span> <span class="k">do</span>
    <span class="n">app_dir</span><span class="p">(</span><span class="ss">:book_store_elixir</span><span class="p">,</span> <span class="s2">&quot;priv/repo&quot;</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<h5><em>Step 2</em>: Create the Postgres Database</h5>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>createdb book_store_elixir --encoding<span class="o">=</span><span class="s1">&#39;utf-8&#39;</span> --locale<span class="o">=</span>en_US.UTF-8 --template<span class="o">=</span>template0
</code></pre></div>
<h5><em>Step 3</em>: Create model file <code>web/models/book.ex</code> with the following code:</h5>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">BookStoreElixir.Book</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Ecto.Model</span>

  <span class="n">schema</span> <span class="s2">&quot;books&quot;</span> <span class="k">do</span>
    <span class="n">field</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:string</span>
    <span class="n">field</span> <span class="ss">:description</span><span class="p">,</span> <span class="ss">:string</span>
    <span class="n">field</span> <span class="ss">:author</span><span class="p">,</span> <span class="ss">:string</span>
    <span class="n">field</span> <span class="ss">:publisher</span><span class="p">,</span> <span class="ss">:string</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<h5><em>Step 4</em>: Generate a migration file from terminal</h5>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix ecto.gen.migration BookStoreElixir.Repo create_book
</code></pre></div>
<h5><em>Step 5</em>: Edit the newly generated migration file</h5>

<p>There is a need a type the SQL to create the table here:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim priv/repo/migrations/20141011143244_create_book.exs
</code></pre></div><div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">BookStoreElixir.Repo.Migrations.CreateBook</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Ecto.Migration</span>

  <span class="kd">def</span> <span class="n">up</span> <span class="k">do</span>
    <span class="s2">&quot;CREATE TABLE books(id serial primary key, title varchar(125), </span>
<span class="s2">                  description text, author varchar(255), publisher varchar(255))&quot;</span>
  <span class="k">end</span>

  <span class="kd">def</span> <span class="n">down</span> <span class="k">do</span>
    <span class="s2">&quot;DROP TABLE books&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<h5><em>Step 6</em>: Run the migration file</h5>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix ecto.migrate BookStoreElixir.Repo
</code></pre></div>
<h5><em>Step 7</em>: Add <code>BookStoreElixir.Repo</code> as a worker in line 11 of <code>lib/book_store_elixir.ex</code></h5>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">BookStoreElixir</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Application</span>

  <span class="c1"># See http://elixir-lang.org/docs/stable/elixir/Application.html</span>
  <span class="c1"># for more information on OTP Applications</span>
  <span class="kd">def</span> <span class="n">start</span><span class="p">(</span><span class="n">_type</span><span class="p">,</span> <span class="n">_args</span><span class="p">)</span> <span class="k">do</span>
    <span class="kn">import</span> <span class="nc">Supervisor.Spec</span><span class="p">,</span> <span class="ss">warn</span><span class="p">:</span> <span class="no">false</span>

    <span class="n">children</span> <span class="p">=</span> <span class="p">[</span>
      <span class="c1"># Define workers and child supervisors to be supervised</span>
      <span class="n">worker</span><span class="p">(</span><span class="nc">BookStoreElixir.Repo</span><span class="p">,</span> <span class="p">[])</span>
    <span class="p">]</span>

    <span class="n">opts</span> <span class="p">=</span> <span class="p">[</span><span class="ss">strategy</span><span class="p">:</span> <span class="ss">:one_for_one</span><span class="p">,</span> <span class="ss">name</span><span class="p">:</span> <span class="nc">BookStoreElixir.Supervisor</span><span class="p">]</span>
    <span class="nc">Supervisor</span><span class="p">.</span><span class="n">start_link</span><span class="p">(</span><span class="n">children</span><span class="p">,</span> <span class="n">opts</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<h5>Conclusion for Database Migration:</h5>

<p>Active Record wins as there are fewer number of steps (3 steps in Active Record vs 7 steps in Ecto). Ecto will need to have more mix tasks in order to be more on par with Active Record.</p>

<h3>Round 2: Database CRUD (Create, Read, Update, Delete) operations Syntax</h3>

<h4>1 - Create</h4>

<h5>Active Record</h5>

<p>To create a new record in Active Record, we will use <code>create</code> command on <code>Book</code> model 
<code>ruby
irb&gt; Book.create({title: &quot;Programming Ruby 1.9 &amp; 2.0&quot;, \
          author: &quot;Dave Thomas, with Chad Fowler and Andy Hunt&quot;, \
          publisher: &quot;The Pragmatic Bokshelf&quot;, \
          description: &quot;Ruby is the fastest growing and most exciting dynamic language out there. \
                        If you need to get working programs delivered fast, \
                        you should add Ruby to your toolbox.&quot;}) 
</code></p>

<h5>Ecto</h5>

<p>To create a new record in Ecto, we will use <code>insert</code> command on Book <code>Repo</code></p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Repo</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Book</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="nc">BookStoreElixir.Repo</span><span class="p">.</span><span class="n">insert</span><span class="p">({</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Ruby 1.9 &amp; 2.0&quot;</span><span class="p">,</span> <span class="err">\</span>
          <span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas, with Chad Fowler and Andy Hunt&quot;</span><span class="p">,</span> <span class="err">\</span>
          <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bokshelf&quot;</span><span class="p">,</span> 
          <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Ruby is the fastest growing and most exciting dynamic language out there. </span><span class="err">\</span><span class="s2"></span>
<span class="s2">                        If you need to get working programs delivered fast, </span><span class="err">\</span><span class="s2"></span>
<span class="s2">                        you should add Ruby to your toolbox.&quot;</span><span class="p">})</span>
</code></pre></div>
<p>Syntax wise, they are quite similar. Although Active Record code seems to be a bit neater but it can be considered a draw for creation syntax.</p>

<h4>2 - Read</h4>

<h5>Active Record</h5>

<p>In Active Record, you can perform quite an entensive list of queries by using <code>where</code>, <code>order</code>, <code>limit</code>, <code>offset</code>, <code>group</code>, <code>join</code>, <code>having</code>, <code>select</code>, <code>pluck</code>, <code>includes</code>. For instance</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">irb</span><span class="o">&gt;</span> <span class="no">Book</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;title LIKE ?&quot;</span><span class="p">,</span> <span class="s2">&quot;%Programming%&quot;</span><span class="p">)</span> <span class="p">\</span>
         <span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="ss">:desc</span><span class="p">)</span> <span class="p">\</span>
         <span class="o">.</span><span class="n">limit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">\</span>
         <span class="o">.</span><span class="n">offset</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">\</span>
         <span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="s2">&quot;id&quot;</span><span class="p">)</span> <span class="p">\</span>
         <span class="o">.</span><span class="n">having</span><span class="p">(</span><span class="s2">&quot;books.id &gt;= 1&quot;</span><span class="p">)</span> <span class="p">\</span>
         <span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span> <span class="p">\</span>
         <span class="o">.</span><span class="n">pluck</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span>
</code></pre></div>
<p>Pretty amazing that Active Record can do chaining in combine into 1 single query. </p>

<h5>Ecto</h5>

<p>There are 2 types of writing Query in Ecto</p>

<ul>
<li><em>First Way</em>: Using query syntax provide by Ecto</li>
</ul>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Book</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Repo</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="kn">import</span> <span class="nc">Ecto.Query</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">from</span> <span class="n">book</span> <span class="ow">in</span> <span class="nc">BookStoreElixir.Book</span><span class="p">,</span> <span class="ss">select</span><span class="p">:</span> <span class="n">book</span><span class="p">.</span><span class="n">id</span><span class="p">,</span> <span class="err">\</span>
                                        <span class="ss">where</span><span class="p">:</span> <span class="n">like</span><span class="p">(</span><span class="n">book</span><span class="p">.</span><span class="n">title</span><span class="p">,</span> <span class="s2">&quot;%Programming%&quot;</span><span class="p">),</span> <span class="err">\</span>
                                        <span class="ss">order_by</span><span class="p">:</span> <span class="p">[</span><span class="ss">desc</span><span class="p">:</span> <span class="n">book</span><span class="p">.</span><span class="n">id</span><span class="p">],</span> <span class="err">\</span>
                                        <span class="ss">limit</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="err">\</span>
                                        <span class="ss">offset</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="err">\</span>
                                        <span class="ss">group_by</span><span class="p">:</span> <span class="n">book</span><span class="p">.</span><span class="n">id</span><span class="p">,</span> <span class="err">\</span>
                                        <span class="ss">having</span><span class="p">:</span> <span class="n">book</span><span class="p">.</span><span class="n">id</span> <span class="o">&gt;=</span> <span class="mi">1</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="n">query</span><span class="p">)</span> 
</code></pre></div>
<ul>
<li><em>Second Way</em>: Using chaining by utilising Elixir Pipe will make query just like Active Record:</li>
</ul>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Book</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Repo</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="kn">import</span> <span class="nc">Ecto.Query</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">query</span> <span class="p">=</span> <span class="nc">Book</span> <span class="o">|&gt;</span> <span class="n">select</span><span class="p">([</span><span class="n">book</span><span class="p">],</span> <span class="n">book</span><span class="p">.</span><span class="n">id</span><span class="p">)</span> <span class="err">\</span>
                  <span class="o">|&gt;</span> <span class="n">where</span><span class="p">([</span><span class="n">book</span><span class="p">],</span> <span class="n">like</span><span class="p">(</span><span class="n">book</span><span class="p">.</span><span class="n">title</span><span class="p">,</span> <span class="s2">&quot;%Programming%&quot;</span><span class="p">))</span> <span class="err">\</span>
                  <span class="o">|&gt;</span> <span class="n">order_by</span><span class="p">([</span><span class="n">book</span><span class="p">],</span> <span class="ss">desc</span><span class="p">:</span> <span class="n">book</span><span class="p">.</span><span class="n">id</span><span class="p">)</span> <span class="err">\</span>
                  <span class="o">|&gt;</span> <span class="n">limit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="err">\</span>
                  <span class="o">|&gt;</span> <span class="n">offset</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="err">\</span>
                  <span class="o">|&gt;</span> <span class="n">group_by</span><span class="p">([</span><span class="n">book</span><span class="p">],</span> <span class="n">book</span><span class="p">.</span><span class="n">id</span><span class="p">)</span> <span class="err">\</span>
                  <span class="o">|&gt;</span> <span class="n">having</span><span class="p">([</span><span class="n">book</span><span class="p">],</span> <span class="n">book</span><span class="p">.</span><span class="n">id</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</code></pre></div>
<p>Syntax wise, both Ecto and Active Record have shown that they are quite expressive in showing the data transformation through a series of query functions. However, Active Record syntax is still considered better in this Round as it is showing an easier approach. Although, the second way of query that we use for Elixir Ecto is pretty closed to Active Record syntax, it still exhibits a more wordy syntax than Active Record. Albeit, Elixir Ecto is using a nice approach by letting programmer to have access to a &quot;so called&quot; object instance in the query - <code>having[book, book.id &gt;= 1)</code> vs <code>&quot;having(&quot;books.id &gt;= 1&quot;)</code></p>

<h4>3 - Update</h4>

<h4>Active Record</h4>

<p>To update a record, we will use <code>update_attributes</code> on <code>Book</code> instance </p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">irb</span><span class="o">&gt;</span> <span class="n">book</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">first</span>
<span class="n">irb</span><span class="o">&gt;</span> <span class="n">book</span><span class="o">.</span><span class="n">update_attributes</span><span class="p">({</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Ruby9 &amp;ss 2.0 (4th edition)&quot;</span><span class="p">})</span>
</code></pre></div>
<h4>Ecto</h4>

<p>To update a record, we will use `<code>update</code> on <code>BookStoreElixir.Repo</code></p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Book</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Repo</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">book</span> <span class="p">=</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">one</span><span class="p">(</span><span class="nc">Book</span><span class="p">)</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">update</span><span class="p">(%{</span><span class="n">book</span> <span class="p">|</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Ruby9 &amp;ss 2.0 (4th edition)&quot;</span><span class="p">})</span> 
</code></pre></div>
<p>Both Ecto and Active Record have exhibited almost the same level of code when updating a record. Hence, it is a draw.</p>

<h4>4 - Delete</h4>

<h4>Active Record</h4>

<p>To delete a record, we will use <code>destroy</code> on a <code>Book</code> instance</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">irb</span><span class="o">&gt;</span> <span class="n">book</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">first</span>
<span class="n">irb</span><span class="o">&gt;</span> <span class="n">book</span><span class="o">.</span><span class="n">destroy</span>
</code></pre></div>
<h4>Ecto</h4>

<p>To delete a record, we will use <code>delete</code> on <code>BookStoreElixir.repo</code></p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Book</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Repo</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">book</span> <span class="p">=</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">one</span><span class="p">(</span><span class="nc">Book</span><span class="p">)</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="n">book</span><span class="p">)</span>
</code></pre></div>
<p>Both Ecto and Active Record have exhibited almost the same level of code when delete a record. Hence, it is a draw.</p>

<p>So for this Round 2, Active Record is the <strong>winner</strong> (1 vs 0).</p>

<h3>Round 3: Speed of Creation</h3>

<p>Note that this is tested on my local machine. The result here is just for your reference, and should not be treated as an official benchmark.
I am using Ruby 2.1.2, running on Rails 4.1.4 and Elixir 1.0.0. Both Rails and Elixir application are running with Postgres 9.3.5. For Rails, environment in Rails 4.1.4 has been preloaded with Spring, hence there is a not a need for system to spend time to load the Rails environment. Further more, the Rails code was run with the log mode the same as on production - i.e. no query log was printed out.</p>

<h4>Active Record</h4>

<p>Here is the code inside <code>db/seeds.rb</code></p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># first round 100, second round 10,000, third round 1,000,000</span>
<span class="n">number_of_records</span> <span class="o">=</span> <span class="mi">100</span>
<span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">.</span><span class="n">.number_of_records</span>
  <span class="no">Book</span><span class="o">.</span><span class="n">create</span><span class="p">({</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Book Title </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="p">\</span>
               <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Description </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="p">\</span>
               <span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Author </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="p">\</span>
               <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;Publisher </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">})</span>
<span class="k">end</span>
</code></pre></div>
<p>Here is how I run it:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">time </span>bundle <span class="nb">exec </span>rake db:seed
</code></pre></div>
<p>Here are the results of 3 running rounds (with creating 100, 10,000 records and 1 million records). Each time database drop, creation and migration were performed before hand.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">real0m1.706s
user0m1.401s
sys0m0.229s     

real  0m12.328s
user  0m7.820s
sys 0m1.041s

real  17m52.272s
user  10m41.534s
sys 1m20.044s
</code></pre></div>
<p>Active Record took <strong>1.706 seconds</strong>,  <strong>12.328 seconds</strong> and a whooping <strong>17 minutes 52.272 seconds</strong> to complete 100, 10,000 and 1 million record creation run.</p>

<h4>Ecto</h4>

<p>I create a file seeds.ex inside the elixir project folder with the following content</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kn">alias</span> <span class="nc">BookStoreElixir.Book</span>
<span class="kn">alias</span> <span class="nc">BookStoreElixir.Repo</span>

<span class="c1"># First round 100, second round 10,000, third round 1,000,000</span>
<span class="n">number_of_records</span> <span class="p">=</span> <span class="mi">100</span>
<span class="n">range</span> <span class="p">=</span> <span class="mi">1</span><span class="p">..</span><span class="mi">100</span>
<span class="k">for</span> <span class="n">i</span> <span class="p">&lt;-</span> <span class="n">range</span> <span class="k">do</span>
  <span class="n">book</span> <span class="p">=</span> <span class="p">%</span><span class="nc">Book</span><span class="p">{</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Book Title </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="err">\</span>
               <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Description </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="err">\</span>
               <span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Author </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="err">\</span>
               <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;Publisher </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}</span>
  <span class="nc">Repo</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">book</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<p>Then run this seeds</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">time </span>mix run seeds.ex 
</code></pre></div>
<p>And here is the reusult of 3 runs:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">real  0m0.624s
user  0m0.513s
sys 0m0.187s

real  0m5.109s
user  0m2.459s
sys 0m1.002s

real  6m15.161s
user  3m19.126s
sys 2m53.117s
</code></pre></div>
<p>Ecto took merely <strong>0.624 seconds</strong>, <strong>5.109 seconds</strong> and <strong>6 minutes 15.161 seconds</strong> to complete the same 3 runs of creation 100, 10,000 and 1 million records. </p>

<p>Here is the chart that shows the performance of Ecto vs Active Record through 3 runs:</p>

<p>{% img center /images/ecto<em>vs</em>active<em>record/creation</em>chart.png 710 467 &#39;image&#39; &#39;images&#39; %}</p>

<p>Ecto is approximately <strong>62%</strong> faster than Active Record. Hence, Ecto is the winner in this round.</p>

<h4>Round 4: Speed of Updating</h4>

<p>We will now run updating on 100, 10,000 and 1 million records in each database each. We will update the records, one by one to have a new book title. As usual, let&#39;s start with Active Record first</p>

<h5>Active Record</h5>

<p>Now in my <code>db/seeds.rb</code> file, I will change it like following:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">Book</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">book</span><span class="o">|</span>
  <span class="n">book</span><span class="o">.</span><span class="n">update_attributes</span><span class="p">({</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;New Book Title </span><span class="si">#{</span><span class="n">book</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<p>And run this file:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">time </span>bundle <span class="nb">exec </span>rake db:seed
</code></pre></div><div class="highlight"><pre><code class="language-bash" data-lang="bash">real  0m1.725s
user  0m1.423s
sys 0m0.243s

real  0m12.414s
user  0m6.936s
sys 0m1.109s

real  23m30.364s
user  15m22.126s
sys 1m26.698s
</code></pre></div>
<p>Active Record took <strong>1.725 seconds</strong>, <strong>12.414 seconds</strong> and <strong>23 minutes, 30.364 seconds</strong> to update all 100, 10,000 and 1 million records respectively.</p>

<h5>Ecto</h5>

<p>We will change the <code>seeds.ex</code> file to following</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kn">alias</span> <span class="nc">BookStoreElixir.Book</span>
<span class="kn">alias</span> <span class="nc">BookStoreElixir.Repo</span>

<span class="c1"># range = 1..10000</span>
<span class="c1"># for i &lt;- range do</span>
<span class="c1">#  book = %Book{title: &quot;Book Title #{i}&quot;, \</span>
                <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Description </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="err">\</span>
                <span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Author </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="err">\</span>
                <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;Publisher </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}</span>
<span class="c1">#  Repo.insert(book)</span>
<span class="c1"># end</span>

<span class="k">for</span> <span class="n">book</span> <span class="p">&lt;-</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="nc">Book</span><span class="p">)</span> <span class="k">do</span>
  <span class="n">book</span> <span class="p">=</span> <span class="p">%{</span><span class="n">book</span> <span class="p">|</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;New Book Title </span><span class="si">#{</span><span class="n">book</span><span class="p">.</span><span class="n">id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}</span>
  <span class="nc">Repo</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">book</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<p>Before you can run this file, you will need to do a bit modification on <code>postgrex</code> library as this library is throwing a time out if a query spends more than 5 seconds to complete. <code>Repo.all(Book)</code> will definitely take up more than 5 seconds to load up the entire collection of books into the memory</p>

<p>From the project folder, what I did was edit file <code>deps/ecto/lib/ecto/adapters/postgres.ex</code></p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim deps/ecto/lib/ecto/adapters/postgres.ex 
</code></pre></div>
<p>Then search for <code>@timeout 5000</code> and replace by <code>@timeout :infinity</code></p>

<p>Now you can run and time the running time of this file</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">time </span>mix run seeds.ex
</code></pre></div>
<p>Here are the result of 3 runs:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">real  0m0.606s
user  0m0.509s
sys 0m0.184s

real  0m5.495s
user  0m2.515s
sys 0m1.071s

real  7m12.016s
user  3m49.446s
sys 3m7.004s
</code></pre></div>
<p>Ecto took merely <strong>0.606 seconds</strong>, <strong>5.495 seconds</strong> and <strong>7 minutes, 12 seconds</strong> to update 100, 10,000 records and 1 million records respectively. Apparently, Ecto is the winner.</p>

<p>Here is the chart showing the above elapsed time:</p>

<p>{% img center /images/ecto<em>vs</em>active<em>record/update</em>chart.png 633 444 &#39;image&#39; &#39;images&#39; %}</p>

<h3>Conclusion</h3>

<p>With the fact that Active Record and Ecto each has 2 wons, it is concluded to be a draw between Active Record and Ecto. Ecto seems to be very promising library, which provides a very interesting way to write a database query. The steps to setup and the syntax of Ecto will definitely improve in the future.</p>
]]></content>
  </entry>
  
</feed>

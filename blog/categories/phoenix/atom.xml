<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Phoenix | Learn Elixir Language]]></title>
  <link href="http://learnelixir.com/blog/categories/phoenix/atom.xml" rel="self"/>
  <link href="http://learnelixir.com/"/>
  <updated>2014-12-01T20:42:56+08:00</updated>
  <id>http://learnelixir.com/</id>
  <author>
    <name><![CDATA[Learn Elixir]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Migrating Applications From Phoenix 0.5.0 to Phoenix 0.6.0]]></title>
    <link href="http://learnelixir.com/blog/2014/11/27/migrating-applications-from-phoenix-0-dot-5-0-to-phoenix-0-dot-6-0/"/>
    <updated>2014-11-27T22:06:05+08:00</updated>
    <id>http://learnelixir.com/blog/2014/11/27/migrating-applications-from-phoenix-0-dot-5-0-to-phoenix-0-dot-6-0</id>
    <content type="html"><![CDATA[<p>Phoenix 0.6.0 was released few days ago and it has increase requirement to only be supported by Elixir 1.0.2+. So before you start upgrading, you will need to make sure you have Elixir 1.0.2+ installed on your machine. There are also some note worthy backward incompatibility with Phoenix 0.5.0 that we would need to take care of. We will go through the details of those.</p>

<p>The source code for the Phoenix application after upgrade to 0.6.0, which I applied inside this article is available at:</p>

<p><a href="https://github.com/learnelixir/hardware-zone/tree/phoenix-0.6.0">https://github.com/learnelixir/hardware-zone/tree/phoenix-0.6.0</a></p>

<!--more-->

<p>To start, you will need to branch your application another branch, say phoenix-0.6.0:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git checkout -b phoenix 0.6.0
</code></pre></div>
<h3>Before upgrading</h3>

<p>Before we start any upgrading, it&#39;s important to note that Phoenix 0.6.0 will only run on Elixir 1.0.2 and it&#39;s not compatible with Elixir 1.0.1 and below. Hence you will need to upgrade your Elixir to 1.0.2 first if you have not done so. On your Mac, you can simply run the brew update and brew install command like followings:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>brew updatea
<span class="nv">$ </span>brew unlink elixir
<span class="nv">$ </span>brew install elixir
</code></pre></div>
<p>On Ubuntu server, you can refer to this updated article - <a href="http://learnelixir.com/blog/2014/10/16/deploy-phoenix-application-to-a-ubuntu-server/">http://learnelixir.com/blog/2014/10/16/deploy-phoenix-application-to-a-ubuntu-server/</a> - Step Number 4 on how to bring up your Elixir to version 1.0.2</p>

<h3>Upgrading to Phoenix 0.6.0</h3>

<p>You will need to delete your Phoenix source folder and install the latest one by typing the following command on your terminal. This way, next time, when you generate a new Phoenix application, it will use Phoenix 0.6.0:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git clone https://github.com/phoenixframework/phoenix.git <span class="o">&amp;&amp;</span> <span class="se">\</span>
  <span class="nb">cd </span>phoenix <span class="o">&amp;&amp;</span> <span class="se">\</span>
  git checkout v0.6.0 <span class="o">&amp;&amp;</span> <span class="se">\</span>
  mix <span class="k">do</span> deps.get, compile
</code></pre></div>
<h3>Upgrading application running Phoenix 0.5.0 to Phoenix 0.6.0</h3>

<p>Now enter the application folder that are still running Phoenix 0.5.0. For my case, I will upgrade the hardware zone app described in the <a href="http://learnelixir.com/blog/2014/10/18/seven-restful-actions-in-phoenix-web-app/">Seven RESTful Actions in Phoenix Web App</a>.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">cd</span> ~/learn/elixir/hardware_zone
</code></pre></div>
<h4>Step 1 - Change Phoenix version to 0.6.0 in mix.exs</h4>

<p>Open <code>mix.exs</code> file:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim mix.exs
</code></pre></div>
<ul>
<li>On <code>def project</code> function, make sure your elixir is using <code>~&gt; 1.0.0</code>. </li>
<li>On <code>defp deps</code> function, make sure phoenix version is now <code>0.6.0</code>.</li>
</ul>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defp</span> <span class="n">deps</span> <span class="k">do</span>
  <span class="p">[</span>   
    <span class="p">{</span><span class="ss">:phoenix</span><span class="p">,</span> <span class="s2">&quot;0.6.0&quot;</span><span class="p">},</span>
    <span class="p">{</span><span class="ss">:cowboy</span><span class="p">,</span> <span class="s2">&quot;~&gt; 1.0.0&quot;</span><span class="p">},</span>
    <span class="p">{</span><span class="ss">:postgrex</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.5&quot;</span><span class="p">},</span>
    <span class="p">{</span><span class="ss">:ecto</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.2.0&quot;</span><span class="p">},</span>
    <span class="p">{</span><span class="ss">:inflex</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.2.5&quot;</span><span class="p">},</span>
    <span class="p">{</span><span class="ss">:mogrify</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.1&quot;</span><span class="p">}</span>
  <span class="p">]</span>   
<span class="k">end</span>
</code></pre></div>
<p>After that, run <code>deps.get, compile</code>:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix <span class="k">do</span> deps.get, compile
</code></pre></div>
<h4>Step 2 - Upgrade Controller Files:</h4>

<p>From Phoenix 0.6.0 onwards, we will need to supply an extension to the string template name. For example, we used to be able to do like following in phoenix 0.5.0 inside our controllers:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">render</span> <span class="n">conn</span><span class="p">,</span> <span class="s2">&quot;index&quot;</span>
</code></pre></div>
<p>But now with Phoenix 0.6.0, we will need to use <code>index.html</code> if we want to render using <code>index.html.eex</code> file. With this, you can go to all the render command, and add in the extension. For my case, I will need to add in <code>.html</code> for all the template strings.</p>

<p>Another change in Phoenix 0.6.0 is <code>redirect</code> function, you will need to use <code>to</code> for the url string that you would like to redirect to. For instance, on Phoenix 0.5.0, we can write:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">redirect</span> <span class="n">conn</span><span class="p">,</span> <span class="n">hardwares_path</span><span class="p">(</span><span class="ss">:index</span><span class="p">)</span>
</code></pre></div>
<p>But for Phoenix 0.6.0, we will need to write:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">redirect</span> <span class="n">conn</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="n">hardwares_path</span><span class="p">(</span><span class="ss">:index</span><span class="p">)</span>
</code></pre></div>
<p>That&#39;s all for controller upgrade.</p>

<h4>Step 3 - Upgrade Router file:</h4>

<p>You will need to add in the following codes under <code>use Phoenix.Router</code> line inside <code>web/router</code></p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/router.ex
</code></pre></div>
<p>And add in these lines</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">pipeline</span> <span class="ss">:browser</span> <span class="k">do</span>
  <span class="n">plug</span> <span class="ss">:accepts</span><span class="p">,</span> <span class="sx">~w(html)</span>
  <span class="n">plug</span> <span class="ss">:fetch_session</span>
<span class="k">end</span> 

<span class="n">pipeline</span> <span class="ss">:api</span> <span class="k">do</span>
  <span class="n">plug</span> <span class="ss">:accepts</span><span class="p">,</span> <span class="sx">~w(json)</span>
<span class="k">end</span>
</code></pre></div>
<p>That&#39;s all for router upgrade.</p>

<h4>Step 4 - Change view files:</h4>

<p>We will need to rename file <code>web/views.ex</code> to <code>web/view.ex</code> (without <code>s</code> in <code>view</code>) and replace the content of this new <code>web/view.ex</code> with the followings. Please note that you will need to update the Module name for your particular project:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">HardwareZone.View</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Phoenix.View</span><span class="p">,</span> <span class="ss">root</span><span class="p">:</span> <span class="s2">&quot;web/templates&quot;</span>

  <span class="c1"># The quoted expression returned by this block is applied</span>
  <span class="c1"># to this module and all other views that use this module.</span>
  <span class="n">using</span> <span class="k">do</span>
    <span class="k">quote</span> <span class="k">do</span>
      <span class="c1"># Import common functionality</span>
      <span class="kn">import</span> <span class="nc">HardwareZone.I</span><span class="mi">18</span><span class="n">n</span>
      <span class="kn">import</span> <span class="nc">HardwareZone.Router.Helpers</span>

      <span class="c1"># Use Phoenix.HTML to import all HTML functions (forms, tags, etc)</span>
      <span class="kn">use</span> <span class="nc">Phoenix.HTML</span>

      <span class="c1"># Common aliases</span>
      <span class="kn">alias</span> <span class="nc">Phoenix.Controller.Flash</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="c1"># Functions defined here are available to all other views/templates</span>
<span class="k">end</span>
</code></pre></div>
<p>As you can see, the module name now is <code>HardwareZone.View</code> instead of <code>HardwareZone.Views</code> like before because of the file name changed. Since this module name is changed, we will need to update all the view files in side our <code>web/views</code> folder to reflect this change as well. You would need to remove the <code>s</code> character in all the <code>use</code> function call in all the view. For instance, my <code>web/views/hardwares_view.ex</code> file will now look like this:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">HardwareZone.HardwaresView</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">HardwareZone.View</span>
<span class="k">end</span>
</code></pre></div>
<p>That&#39;s all for upgrading views and that&#39;s all for upgrading to Phoenix 0.6.0.</p>

<h3>Conclusion</h3>

<p>It is quite a minor upgrade from Phoenix from 0.5.0 to 0.6.0 but there are also quite a bit of changes that we will need to take care of. I hope that you will always keep updating and support the latest Phoenix framework :-). If you want to see all the code changes for this particular project, you can use this link <a href="https://github.com/learnelixir/hardware-zone/commit/3b4f9a0e3022b622a301846cbb3d72e14dd9e81a">https://github.com/learnelixir/hardware-zone/commit/3b4f9a0e3022b622a301846cbb3d72e14dd9e81a</a>. It will show all the code changes when I did the update from Phoenix 0.5.0 to Phoenix 0.6.0 for this Hardware Zone app. Hope you enjoy the upgrading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Custom Mix Task for Phoenix App]]></title>
    <link href="http://learnelixir.com/blog/2014/11/04/custom-mix-task-for-phoenix-app/"/>
    <updated>2014-11-04T23:35:23+08:00</updated>
    <id>http://learnelixir.com/blog/2014/11/04/custom-mix-task-for-phoenix-app</id>
    <content type="html"><![CDATA[<p><strong>UPDATE</strong> on 27 Nov 14: I have updated this article in order to work with Phoenix framework version 0.6.0. Previously the Phoenix framework used in this article was 0.5.0
<hr/><br/></p>

<p>Mix task is a powerful way to automate certain things from command line. It&#39;s especially helpful when dealing with code generator. In this article, we are going to write a custom mix task for Phoenix application to automate generation of Model, its Repo and Migration task. I usually have to generate these one by one manually at the moment.</p>

<!-- more -->

<h3>Expected Result</h3>

<p>First, make sure that our app has the following dependencies in <code>mix.exs</code> file:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">def</span> <span class="n">application</span> <span class="k">do</span>
  <span class="p">[</span>
    <span class="ss">mod</span><span class="p">:</span> <span class="p">{</span> <span class="nc">HardwareZone</span><span class="p">,</span> <span class="p">[]</span> <span class="p">},</span>
    <span class="ss">applications</span><span class="p">:</span> <span class="p">[</span><span class="ss">:phoenix</span><span class="p">,</span> <span class="ss">:cowboy</span><span class="p">,</span> <span class="ss">:logger</span><span class="p">,</span> <span class="ss">:postgrex</span><span class="p">,</span> <span class="ss">:ecto</span><span class="p">]</span>
  <span class="p">]</span>
<span class="k">end</span>

<span class="kd">defp</span> <span class="n">deps</span> <span class="k">do</span>
  <span class="p">[</span>   
    <span class="p">{</span><span class="ss">:phoenix</span><span class="p">,</span> <span class="s2">&quot;0.6.0&quot;</span><span class="p">},</span>
    <span class="p">{</span><span class="ss">:cowboy</span><span class="p">,</span> <span class="s2">&quot;~&gt; 1.0.0&quot;</span><span class="p">},</span>
    <span class="p">{</span><span class="ss">:postgrex</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.5&quot;</span><span class="p">},</span>
    <span class="p">{</span><span class="ss">:ecto</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.2.0&quot;</span><span class="p">},</span>
    <span class="p">{</span><span class="ss">:inflex</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.2.5&quot;</span><span class="p">}</span>
  <span class="p">]</span>   
<span class="k">end</span> 
</code></pre></div>
<p>Then run:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ mix do deps.get, compile
</code></pre></div>
<p>Now, to start, let&#39;s write out our final goal. From the terminal, if let say we enter the following command and hit enter:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">mix potion.g model hardware name:string description:text released_year:integer purchased_on:date 
</code></pre></div>
<p>It should generate the following:</p>

<ul>
<li>A Repo file if it does not exist yet. </li>
<li>Hardware struct model with the specified attributes name with string column type, description with text column type, released year with integer column type, and purchased_on with column date.</li>
<li>Database Migration file for this Hardware model.</li>
</ul>

<p>Note that this is for us to learn how to write a custom mix command for Phoenix app. We will not be able to cover the entire syntax for generating a model like Rails.</p>

<h3>Simple Mix Task</h3>

<p>Let&#39;s move to create a simple mix task, which is going to display the list of arguments from the command line. Inside your Phoenix app, let&#39;s create the following folder:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mkdir -p lib/mix/tasks
</code></pre></div>
<p>Then create a mix task file:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim lib/mix/tasks/g.ex
</code></pre></div>
<p>with the following initial code:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">Mix.Tasks.Potion</span> <span class="k">do</span>
  <span class="kd">defmodule</span> <span class="nc">G</span> <span class="k">do</span>
    <span class="kn">use</span> <span class="nc">Mix.Task</span>
    <span class="kn">import</span> <span class="nc">Mix.Generator</span>
    <span class="kn">import</span> <span class="nc">Mix.Utils</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="p">[</span><span class="ss">camelize</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">underscore</span><span class="p">:</span> <span class="mi">1</span><span class="p">]</span> 

    <span class="na">@shortdoc</span> <span class="s2">&quot;For model code generation.&quot;</span>

    <span class="na">@moduledoc</span> <span class="sh">&quot;&quot;&quot; </span>
<span class="sh">      A task for generating model struct, its database migration and Repo if one does not yet exist.</span>
<span class="sh">    &quot;&quot;&quot;</span>

    <span class="kd">def</span> <span class="n">run</span><span class="p">(</span><span class="n">args</span><span class="p">)</span> <span class="k">do</span>
      <span class="nc">IO</span><span class="p">.</span><span class="n">puts</span> <span class="p">(</span><span class="n">inspect</span> <span class="n">args</span><span class="p">)</span>
    <span class="k">end</span> 
  <span class="k">end</span> 
<span class="k">end</span>
</code></pre></div>
<p>Note that, the function <code>def run(args)</code> is the entry point. When you run this task, the run command will be executed. We have also imported a few things here: </p>

<ul>
<li><code>Mix.Generator</code> provides us helper for <code>create_file</code>, <code>embed_template</code>, <code>create_directory</code></li>
<li><code>Mix.Utils</code> provides us helper for <code>camelize</code> and <code>underscore</code> </li>
</ul>

<p>To run this mix task, we can either run this command:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix Potion.G
</code></pre></div>
<p>or this command:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix potion.g
</code></pre></div>
<p>I would prefer the later way caused I do not need to press an extra shift key :p. Anyway, after you run the task, you should expect to see the following output:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[]</span>
</code></pre></div>
<p>It is displaying an empty array because we are printing out the inspection of arguments, which are none at the moment. If you try to run the command like below:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix potion.g model hardware name:string description:text released_year:integer purchased_on:date 
</code></pre></div>
<p>You should see the following:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span><span class="s2">&quot;model&quot;</span>, <span class="s2">&quot;hardware&quot;</span>, <span class="s2">&quot;name:string&quot;</span>, <span class="s2">&quot;description:text&quot;</span>, <span class="se">\</span>
<span class="s2">&quot;released_year:integer&quot;</span>, <span class="s2">&quot;purchased_on:date&quot;</span><span class="o">]</span>
</code></pre></div>
<p>That&#39;s how we can get in arguments from the command line.</p>

<h3>Expand mix task for model generation</h3>

<p>Since we know that the mix task that we are going to write is to cater only for model, we can write the <code>run</code> command in such a way that it will immediately recognize the arguments from the command line without doing any checking. We can do that by spliting the <code>run</code> command into 2 parts as per following:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">def run<span class="o">([</span><span class="s2">&quot;model&quot;</span> <span class="p">|</span> <span class="o">[</span>model_name <span class="p">|</span> attributes<span class="o">]])</span> <span class="k">do</span>
  IO.puts <span class="s2">&quot;Generate model #{model_name} with the following attributes #{inspect attributes}&quot;</span>
end 

def run<span class="o">(</span>_<span class="o">)</span> <span class="k">do</span>
  IO.puts <span class="s2">&quot;Incorrect syntax. Please try mix potion.g model &lt;model_name&gt; [attribute1] [attribute2]...&quot;</span>
end 
</code></pre></div>
<p>We are now ready to write the generator for our first task - Repo</p>

<h3>Generating Repo file</h3>

<p>It will be more convenient if we have a template file and just need to plug in the parts that are dynamic. Hence, let&#39;s define a template file for Repo. It can be achieved by using <code>embed_template</code> command as following:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">embed_template</span> <span class="ss">:repo</span><span class="p">,</span> <span class="sh">&quot;&quot;&quot; </span>
<span class="sh">defmodule &lt;%= inspect @repo_module %&gt; do</span>
<span class="sh">  use Ecta.Repo, adapter: Ecto.Adapters.Postgres</span>
<span class="sh">  h</span>

<span class="sh">  def conf do</span>
<span class="sh">    parse_url &quot;ecto://&lt;username&gt;:&lt;password&gt;@localhost/&lt;%= @database_name %&gt;&quot;</span>
<span class="sh">  end </span>

<span class="sh">  def priv do</span>
<span class="sh">    app_dir(:&lt;%= @app_name %&gt;, &quot;priv/repo&quot;)</span>
<span class="sh">  end </span>
<span class="sh">end</span>
<span class="sh">&quot;&quot;&quot;</span>
</code></pre></div>
<p>As you have noticed, we are using the variable with <code>@</code> sign in front. These are variables that we will need to pass in when we call function <code>repo_template</code>. Note that, as are using the template with name <code>repo</code> here, we can call function <code>repo_template</code>. The Generator helper has automagically created that function for us. What we will need to do next is find <code>repo_module</code> and the <code>app_name</code> to plug in the template. Let&#39;s go back to the <code>run</code> function, and add in the below code:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">def</span> <span class="n">run</span><span class="p">([</span><span class="s2">&quot;model&quot;</span> <span class="p">|</span> <span class="p">[</span><span class="n">model_name</span> <span class="p">|</span> <span class="n">attributes</span><span class="p">]])</span> <span class="k">do</span>
  <span class="n">app_name</span> <span class="p">=</span> <span class="nc">Mix.Project</span><span class="p">.</span><span class="n">config</span><span class="p">[</span><span class="ss">:app</span><span class="p">]</span>
  <span class="n">project_module_name</span> <span class="p">=</span> <span class="n">camelize</span><span class="p">(</span><span class="n">to_string</span><span class="p">(</span><span class="n">app_name</span><span class="p">))</span>
  <span class="n">repo_module</span> <span class="p">=</span> <span class="nc">Module</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">project_module_name</span><span class="p">,</span> <span class="s2">&quot;Repo&quot;</span><span class="p">])</span>
<span class="k">end</span>
</code></pre></div>
<p>As you can see, on the second line of the above code, we can easily extract out the app name by using <code>Mix.Project.config[:app]</code>. We then convert this app name to the name of the module corresponding to the app name by using the <code>camelize</code> function. Finally, we use <code>Module.concat</code> to form the <code>Repo</code> module name when combining the app module with <code>Repo</code>. After having these 2 variables, we then can write a function taking these 2 parameters to generate the Repo file. Let&#39;s define function named <code>generate_repo_file</code>:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defp</span> <span class="n">generate_repo_file</span><span class="p">(</span><span class="n">app_name</span><span class="p">,</span> <span class="n">repo_module</span><span class="p">)</span> <span class="k">do</span>
  <span class="n">repo_path</span> <span class="p">=</span> <span class="nc">Path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="nc">System</span><span class="p">.</span><span class="n">cwd</span><span class="p">(),</span> <span class="s2">&quot;web/models/repo.ex&quot;</span><span class="p">)</span>
  <span class="k">if</span> <span class="nc">File</span><span class="p">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">repo_path</span><span class="p">)</span> <span class="o">==</span> <span class="no">false</span> <span class="k">do</span> 
    <span class="n">create_file</span> <span class="n">repo_path</span><span class="p">,</span> <span class="n">repo_template</span><span class="p">(</span>
      <span class="ss">repo_module</span><span class="p">:</span> <span class="n">repo_module</span><span class="p">,</span>
      <span class="ss">app_name</span><span class="p">:</span> <span class="n">app_name</span>
    <span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>We have constructed the path to the repo file by joining <code>Sysytem.cwd()</code>, used to generate the absolute path of the current folder with the relative path to the expected repo file (<code>web/models/repo.ex</code>). We then check whether the file exists. If it does not exist, we would create the file using <code>create_file</code> command. As mentioned above, we have used <code>repo_template</code> function to create the actual file from the template by passing 2 neccesary parameters <code>repo_module</code> and <code>app_name</code>. Finally, we will need to call this inside <code>run</code> function:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">generate_repo_file</span><span class="p">(</span><span class="n">app_name</span><span class="p">,</span> <span class="n">repo_module</span><span class="p">)</span>
</code></pre></div>
<p>That&#39;s all for generating a Repo file. Let&#39;s move on to generating the model file.</p>

<h3>Generating Model file</h3>

<p>Similar to what we have done when we generate the Repo file, we will need to create a template file as following:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">embed_template</span> <span class="ss">:model</span><span class="p">,</span> <span class="sh">&quot;&quot;&quot;</span>
<span class="sh">defmodule &lt;%= inspect @model_name %&gt; do</span>
<span class="sh">  use Ecto.Model</span>

<span class="sh">  schema &quot;&lt;%= @table_name %&gt;&quot; do</span>
<span class="sh">    &lt;%= @attributes_table %&gt;</span>
<span class="sh">  end </span>
<span class="sh">end  </span>
<span class="sh">&quot;&quot;&quot;</span>
</code></pre></div>
<p>As you can see, there are 3 missing pieces that we will need to find out: <code>model_name</code>, <code>table_name</code> and <code>attributes_table</code>. For <code>model_name</code>, we can easily extracy out the model name  by using <code>camelize</code> function on the model name from command line&#39;s argument. Whereas for <code>table_name</code>, we will need to pluralize the underscored string of the model name. For instance, a <code>UserProfile</code> model will need a table named <code>user_profiles</code>. Lastly, for <code>attributes_table</code>, we will have to translate the list of attributes keyed in by user into the syntax recognised by <code>Ecto</code>. Let&#39;s go ahead and write the function to generate the <code>atributes_table</code>:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">def</span> <span class="n">attributes_table_from_attributes_array</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span> <span class="k">do</span>
  <span class="nc">Enum</span><span class="p">.</span><span class="n">reduce</span><span class="p">(</span><span class="n">attributes</span><span class="p">,</span> <span class="p">%{},</span> <span class="k">fn</span><span class="p">(</span><span class="n">attribute</span><span class="p">,</span> <span class="n">dict</span><span class="p">)</span> <span class="p">-&gt;</span>
    <span class="k">if</span> <span class="nc">String</span><span class="p">.</span><span class="n">contains?</span><span class="p">(</span><span class="n">attribute</span><span class="p">,</span> <span class="s2">&quot;:&quot;</span><span class="p">)</span> <span class="k">do</span>
      <span class="p">[</span><span class="n">attribute_name</span><span class="p">,</span> <span class="n">attribute_type</span><span class="p">]</span> <span class="p">=</span> <span class="nc">String</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="n">attribute</span><span class="p">,</span> <span class="s2">&quot;:&quot;</span><span class="p">)</span>
    <span class="k">else</span> <span class="c1"># if not specify attribute type, it will be deemed as string</span>
      <span class="p">[</span><span class="n">attribute_name</span><span class="p">,</span> <span class="n">attribute_type</span><span class="p">]</span> <span class="p">=</span> <span class="p">[</span><span class="n">attribute</span><span class="p">,</span> <span class="s2">&quot;string&quot;</span><span class="p">]</span>
    <span class="k">end</span>

    <span class="n">model_attributes_table</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">dict</span><span class="p">,</span> <span class="ss">:for_model_file</span><span class="p">,</span> <span class="p">[])</span>
    <span class="n">model_attributes_table</span> <span class="p">=</span> <span class="n">model_attributes_table</span> <span class="err">\</span>
          <span class="o">++</span> <span class="p">[</span><span class="s2">&quot;field :</span><span class="si">#{</span><span class="n">attribute_name</span><span class="si">}</span><span class="s2">, :</span><span class="si">#{</span><span class="n">ecto_attribute_type_map</span><span class="p">(</span><span class="n">attribute_type</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">]</span>
    <span class="n">dict</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">dict</span><span class="p">,</span> <span class="ss">:for_model_file</span><span class="p">,</span> <span class="n">model_attributes_table</span><span class="p">)</span>
  <span class="k">end</span><span class="p">)</span>
<span class="k">end</span>

<span class="kd">def</span> <span class="n">ecto_attribute_type_map</span><span class="p">(</span><span class="n">attribute_type</span><span class="p">)</span> <span class="k">do</span>
  <span class="k">case</span> <span class="n">attribute_type</span> <span class="k">do</span>
    <span class="s2">&quot;text&quot;</span> <span class="p">-&gt;</span> <span class="s2">&quot;string&quot;</span>
    <span class="n">other</span> <span class="p">-&gt;</span> <span class="n">other</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>As you can see in the above code, I have used <code>Enum.reduce</code> to transform the array of attributes into a hash, which has <code>for_model_file</code> key mapped to a list of lines, each of which is as following:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">field</span> <span class="o">&lt;</span><span class="n">attribute_name</span><span class="o">&gt;</span><span class="p">,</span> <span class="ss">:&lt;</span><span class="n">attribute_type_corresponding_to_ecto</span><span class="o">&gt;</span>
</code></pre></div>
<p>For each of the attribute part passed from the command line, we need check if it contains a colon <code>:</code>. If it does, we will then split the colon and assign the first part as attribute name and the second part as attribute type. If it does not, the attribute type is default as string. This attribute type will then be mapped with the correct type in Ecto. For instance, if you look at <code>ecto_attribute_type_map</code> function, we are mapping the <code>text</code> type to be <code>string</code> as there is no <code>text</code> type in Ecto. </p>

<p>If you want to have more convience, for instance, you can map <code>i</code> with <code>integer</code>. Hence, when youu write a generate command, it can be like the following:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ mix potion.g user account_id:i
</code></pre></div>
<p>the attribute <code>account_id:i</code> will then be translated as:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">field</span> <span class="n">account_id</span><span class="p">,</span> <span class="ss">:integer</span>
</code></pre></div>
<p>Having the attributes table, we now can define the function to generate the model file as following:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defp</span> <span class="n">generate_model_file</span><span class="p">(</span><span class="n">model_name</span><span class="p">,</span> <span class="n">project_module_name</span><span class="p">,</span> <span class="n">attributes_map</span><span class="p">)</span> <span class="k">do</span>
  <span class="n">model_destination</span> <span class="p">=</span> <span class="nc">Path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="nc">System</span><span class="p">.</span><span class="n">cwd</span><span class="p">(),</span> <span class="s2">&quot;/web/models/</span><span class="si">#{</span><span class="n">underscore</span><span class="p">(</span><span class="n">model_name</span><span class="p">)</span><span class="si">}</span><span class="s2">.ex&quot;</span><span class="p">)</span>
  <span class="n">create_file</span> <span class="n">model_destination</span><span class="p">,</span> <span class="n">model_template</span><span class="p">(</span>
      <span class="ss">model_name</span><span class="p">:</span> <span class="nc">Module</span><span class="p">.</span><span class="n">concat</span><span class="p">(</span><span class="n">project_module_name</span><span class="p">,</span> <span class="n">camelize</span><span class="p">(</span><span class="n">model_name</span><span class="p">)),</span>
      <span class="ss">table_name</span><span class="p">:</span> <span class="nc">Inflex</span><span class="p">.</span><span class="n">pluralize</span><span class="p">(</span><span class="n">underscore</span><span class="p">(</span><span class="n">model_name</span><span class="p">)),</span>
      <span class="ss">attributes_table</span><span class="p">:</span> <span class="nc">Enum</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">attributes_map</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\n\t\t</span><span class="s2">&quot;</span><span class="p">)</span>
  <span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<p>Similar to what we have done with <code>Repo</code> file, we have generated the path of the model file using <code>File.join</code> command. We then use <code>create_file</code> with <code>model_template</code> function and supplying the 3 arguments:</p>

<ul>
<li><code>model_name</code>: e.g. <code>HardwareZone.UserProfile</code></li>
<li><code>table_name</code>: e.g. <code>user_profiles</code> - by using <code>Inflex.pluralize(underscore(model_name))</code></li>
<li><code>atributes_table</code>: e.g. we are joining each entries of the list that we generated in the earlier step with <code>\n\t\t</code> . You can modify this as what you want.</li>
</ul>

<p>Lastly, for this part, let&#39;s combine all together in the <code>run</code> command:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="p">...</span>
<span class="n">attributes_table_map</span> <span class="p">=</span> <span class="n">attributes_table_from_attributes_array</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
<span class="n">generate_model_file</span><span class="p">(</span><span class="n">model_name</span><span class="p">,</span> <span class="n">project_module_name</span><span class="p">,</span> <span class="err">\</span>  
    <span class="nc">Map</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">attributes_table_map</span><span class="p">,</span> <span class="ss">:for_model_file</span><span class="p">,</span> <span class="p">[]))</span>
</code></pre></div>
<h3>Generate Migration file</h3>

<p>The last part of this is generating the corresponding Migration file. As you might know, Ecto comes with a predefined migration file generation. However, I am not so happy with it as what it does is just generating a blank migration file. What I really want is a full migration file and ready to be migrated :-). So let&#39;s start by defining the template. This is the template from Ecto migration task with some modifications. We have added in <code>@table_up</code> and <code>@table_down</code> attributes inside this template:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="o">&lt;</span><span class="p">%=</span> <span class="n">inspect</span> <span class="na">@mod</span> <span class="p">%</span><span class="o">&gt;</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Ecto.Migration</span>

  <span class="kd">def</span> <span class="n">up</span> <span class="k">do</span>
    <span class="s2">&quot;&lt;%= @table_up %&gt;&quot;</span>
  <span class="k">end</span>

  <span class="kd">def</span> <span class="n">down</span> <span class="k">do</span>
    <span class="s2">&quot;&lt;%= @table_down %&gt;&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>
<span class="sh">&quot;&quot;&quot;</span>
</code></pre></div>
<p>For <code>table_down</code> code, it is pretty straight forward. In particular, it will be always <code>DROP TABLE &lt;table_name&gt;</code>. For <code>table_up</code>, we will need to generate a list of attribute name mapped with the corresponding in Postgres. What  we will need to do is to write the function <code>postgres_attribute_type_map</code> as following:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">def</span> <span class="n">postgres_attribute_type_map</span><span class="p">(</span><span class="n">attribute_type</span><span class="p">)</span> <span class="k">do</span>
  <span class="k">case</span> <span class="n">attribute_type</span> <span class="k">do</span>
    <span class="s2">&quot;float&quot;</span> <span class="p">-&gt;</span> <span class="s2">&quot;real&quot;</span>
    <span class="s2">&quot;string&quot;</span> <span class="p">-&gt;</span> <span class="s2">&quot;varchar(255)&quot;</span>
    <span class="s2">&quot;decimal&quot;</span> <span class="p">-&gt;</span> <span class="s2">&quot;decimal(10, 4)&quot;</span>
    <span class="s2">&quot;datetime&quot;</span> <span class="p">-&gt;</span> <span class="s2">&quot;timestamp&quot;</span>
    <span class="n">other</span> <span class="p">-&gt;</span> <span class="n">other</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>You will notice that it is quite similar to the function <code>ecto_attribute_type_map</code> that we wrote earlier. Here, I have just outlined a few that I will need but you are free to add in more as per your need. Next, inside the function that  we already have - <code>attributes_table_from_attributes_array</code>, let&#39;s add the below code to the function block of <code>Enum.reduce</code>:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">migration_attributes_table</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">dict</span><span class="p">,</span> <span class="ss">:for_migration_file</span><span class="p">,</span> <span class="p">[])</span>
<span class="n">migration_attributes_table</span> <span class="p">=</span> <span class="n">migration_attributes_table</span> <span class="err">\</span>
    <span class="o">++</span> <span class="p">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">attribute_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">postgres_attribute_type_map</span><span class="p">(</span><span class="n">attribute_type</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">]</span>
<span class="n">dict</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">dict</span><span class="p">,</span> <span class="ss">:for_migration_file</span><span class="p">,</span> <span class="n">migration_attributes_table</span><span class="p">)</span>
</code></pre></div>
<p>Our complete <code>attributes_table_from_attributes_array</code> function will look like this:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">def</span> <span class="n">attributes_table_from_attributes_array</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span> <span class="k">do</span>
  <span class="nc">Enum</span><span class="p">.</span><span class="n">reduce</span><span class="p">(</span><span class="n">attributes</span><span class="p">,</span> <span class="p">%{},</span> <span class="k">fn</span><span class="p">(</span><span class="n">attribute</span><span class="p">,</span> <span class="n">dict</span><span class="p">)</span> <span class="p">-&gt;</span>
    <span class="k">if</span> <span class="nc">String</span><span class="p">.</span><span class="n">contains?</span><span class="p">(</span><span class="n">attribute</span><span class="p">,</span> <span class="s2">&quot;:&quot;</span><span class="p">)</span> <span class="k">do</span>
      <span class="p">[</span><span class="n">attribute_name</span><span class="p">,</span> <span class="n">attribute_type</span><span class="p">]</span> <span class="p">=</span> <span class="nc">String</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="n">attribute</span><span class="p">,</span> <span class="s2">&quot;:&quot;</span><span class="p">)</span>
    <span class="k">else</span> <span class="c1"># if not specify attribute type, it will be deemed as string</span>
      <span class="p">[</span><span class="n">attribute_name</span><span class="p">,</span> <span class="n">attribute_type</span><span class="p">]</span> <span class="p">=</span> <span class="p">[</span><span class="n">attribute</span><span class="p">,</span> <span class="s2">&quot;string&quot;</span><span class="p">]</span>
    <span class="k">end</span>

    <span class="n">model_attributes_table</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">dict</span><span class="p">,</span> <span class="ss">:for_model_file</span><span class="p">,</span> <span class="p">[])</span>
    <span class="n">model_attributes_table</span> <span class="p">=</span> <span class="n">model_attributes_table</span> <span class="err">\</span>
        <span class="o">++</span> <span class="p">[</span><span class="s2">&quot;field :</span><span class="si">#{</span><span class="n">attribute_name</span><span class="si">}</span><span class="s2">, :</span><span class="si">#{</span><span class="n">ecto_attribute_type_map</span><span class="p">(</span><span class="n">attribute_type</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">]</span>
    <span class="n">dict</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">dict</span><span class="p">,</span> <span class="ss">:for_model_file</span><span class="p">,</span> <span class="n">model_attributes_table</span><span class="p">)</span>

    <span class="n">migration_attributes_table</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">dict</span><span class="p">,</span> <span class="ss">:for_migration_file</span><span class="p">,</span> <span class="p">[])</span>
    <span class="n">migration_attributes_table</span> <span class="p">=</span> <span class="n">migration_attributes_table</span> <span class="err">\</span>
        <span class="o">++</span> <span class="p">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">attribute_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">postgres_attribute_type_map</span><span class="p">(</span><span class="n">attribute_type</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">]</span>
    <span class="n">dict</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">dict</span><span class="p">,</span> <span class="ss">:for_migration_file</span><span class="p">,</span> <span class="n">migration_attributes_table</span><span class="p">)</span>
  <span class="k">end</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<p>Now we can define <code>generate_migration_file</code> function as following:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defp</span> <span class="n">generate_migration_file</span><span class="p">(</span><span class="n">model_name</span><span class="p">,</span> <span class="n">repo_module</span><span class="p">,</span> <span class="n">table_fields</span><span class="p">)</span> <span class="k">do</span>
  <span class="n">path</span> <span class="p">=</span> <span class="nc">Path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="nc">System</span><span class="p">.</span><span class="n">cwd</span><span class="p">(),</span> <span class="s2">&quot;/priv/repo/migrations&quot;</span><span class="p">)</span>
  <span class="n">migration_file</span> <span class="p">=</span> <span class="nc">Path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">timestamp</span><span class="si">}</span><span class="s2">_create_</span><span class="si">#{</span><span class="n">underscore</span><span class="p">(</span><span class="n">model_name</span><span class="p">)</span><span class="si">}</span><span class="s2">.exs&quot;</span><span class="p">)</span>
  <span class="n">table_name</span> <span class="p">=</span> <span class="nc">Inflex</span><span class="p">.</span><span class="n">pluralize</span><span class="p">(</span><span class="n">underscore</span><span class="p">(</span><span class="n">model_name</span><span class="p">))</span>

  <span class="n">create_file</span> <span class="n">migration_file</span><span class="p">,</span> <span class="n">migration_template</span><span class="p">(</span>
    <span class="ss">mod</span><span class="p">:</span> <span class="nc">Module</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">repo_module</span><span class="p">,</span> <span class="nc">Migrations</span><span class="p">,</span> <span class="n">camelize</span><span class="p">(</span><span class="n">model_name</span><span class="p">)]),</span>
    <span class="ss">table_up</span><span class="p">:</span> <span class="s2">&quot;CREATE TABLE </span><span class="si">#{</span><span class="n">table_name</span><span class="si">}</span><span class="s2">( </span><span class="err">\</span><span class="s2"></span>
<span class="s2">                  </span><span class="se">\n\t\t\t\t</span><span class="si">#{</span><span class="nc">Enum</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="s2">&quot;id serial primary key&quot;</span><span class="p">]</span> <span class="o">++</span> <span class="n">table_fields</span><span class="p">,</span> <span class="err">\</span>
                                         <span class="s2">&quot;,</span><span class="se">\n\t\t\t\t</span><span class="s2">&quot;</span><span class="p">)</span><span class="si">}</span><span class="s2">)&quot;</span><span class="p">,</span>
    <span class="ss">table_down</span><span class="p">:</span> <span class="s2">&quot;DROP TABLE </span><span class="si">#{</span><span class="n">table_name</span><span class="si">}</span><span class="s2">&quot;</span>
  <span class="p">)</span>
<span class="k">end</span>

<span class="kd">defp</span> <span class="n">timestamp</span> <span class="k">do</span>
  <span class="p">{</span> <span class="p">{</span><span class="n">y</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">d</span><span class="p">},</span> <span class="p">{</span><span class="n">hh</span><span class="p">,</span> <span class="n">mm</span><span class="p">,</span> <span class="n">ss</span><span class="p">}</span> <span class="p">}</span> <span class="p">=</span> <span class="ss">:calendar</span><span class="p">.</span><span class="n">universal_time</span><span class="p">()</span>
  <span class="s2">&quot;</span><span class="si">#{</span><span class="n">y</span><span class="si">}#{</span><span class="n">pad</span><span class="p">(</span><span class="n">m</span><span class="p">)</span><span class="si">}#{</span><span class="n">pad</span><span class="p">(</span><span class="n">d</span><span class="p">)</span><span class="si">}#{</span><span class="n">pad</span><span class="p">(</span><span class="n">hh</span><span class="p">)</span><span class="si">}#{</span><span class="n">pad</span><span class="p">(</span><span class="n">mm</span><span class="p">)</span><span class="si">}#{</span><span class="n">pad</span><span class="p">(</span><span class="n">ss</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="k">end</span>

<span class="kd">defp</span> <span class="n">pad</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="ow">when</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">,</span> <span class="ss">do</span><span class="p">:</span> <span class="p">&lt;&lt;</span> <span class="sc">?0</span><span class="p">,</span> <span class="sc">?0</span> <span class="o">+</span> <span class="n">i</span> <span class="p">&gt;&gt;</span>
<span class="kd">defp</span> <span class="n">pad</span><span class="p">(</span><span class="n">i</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="n">to_string</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</code></pre></div>
<p>Note that <code>timestamp</code>, <code>pad</code> function are the functions I took out from <code>Ecto</code> migration generation file. These are helpers to help generate the file name for the migration file. </p>

<p>As you might notice, we have also done the same thing as when we generate the Model file. We first find the path to the migration file and then create the file using the <code>migration_template</code> function. Again, we have also joined the lines of attribute mapped with its corresponding attribute for Postgres database to form the <code>CREATE TABLE</code> SQL. Finally, we will call this <code>generate_migration_file</code> inside <code>run</code> function:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">generate_migration_file</span><span class="p">(</span><span class="n">model_name</span><span class="p">,</span> <span class="n">project_module_name</span><span class="p">,</span> <span class="err">\</span>
  <span class="nc">Map</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">attributes_table_map</span><span class="p">,</span> <span class="ss">:for_migration_file</span><span class="p">,</span> <span class="p">[]))</span>
</code></pre></div>
<p>That&#39;s all for now. You can get the complete source code for this task in the following URL:</p>

<p><a href="https://raw.githubusercontent.com/learnelixir/hardware-zone/phoenix-0.6.0/lib/mix/tasks/g.ex">https://raw.githubusercontent.com/learnelixir/hardware-zone/phoenix-0.6.0/lib/mix/tasks/g.ex</a></p>

<h3>Conclusion</h3>

<p>With this custom mix task, I can now enjoy generating model file for Phoenix application. This can be easily extended to generate controller file and more migrations, but let&#39;s leave it as it is for now. If you have any suggestions, or better ways of doing this, feel free to let me know. </p>

<p>Happy generating code :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Real Time To-Do List With Phoenix Channel]]></title>
    <link href="http://learnelixir.com/blog/2014/10/30/real-time-to-do-list-with-phoenix-channel/"/>
    <updated>2014-10-30T21:44:38+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/30/real-time-to-do-list-with-phoenix-channel</id>
    <content type="html"><![CDATA[<p><strong>UPDATE</strong> on 27 Nov 14: I have updated this article in order to work with Phoenix framework version 0.6.0. Previously the Phoenix framework used in this article was 0.5.0
<hr/><br/></p>

<p>Channel websocket is a pretty cool feature built in Phoenix framework. It is like a controller, but bidirectional and the connection stay alive after server response. The server can push information to the browser without browser asking for it unlike traditional web server. To fully understand and make use of this awesome feature, let&#39;s try to build a Real Time To Do List application in this article. This will be basically a To Do list but it can be shared among your team. Hence everytime a person inside your team check / uncheck a To Do Item, everyone will see that without refreshing the page. </p>

<!-- more -->

<h3>Setup a Phoenix project</h3>

<p>Before we start any thing on this. Let&#39;s look at the end result:</p>

<p><img src="/images/real-time-to-do-app/first_version.gif" alt="Demo" title="Demo"></p>

<p>The source code is available at: <a href="https://github.com/learnelixir/real-time-to-do-app">https://github.com/learnelixir/real-time-to-do-app</a></p>

<hr style='border: 0 none; border-top: 1px dashed #ccc; margin-bottom: 20px;'/>

<p>Now let&#39;s start by setting up a Phoenix project. From Phoenix source folder, key in the following command on your terminal:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix phoenix.new real-time-to-do ../real-time-to-do
</code></pre></div>
<p>And enter that project folder:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">cd</span> ../real-time-to-do
</code></pre></div>
<p>Let&#39;s edit <code>mix.exs</code></p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim mix.exs
</code></pre></div>
<p>Then add in 2 dependencies <code>postgrex</code> and <code>ecto</code>. Remember to include them in the application function as well.</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">def</span> <span class="n">application</span> <span class="k">do</span>
  <span class="p">[</span><span class="ss">mod</span><span class="p">:</span> <span class="p">{</span><span class="n">realtimetodo</span><span class="p">,</span> <span class="p">[]},</span>
   <span class="ss">applications</span><span class="p">:</span> <span class="p">[</span><span class="ss">:phoenix</span><span class="p">,</span> <span class="ss">:cowboy</span><span class="p">,</span> <span class="ss">:logger</span><span class="p">,</span> <span class="ss">:ecto</span><span class="p">,</span> <span class="ss">:postgrex</span><span class="p">]]</span>
<span class="k">end</span> 

<span class="c1"># specifies your project dependencies</span>
<span class="c1">#</span>
<span class="c1"># type `mix help deps` for examples and options</span>
<span class="kd">defp</span> <span class="n">deps</span> <span class="k">do</span>
  <span class="p">[{</span><span class="ss">:phoenix</span><span class="p">,</span> <span class="s2">&quot;0.6.0&quot;</span><span class="p">},</span>
   <span class="p">{</span><span class="ss">:cowboy</span><span class="p">,</span> <span class="s2">&quot;~&gt; 1.0&quot;</span><span class="p">},</span>
   <span class="p">{</span><span class="ss">:ecto</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.2.0&quot;</span><span class="p">},</span>
   <span class="p">{</span><span class="ss">:postgrex</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.6.0&quot;</span><span class="p">}]</span> 
<span class="k">end</span> 
</code></pre></div>
<p>Next, install all the dependencies for the project:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix <span class="k">do</span> deps.get, compile
</code></pre></div>
<p>We are done with the setting up. Let&#39;s move on to prepare our views. </p>

<h3>Setup views for our to-do list</h3>

<p>open <code>application.html.eex</code>:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/templates/layout/application.html.eex
</code></pre></div>
<p>and replace its content with the below code:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;X-UA-Compatible&quot;</span> <span class="na">content=</span><span class="s">&quot;IE=edge&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width, initial-scale=1&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;description&quot;</span> <span class="na">content=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;author&quot;</span> <span class="na">content=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;title&gt;</span>Awesome To Do List<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://code.jquery.com/jquery-1.11.1.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://learnelixir.com/js/phoenix.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://learnelixir.com/js/Sortable.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://learnelixir.com/js/app.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;http://learnelixir.com/css/phoenix.css&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;http://learnelixir.com/css/app.css&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/head&gt;</span>

  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
      <span class="err">&lt;</span>%= @inner %&gt;
    <span class="nt">&lt;/div&gt;</span> <span class="c">&lt;!-- /container --&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div>
<p>The followings have been changed in this file:</p>

<ul>
<li>Remove phoenix header and footer</li>
<li>Include jquery library on line 11</li>
<li>Include phoenix library on line 12. Note that <code>phoenix.js</code> is available in <code>priv/static/js</code> folder.</li>
<li>Include <code>Sortable.min.js</code> on line 13. The sortable is a library from this site <a href="http://rubaxa.github.io/Sortable/">http://rubaxa.github.io/Sortable/</a>.</li>
<li>Include <code>app.js</code> on line 14.</li>
<li>Include <code>app.css</code> on line 16.</li>
</ul>

<p>We will need to create an empty <code>app.js</code> file for now inside <code>priv/static/js</code> folder. For <code>app.css</code>, we will not go through the css code in this article. However you can grab the source code for <code>/css/app.css</code> at <a href="https://raw.githubusercontent.com/learnelixir/real-time-to-do-app/master/priv/static/css/app.css">https://raw.githubusercontent.com/learnelixir/real-time-to-do-app/master/priv/static/css/app.css</a> and put inside the <code>priv/static/css</code> folder.</p>

<p>Let&#39;s move on to creating a channel in our router.</p>

<h3>Set up a Channel in router</h3>

<p>First open <code>web/router.ex</code></p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/router.ex
</code></pre></div>
<p>we will need to add in the following line to use of phoenix socket:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kn">use</span> <span class="nc">Phoenix.Router.Socket</span><span class="p">,</span> <span class="ss">mount</span><span class="p">:</span> <span class="s2">&quot;/ws&quot;</span>
</code></pre></div>
<p>Then add in the following 2 things:</p>

<ul>
<li>An <code>index</code> page for our app, which will link to one of our controllers.</li>
<li>Create a channel so that everybody can subscribe to this channel to see our awesome to do list.</li>
</ul>

<p>These can be achieved by adding 2 lines below under <code>scope &quot;/&quot;</code> do block</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">get</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="nc">RealTimeToDo.ToDosController</span><span class="p">,</span> <span class="ss">:index</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:root</span>
<span class="n">channel</span> <span class="s2">&quot;to_dos&quot;</span><span class="p">,</span> <span class="nc">RealTimeToDo.ToDoChannel</span>
</code></pre></div>
<p>Our final router will look like this:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">RealTimeToDo.Router</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Phoenix.Router</span>
  <span class="kn">use</span> <span class="nc">Phoenix.Router.Socket</span><span class="p">,</span> <span class="ss">mount</span><span class="p">:</span> <span class="s2">&quot;/ws&quot;</span>

  <span class="n">pipeline</span> <span class="ss">:browser</span> <span class="k">do</span>
    <span class="n">plug</span> <span class="ss">:accepts</span><span class="p">,</span> <span class="sx">~w(html)</span>
    <span class="n">plug</span> <span class="ss">:fetch_session</span>
  <span class="k">end</span> 

  <span class="n">pipeline</span> <span class="ss">:api</span> <span class="k">do</span>
    <span class="n">plug</span> <span class="ss">:accepts</span><span class="p">,</span> <span class="sx">~w(json)</span>
  <span class="k">end</span> 

  <span class="n">scope</span> <span class="s2">&quot;/&quot;</span> <span class="k">do</span>
    <span class="c1"># Use the default browser stack.</span>
    <span class="n">pipe_through</span> <span class="ss">:browser</span>
    <span class="n">get</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="nc">RealTimeToDo.ToDosController</span><span class="p">,</span> <span class="ss">:index</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:root</span>
    <span class="n">channel</span> <span class="s2">&quot;to_dos&quot;</span><span class="p">,</span> <span class="nc">RealTimeToDo.ToDoChannel</span>
  <span class="k">end</span> 
<span class="k">end</span>
</code></pre></div>
<p>We are done with router for now. Let&#39;s move to create a <code>Repo</code> and <code>Item</code> model</p>

<h3>Create Repo and Item model</h3>

<p>First create a database name <code>to_dos</code> from your terminal:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>createdb to_dos --encoding<span class="o">=</span><span class="s1">&#39;utf-8&#39;</span> --locale<span class="o">=</span>en_US.UTF-8 --template<span class="o">=</span>template0<span class="p">;</span>
</code></pre></div>
<p>Next, create a Repo by creating file <code>web/models/repo.ex</code></p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/models/repo.ex
</code></pre></div>
<p>Paste in the following code. You will need to change <code>postgresuser</code> and <code>password</code> according to your database:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">RealTimeToDo.Repo</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Ecto.Repo</span><span class="p">,</span> <span class="ss">adapter</span><span class="p">:</span> <span class="nc">Ecto.Adapters.Postgres</span>

  <span class="kd">def</span> <span class="n">conf</span> <span class="k">do</span>
    <span class="n">parse_url</span> <span class="s2">&quot;ecto://postgresuser:password@localhost/to_dos&quot;</span>
  <span class="k">end</span> 

  <span class="kd">def</span> <span class="n">priv</span> <span class="k">do</span>
    <span class="n">app_dir</span><span class="p">(</span><span class="ss">:real_time_to_do</span><span class="p">,</span> <span class="s2">&quot;priv/repo&quot;</span><span class="p">)</span>
  <span class="k">end</span> 
<span class="k">end</span>
</code></pre></div>
<p>Next, create <code>Item</code> model:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/models/item.ex
</code></pre></div>
<p>and add in the code below:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">Item</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Ecto.Model</span>

  <span class="n">schema</span> <span class="s2">&quot;items&quot;</span> <span class="k">do</span>
    <span class="n">field</span> <span class="ss">:description</span><span class="p">,</span> <span class="ss">:string</span>
    <span class="n">field</span> <span class="ss">:position</span><span class="p">,</span> <span class="ss">:integer</span>
    <span class="n">field</span> <span class="ss">:done</span><span class="p">,</span> <span class="ss">:boolean</span>
    <span class="n">field</span> <span class="ss">:updated_at</span><span class="p">,</span> <span class="ss">:datetime</span>
  <span class="k">end</span> 
<span class="k">end</span>
</code></pre></div>
<p>Next, trigger the following command to create Item migration from your terminal:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix ecto.gen.migration RealTimeToDo.Repo create_item
</code></pre></div>
<p>Open the newly created migration file:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim priv/repo/migrations/20141031230205_create_item.exs  
</code></pre></div>
<p>And paste in the code below:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">RealTimeToDo.Repo.Migrations.CreateItem</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Ecto.Migration</span>

  <span class="kd">def</span> <span class="n">up</span> <span class="k">do</span>
    <span class="s2">&quot;CREATE TABLE items( </span><span class="err">\</span><span class="s2"></span>
<span class="s2">          id serial primary key, </span><span class="err">\</span><span class="s2"></span>
<span class="s2">          description text, </span><span class="err">\</span><span class="s2"></span>
<span class="s2">          position integer,</span>
<span class="s2">          done boolean, </span><span class="err">\</span><span class="s2"></span>
<span class="s2">          updated_at timestamp)&quot;</span>
  <span class="k">end</span> 

  <span class="kd">def</span> <span class="n">down</span> <span class="k">do</span>
    <span class="s2">&quot;DROP TABLE items&quot;</span>
  <span class="k">end</span> 
<span class="k">end</span>
</code></pre></div>
<p>Lastly for this section, let&#39;s run the migration</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix ecto.migrate RealTimeToDo.Repo
</code></pre></div>
<p>Next we will create <code>RealTimeToDo.ToDosController</code> in order to show the index page for our app.</p>

<h3>Create TodosController for index page</h3>

<p>Let&#39;s start by creating the controller file:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/controllers/to_dos_controller.ex
</code></pre></div>
<p>We will only need an <code>index</code> action, which will retrieve all the to-do items and done items sorted by position attribute and render the <code>index</code> page. The code for this controller is presented below:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">RealTimeToDo.ToDosController</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Phoenix.Controller</span>
  <span class="kn">alias</span> <span class="nc">RealTimeToDo.Repo</span>
  <span class="kn">import</span> <span class="nc">Ecto.Query</span>

  <span class="n">plug</span> <span class="ss">:action</span>

  <span class="kd">def</span> <span class="n">index</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="n">_params</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">to_do_items</span> <span class="p">=</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="nc">Item</span>
                            <span class="o">|&gt;</span> <span class="n">where</span><span class="p">([</span><span class="n">item</span><span class="p">],</span> <span class="n">item</span><span class="p">.</span><span class="n">done</span> <span class="o">==</span> <span class="no">false</span><span class="p">)</span>
                            <span class="o">|&gt;</span> <span class="n">order_by</span><span class="p">([</span><span class="n">item</span><span class="p">],</span> <span class="ss">asc</span><span class="p">:</span> <span class="n">item</span><span class="p">.</span><span class="n">position</span><span class="p">))</span>

    <span class="n">done_items</span> <span class="p">=</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="nc">Item</span> 
                            <span class="o">|&gt;</span> <span class="n">where</span><span class="p">([</span><span class="n">item</span><span class="p">],</span> <span class="n">item</span><span class="p">.</span><span class="n">done</span> <span class="o">==</span> <span class="no">true</span><span class="p">)</span> 
                            <span class="o">|&gt;</span> <span class="n">order_by</span><span class="p">([</span><span class="n">item</span><span class="p">],</span> <span class="ss">asc</span><span class="p">:</span> <span class="n">item</span><span class="p">.</span><span class="n">position</span><span class="p">))</span>

    <span class="n">render</span> <span class="n">conn</span><span class="p">,</span> <span class="s2">&quot;index.html&quot;</span><span class="p">,</span> <span class="ss">to_do_items</span><span class="p">:</span> <span class="n">to_do_items</span><span class="p">,</span> <span class="ss">done_items</span><span class="p">:</span> <span class="n">done_items</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Note that we are querying for <code>to_do_item</code> from line 9 - 11 and querying for <code>done_items</code> from line 13 - 15.</p>

<p>Now, let&#39;s move on to create <code>index</code> page:</p>

<h3>Create index page for items list</h3>

<p>First we will need to create <code>to_dos_view.ex</code> file under <code>web/views</code> folder:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/views/to_dos_view.ex
</code></pre></div>
<p>and paste in the code below:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">RealTimeToDo.ToDosView</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">RealTimeToDo.View</span>
<span class="k">end</span>
</code></pre></div>
<p>Next create a folder <code>to_dos</code> under <code>web/templates</code>:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mkdir web/templates/to_dos
</code></pre></div>
<p>Then create <code>index.html.eex</code> under this folder:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/templates/to_dos/index.html.eex
</code></pre></div>
<p>Inside this view we will need to list down all the items that are not yet done and are done grouped into 2 sections. Each displayed item is then rendered using a partial view <code>item.html.eex</code>, which will be described shortly. There is also a textbox on top to let user key in anew item and a link for arranging the items within each of the to-do and done lists mentioned above:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;description&quot;</span> <span class="na">id=</span><span class="s">&quot;new_item&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;New Item&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&#39;to_do_list_container&#39;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h3&gt;</span>
    To Do List
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&#39;arrange-items&#39;</span> <span class="na">for=</span><span class="s">&quot;#to_do_list&quot;</span><span class="nt">&gt;</span>Arrange items<span class="nt">&lt;span&gt;</span>
  <span class="nt">&lt;/h3&gt;</span>
  <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&#39;to_do_list&#39;</span><span class="nt">&gt;</span>
    <span class="err">&lt;</span>%= for item <span class="nt">&lt;-</span> <span class="err">@</span><span class="na">to_do_items</span> <span class="na">do</span> <span class="err">%</span><span class="nt">&gt;</span>
      <span class="err">&lt;</span>%= render &quot;item.html&quot;, item: item %&gt;
    <span class="err">&lt;</span>% end %&gt;
  <span class="nt">&lt;/ul&gt;</span>

  <span class="nt">&lt;h3&gt;</span>
    Done List
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&#39;arrange-items&#39;</span> <span class="na">for=</span><span class="s">&quot;#done_list&quot;</span><span class="nt">&gt;</span>Arrange items<span class="nt">&lt;span&gt;</span>
  <span class="nt">&lt;/h3&gt;</span>
  <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&#39;done_list&#39;</span><span class="nt">&gt;</span>
    <span class="err">&lt;</span>%= for item <span class="nt">&lt;-</span> <span class="err">@</span><span class="na">done_items</span> <span class="na">do</span> <span class="err">%</span><span class="nt">&gt;</span>
      <span class="err">&lt;</span>%= render &quot;item.html&quot;, item: item %&gt;
    <span class="err">&lt;</span>% end %&gt;
  <span class="nt">&lt;/ul&gt;</span>
<span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;script </span><span class="na">language=</span><span class="s">&#39;javascript&#39;</span><span class="nt">&gt;</span>
  <span class="nx">ToDoApp</span><span class="p">.</span><span class="nx">init</span><span class="p">();</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div>
<p>The partial view <code>item.html.eex</code> file can be created in the same folder <code>web/templates/todos</code>.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/templates/to_dos/item.html.eex
</code></pre></div>
<p>with the content:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;li</span> <span class="na">data-id=</span><span class="s">&#39;&lt;%= @item.id %&gt;&#39;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&#39;checkbox&#39;</span> <span class="na">id=</span><span class="s">&#39;item_&lt;%= @item.id %&gt;&#39;</span> 
         <span class="na">class=</span><span class="s">&#39;item-done&#39;</span> <span class="err">&lt;%=</span> <span class="na">if</span> <span class="err">@</span><span class="na">item</span><span class="err">.</span><span class="na">done</span><span class="err">,</span> <span class="na">do:</span> <span class="err">&quot;</span><span class="na">checked</span><span class="err">&quot;</span> <span class="err">%</span><span class="nt">&gt;</span> /&gt;
  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&#39;item-description&#39;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= @item.description %&gt;<span class="nt">&lt;/span&gt;</span>
  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&#39;edit-item-description hidden&#39;</span><span class="nt">&gt;&lt;input</span> <span class="na">type=</span><span class="s">&#39;text&#39;</span> <span class="nt">/&gt;&lt;/span&gt;</span>
  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&#39;edit-item&#39;</span><span class="nt">&gt;</span>edit<span class="nt">&lt;/span&gt;</span>
  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&#39;delete-item&#39;</span><span class="nt">&gt;</span>remove<span class="nt">&lt;/span&gt;</span>
<span class="nt">&lt;/li&gt;</span>
</code></pre></div>
<ul>
<li>On line 1, we include <code>data-id</code> attribute with rendering item&#39;s id. This is for the sort function described in the next section.</li>
<li>On line 2, we have a check box, which will be checked if the item is marked as done.</li>
<li>On line 4, we are showing item description.</li>
<li>On line 5, we are having an hidden textbox. This is going to be shown when the edit link is clicked by a user.</li>
<li>On line 6, we are showing the edit button for this item.</li>
<li>On line 7, we are showing the remove button for this item.</li>
</ul>

<h4>To Do List Channel</h4>

<p>Let&#39;s start by creating a channel file <code>web/channels/to_do_channel.ex</code>:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/channels/to_do_channel.ex
</code></pre></div>
<p>with the initial code:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">RealTimeToDo.ToDoChannel</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Phoenix.Channel</span>
  <span class="kn">alias</span> <span class="nc">RealTimeToDo.Repo</span>

  <span class="kd">def</span> <span class="n">join</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="s2">&quot;list&quot;</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span> <span class="k">do</span>
    <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">socket</span><span class="p">}</span>
  <span class="k">end</span>

  <span class="kd">defp</span> <span class="n">atomize_keys</span><span class="p">(</span><span class="n">struct</span><span class="p">)</span> <span class="k">do</span>
    <span class="nc">Enum</span><span class="p">.</span><span class="n">reduce</span> <span class="n">struct</span><span class="p">,</span> <span class="p">%{},</span> <span class="k">fn</span><span class="p">({</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">},</span> <span class="n">map</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nc">Map</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">map</span><span class="p">,</span> <span class="nc">String</span><span class="p">.</span><span class="n">to_atom</span><span class="p">(</span><span class="n">k</span><span class="p">),</span> <span class="n">v</span><span class="p">)</span> <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Note that the action <code>join</code> must always be there for Phoenix Channel. This is to authorize users joining this socket. In order to let someone pass the check and join the channel, we will only need to return <code>{:ok, socket}</code>. Otherwise, you will need to return <code>{:error, socket, :unauthorized}</code>. For this case, just let our awesome list open to public by returning <code>{:ok, socket}</code> without any checking. This can be easily extended when we have a login function, we can check if the current logged in user is authorized to subscribe to a list&#39;s events.</p>

<p>As mentioned earlier, we will need to think Channel as Controller. Hence, there will be somewhat similar CRUD actions inside Channel&#39;s code. On top of that is the implementation for the information pushing to channel subscribers. Let&#39;s first list down all the actions that the user will take when dealing with a To-do list. These actions a user takes will then trigger corresponding events in a channel. This channel will then reply to the client or broadcast an event to everyone. The required list of actions is as following:</p>

<ul>
<li>Create a New Item.</li>
<li>Mark an Item as done by clicking on the unchecked check box.</li>
<li>Mark an Item as undone by clicking on the checked check box.</li>
<li>Delete an item.</li>
<li>Update an item description.</li>
<li>Arrange items in a certain order</li>
</ul>

<p>These actions will be mapped to 6 events in a Channel. For action 2 and 3, let&#39;s group them under toggle an item done status. Now, let&#39;s list them all in the channel <code>defmodule</code> created earlier:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">def</span> <span class="n">event</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="s2">&quot;create:item&quot;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span> <span class="k">do</span>
  <span class="n">socket</span>
<span class="k">end</span>

<span class="kd">def</span> <span class="n">event</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="s2">&quot;toggle:item&quot;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span> <span class="k">do</span>
  <span class="n">socket</span>
<span class="k">end</span>

<span class="kd">def</span> <span class="n">event</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="s2">&quot;delete:item&quot;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span> <span class="k">do</span>
  <span class="n">socket</span>
<span class="k">end</span>

<span class="kd">def</span> <span class="n">event</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="s2">&quot;update:item&quot;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span> <span class="k">do</span>
  <span class="n">socket</span>
<span class="k">end</span>

<span class="kd">def</span> <span class="n">event</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="s2">&quot;arrange:items&quot;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span> <span class="k">do</span>
  <span class="n">socket</span>
<span class="k">end</span>
</code></pre></div>
<p>Note that for each socket, there is a need to return <code>socket</code> so that it can take effect. Now, let&#39;s go through each event and put in the implementation for each. As you will notice, the implementation for each of the events is quite closed to the implementation described in the corresponding actions of the CRUD actions implemented in a controler.</p>

<h4>create:item event</h4>

<p>This event is triggered when a user submits a new item to the channel. The app needs to insert the new item into the database and then broadcast this newly created item to everyone in the channel [Line 5]. The code for this event is presented below: </p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">def</span> <span class="n">event</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="s2">&quot;create:item&quot;</span><span class="p">,</span> <span class="p">%{</span><span class="s2">&quot;item&quot;</span> <span class="p">=&gt;</span> <span class="n">params</span><span class="p">})</span> <span class="k">do</span>
  <span class="n">item</span> <span class="p">=</span> <span class="n">create_item</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">item</span> <span class="k">do</span>
    <span class="n">item_html</span> <span class="p">=</span> <span class="nc">Phoenix.View</span><span class="p">.</span><span class="n">render</span> <span class="nc">RealTimeToDo.ToDosView</span><span class="p">,</span> <span class="s2">&quot;item.html&quot;</span><span class="p">,</span> <span class="ss">item</span><span class="p">:</span> <span class="n">item</span>
    <span class="n">broadcast</span> <span class="n">socket</span><span class="p">,</span> <span class="s2">&quot;create:item&quot;</span><span class="p">,</span> <span class="p">%{</span><span class="ss">item_html</span><span class="p">:</span> <span class="n">item_html</span><span class="p">}</span>
  <span class="k">end</span>
  <span class="n">socket</span>
<span class="k">end</span>

<span class="kd">defp</span> <span class="n">create_item</span><span class="p">(</span><span class="n">params</span><span class="p">)</span> <span class="k">do</span>
  <span class="n">item</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">merge</span><span class="p">(%</span><span class="nc">Item</span><span class="p">{</span><span class="ss">done</span><span class="p">:</span> <span class="no">false</span><span class="p">},</span> <span class="n">atomize_keys</span><span class="p">(</span><span class="n">params</span><span class="p">))</span>
  <span class="k">case</span> <span class="nc">Item</span><span class="p">.</span><span class="n">validate</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="k">do</span>
    <span class="p">[]</span> <span class="p">-&gt;</span>
      <span class="n">item</span> <span class="p">=</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
    <span class="n">errors</span> <span class="p">-&gt;</span>
      <span class="no">nil</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>One thing to highlight is line 4, this is where we render the HTML of the item using <code>Phoenix.View.render</code>, this html is then broadcast to everyone on the channel. It is the same HTML that we use to render individual item inside the <code>index</code> event mentioned ealier.</p>

<h4>toggle:item event</h4>

<p>This event is triggered when a user clicks on an item check box to mark an item as done or undone. Once this event is received on the channel, the channel will then broadcast this event to everyone [Line 3]. The code for this event is presented below: 
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">def</span> <span class="n">event</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">quot</span><span class="p">;</span><span class="n">toggle</span><span class="ss">:item</span><span class="o">&amp;</span><span class="n">quot</span><span class="p">;,</span> <span class="n">data</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">item</span> <span class="p">=</span> <span class="n">toggle</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">item</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">done</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">status</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="o">&amp;</span><span class="n">quot</span><span class="p">;</span><span class="n">item</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">id</span><span class="o">&amp;</span><span class="n">quot</span><span class="p">;])</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">item</span><span class="p">,</span> <span class="ss">do</span><span class="p">:</span> <span class="n">broadcast</span> <span class="n">socket</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">quot</span><span class="p">;</span><span class="n">toggle</span><span class="ss">:item</span><span class="o">&amp;</span><span class="n">quot</span><span class="p">;,</span> <span class="p">%{</span><span class="ss">item</span><span class="p">:</span> <span class="n">item</span><span class="p">}</span>
</span><span class='line'>  <span class="n">socket</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">defp</span> <span class="n">toggle</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">item</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">done</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">status</span><span class="p">(</span><span class="n">item</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">id</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nc">Item</span><span class="p">,</span> <span class="nc">String</span><span class="p">.</span><span class="n">to</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">integer</span><span class="p">(</span><span class="n">item</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">id</span><span class="p">))</span>
</span><span class='line'>    <span class="n">item</span> <span class="ow">when</span> <span class="n">is_map</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>      <span class="n">item</span> <span class="p">=</span> <span class="p">%{</span><span class="n">item</span> <span class="p">|</span> <span class="ss">done</span><span class="p">:</span> <span class="o">!</span><span class="n">item</span><span class="p">.</span><span class="n">done</span><span class="p">}</span>
</span><span class='line'>      <span class="nc">Repo</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>      <span class="n">item</span>
</span><span class='line'>    <span class="bp">_</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>      <span class="no">nil</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Note that on line 9, we are negating <code>item.done</code> to toggle the current status of an item.</p>

<h4>delete:item event</h4>

<p>This event is triggered when a user clicks on the delete link next an item. Once this event is received on the channel, we will need broadcast this event to everyone on the same channel if the deletion is successful [Line 3]. The code for this event is as following:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">def</span> <span class="n">event</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="s2">&quot;delete:item&quot;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span> <span class="k">do</span>
  <span class="n">delete_item</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s2">&quot;item_id&quot;</span><span class="p">])</span> 
  <span class="n">broadcast</span> <span class="n">socket</span><span class="p">,</span> <span class="s2">&quot;delete:item&quot;</span><span class="p">,</span> <span class="p">%{</span><span class="ss">item</span><span class="p">:</span> <span class="n">item</span><span class="p">}</span>
  <span class="n">socket</span>
<span class="k">end</span>

<span class="kd">def</span> <span class="n">delete_item</span><span class="p">(</span><span class="n">item_id</span><span class="p">)</span> <span class="k">do</span>
  <span class="k">case</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nc">Item</span><span class="p">,</span> <span class="nc">String</span><span class="p">.</span><span class="n">to_integer</span><span class="p">(</span><span class="n">item_id</span><span class="p">))</span> <span class="k">do</span>
    <span class="n">item</span> <span class="ow">when</span> <span class="n">is_map</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="p">-&gt;</span>
      <span class="nc">Repo</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
      <span class="n">item</span>
    <span class="bp">_</span> <span class="p">-&gt;</span>
      <span class="no">nil</span> 
  <span class="k">end</span> 
<span class="k">end</span>
</code></pre></div>
<h4>update:item event</h4>

<p>This event is triggered when a user clicks on edit an item, change the description and hit save button. Once this event is received on the channel, the system will then broadcast this event to everyone in the channel with the updated item. The code for this event is as following:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">def</span> <span class="n">event</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="s2">&quot;update:item&quot;</span><span class="p">,</span> <span class="p">%{</span><span class="s2">&quot;item_id&quot;</span> <span class="p">=&gt;</span> <span class="n">item_id</span><span class="p">,</span> <span class="s2">&quot;item&quot;</span> <span class="p">=&gt;</span> <span class="n">params</span><span class="p">})</span> <span class="k">do</span>
  <span class="n">item</span> <span class="p">=</span> <span class="n">update_item</span><span class="p">(</span><span class="n">item_id</span><span class="p">,</span> <span class="n">params</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">item</span><span class="p">,</span> <span class="ss">do</span><span class="p">:</span> <span class="n">broadcast</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="s2">&quot;update:item&quot;</span><span class="p">,</span> <span class="p">%{</span><span class="ss">item</span><span class="p">:</span> <span class="n">item</span><span class="p">})</span>
  <span class="n">socket</span>
<span class="k">end</span>

<span class="kd">defp</span> <span class="n">update_item</span><span class="p">(</span><span class="n">item_id</span><span class="p">,</span> <span class="n">params</span><span class="p">)</span> <span class="k">do</span>
  <span class="k">case</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nc">Item</span><span class="p">,</span> <span class="nc">String</span><span class="p">.</span><span class="n">to_integer</span><span class="p">(</span><span class="n">item_id</span><span class="p">))</span> <span class="k">do</span>
    <span class="n">item</span> <span class="ow">when</span> <span class="n">is_map</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="p">-&gt;</span>
      <span class="n">atomized_keys_params</span> <span class="p">=</span> <span class="n">atomize_keys</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
      <span class="n">item</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">merge</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">atomized_keys_params</span><span class="p">)</span>
      <span class="k">case</span> <span class="nc">Item</span><span class="p">.</span><span class="n">validate</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="k">do</span>
        <span class="p">[]</span> <span class="p">-&gt;</span>
          <span class="nc">Repo</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
          <span class="n">item</span>
        <span class="bp">_</span> <span class="p">-&gt;</span>
          <span class="no">nil</span>
      <span class="k">end</span> 
    <span class="bp">_</span> <span class="p">-&gt;</span>
      <span class="no">nil</span>
  <span class="k">end</span>
<span class="k">end</span> 
</code></pre></div>
<h4>arange:item event</h4>

<p>This event is triggered every time a user drags an item to move it to a new position. This will then trigger event <code>arrange:items</code> on the server. The system will need to broadcast this event to everyone in the channel with the new orders of the item [Line 3]. The code for this event is as following:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">def</span> <span class="n">event</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="s2">&quot;arrange:items&quot;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span> <span class="k">do</span>
  <span class="n">update_positions</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s2">&quot;item_ids&quot;</span><span class="p">])</span> 
  <span class="n">broadcast</span> <span class="n">socket</span><span class="p">,</span> <span class="s2">&quot;arrange:items&quot;</span><span class="p">,</span> <span class="p">%{</span><span class="ss">item_ids</span><span class="p">:</span> <span class="n">data</span><span class="p">[</span><span class="s2">&quot;item_ids&quot;</span><span class="p">],</span> <span class="ss">for_list</span><span class="p">:</span> <span class="n">data</span><span class="p">[</span><span class="s2">&quot;for_list&quot;</span><span class="p">]}</span>
  <span class="n">socket</span>
<span class="k">end</span>

<span class="kd">defp</span> <span class="n">update_positions</span><span class="p">(</span><span class="n">item_ids</span><span class="p">)</span> <span class="k">do</span>
  <span class="n">item_ids</span> <span class="p">=</span> <span class="nc">String</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="n">item_ids</span><span class="p">,</span> <span class="s2">&quot;,&quot;</span><span class="p">)</span>
                    <span class="o">|&gt;</span> <span class="nc">Enum</span><span class="p">.</span><span class="n">map</span> <span class="k">fn</span> <span class="n">item_id</span> <span class="p">-&gt;</span> <span class="nc">String</span><span class="p">.</span><span class="n">to_integer</span><span class="p">(</span><span class="n">item_id</span><span class="p">)</span> <span class="k">end</span>

  <span class="n">items</span> <span class="p">=</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="nc">Item</span> <span class="o">|&gt;</span> <span class="n">where</span><span class="p">([</span><span class="n">item</span><span class="p">],</span> <span class="n">item</span><span class="p">.</span><span class="n">id</span> <span class="ow">in</span> <span class="n">array</span><span class="p">(</span><span class="o">^</span><span class="n">item_ids</span><span class="p">,</span> <span class="ss">:integer</span><span class="p">)))</span>
  <span class="n">item_hash</span> <span class="p">=</span> <span class="nc">Enum</span><span class="p">.</span><span class="n">reduce</span> <span class="n">items</span><span class="p">,</span> <span class="p">%{},</span> <span class="k">fn</span> <span class="n">item</span><span class="p">,</span> <span class="n">map</span> <span class="p">-&gt;</span> <span class="nc">Map</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">map</span><span class="p">,</span> <span class="n">item</span><span class="p">.</span><span class="n">id</span><span class="p">,</span> <span class="n">item</span><span class="p">)</span> <span class="k">end</span>

  <span class="n">item_ids</span> 
    <span class="o">|&gt;</span> <span class="nc">Stream</span><span class="p">.</span><span class="n">with_index</span> 
    <span class="o">|&gt;</span> <span class="nc">Enum</span><span class="p">.</span><span class="n">each</span> <span class="k">fn</span> <span class="p">{</span><span class="n">item_id</span><span class="p">,</span> <span class="n">index</span><span class="p">}</span> <span class="p">-&gt;</span>
      <span class="n">item</span> <span class="p">=</span> <span class="n">item_hash</span><span class="p">[</span><span class="n">item_id</span><span class="p">]</span>
      <span class="nc">Repo</span><span class="p">.</span><span class="n">update</span><span class="p">(%{</span><span class="n">item</span> <span class="p">|</span> <span class="ss">position</span><span class="p">:</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">})</span>
    <span class="k">end</span>
<span class="k">end</span> 
</code></pre></div>
<p>There are quite a number of things happening here. Let&#39;s go through a few key points:</p>

<ul>
<li>On line 2, we are calling <code>update_position</code> with the list of item IDs.</li>
<li>On line 8 and 9 inside <code>update_positions</code> function, we are spliting the list of ids string to form an array of string. It is then converted to cbecome array of integers.</li>
<li>On line 11, we are querying all the items using the list of received item&#39;s ids by using the <code>where</code> condition: <code>where([item], item.id in array(^item_ids, :integer))</code>. This will trigger one SQL query only in order to get all the needed items.</li>
<li>On line 12, we are converting the list of items produced on line 11 to become a map of items whereby the key is the item&#39;s id. This is for instant item retrieval later on using id as the key.</li>
<li>On line 14 - 18, we going through each <code>item_id</code> in the list of received <code>tem_ids</code> and update accordingly the position of each of the item according to the position it appears in the lits of <code>item_ids</code>.</li>
</ul>

<p>For instance, let say we get from the client the string <code>6,4,1,5</code>, we will update item with ID <code>6</code> to have position <code>1</code>, item with ID <code>4</code> to have position <code>2</code>, item with ID <code>1</code> to have position <code>3</code> and so on.</p>

<p>That&#39;s all we need to work on the Channel. Let&#39;s move to the javascript to bind and listen to the events as a result of the broadcast from Phoenix Channel.</p>

<h4>Phoenix channel javascript integration</h4>

<p>What we are going to do for this part is to create event bindings for the following events:</p>

<ul>
<li>Create An Item</li>
<li>Update An Item</li>
<li>Toggle Done Status on An Item</li>
<li>Delete An Item</li>
<li>Arrange items</li>
</ul>

<p>First, let&#39;s edit our <code>app.js</code>:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim priv/static/js/app.js
</code></pre></div>
<p>and put in the <code>init</code> function</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">ToDoApp</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">socket</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Phoenix</span><span class="p">.</span><span class="nx">Socket</span><span class="p">(</span><span class="s2">&quot;/ws&quot;</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">toDoListContainer</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#to_do_list_container&quot;</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">toDoList</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#to_do_list&quot;</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">doneList</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#done_list&quot;</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">newItem</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#new_item&quot;</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">sortableCollection</span> <span class="o">=</span> <span class="p">{};</span>
    <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">socket</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;to_dos&quot;</span><span class="p">,</span> <span class="s2">&quot;list&quot;</span><span class="p">,</span> <span class="p">{},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">channel</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">app</span><span class="p">.</span><span class="nx">bindAndListenToEvents</span><span class="p">(</span><span class="nx">channel</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">},</span>

  <span class="nx">bindAndListenToEvents</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">channel</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>Inside this <code>init</code> function, we are creating a socket and binding all the variables with its corresponding DOM. Then we let the Phoenix socket to join the <code>to_dos</code> socket with <code>list</code> as a topic. Next what we will need to do is to fill in the <code>...</code> to initialise the events binding and listening mentioned above</p>

<h4>Create Item Event</h4>

<p>When a user hits enter in the <code>#new_item</code> text box, we will use the channel to send the event <code>create:item</code> with the text that has been typed inside that text box. This text will be used as the description of the new item. Let&#39;s create a function named <code>bindEventsForCreatingItem</code> with the following source code:</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">bindEventsForCreatingItem</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">channel</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">newItem</span><span class="p">.</span><span class="nx">off</span><span class="p">(</span><span class="s2">&quot;keypress&quot;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;keypress&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span> <span class="o">==</span> <span class="mi">13</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// enter key</span>
      <span class="nx">channel</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s2">&quot;create:item&quot;</span><span class="p">,</span> <span class="p">{</span>
        <span class="nx">item</span><span class="o">:</span> <span class="p">{</span> <span class="nx">description</span><span class="o">:</span> <span class="nx">app</span><span class="p">.</span><span class="nx">newItem</span><span class="p">.</span><span class="nx">val</span><span class="p">()</span> <span class="p">}</span>
      <span class="p">});</span>
      <span class="nx">app</span><span class="p">.</span><span class="nx">newItem</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div>
<p>Then call this <code>bindEventsForCreatingItem</code> inside <code>bindAndListenToEvents</code> function</p>

<p>On the server side, once the channel receives this <code>create:item</code> event, it will creates the item and broadcast the newly created item event <code>create:item</code>. Hence, let&#39;s add in a function to listen for this <code>create:item</code> broadcast event. Name the fuction <code>listenToCreatingItemEvent</code> and call this function inside <code>bindAndListenToEvents</code> function:</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">listenToCreatingItemEvent</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">channel</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
  <span class="nx">channel</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;create:item&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
    <span class="nx">app</span><span class="p">.</span><span class="nx">toDoList</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">item_html</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div>
<p>One the event is received on the front end, the app will simply append the newly created item&#39;s html returning from the channel. </p>

<h4>Toggle Item Event</h4>

<p>Next, we will need to bind the event to all the check boxes, so that every time a check box of an item is checked, an event will be triggered and send to the the channel the event. To do so, let&#39;s create <code>bindEventsForTogglingItem</code> and call it inside <code>bindAndListenToEvents</code> function:</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">bindEventsForTogglingItem</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">channel</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">toDoListContainer</span><span class="p">.</span><span class="nx">delegate</span><span class="p">(</span><span class="s2">&quot;input.item-done&quot;</span><span class="p">,</span> <span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">channel</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s2">&quot;toggle:item&quot;</span><span class="p">,</span> <span class="p">{</span><span class="nx">item_id</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;id&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&quot;item_&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)});</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div>
<p>On the server side, once the channel receives this <code>toggle:item</code> event, it will creates toggle the item done status and broadcast the event <code>toggle:item</code>. Hence, let&#39;s add in a function to listen for this <code>create:item</code> broadcast event. Name the fuction <code>listToTogglingItemEvent</code> and call this function inside <code>bindAndListenToEvents</code> function:</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">listenToTogglingItemEvent</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">channel</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
  <span class="nx">channel</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;toggle:item&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
    <span class="kd">var</span> <span class="nx">item</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">item</span><span class="p">;</span>

    <span class="kd">var</span> <span class="nx">targetItemList</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">toDoList</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">fromItemList</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">doneList</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">done</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">targetItemList</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">doneList</span><span class="p">;</span>
      <span class="nx">fromItemList</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">toDoList</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kd">var</span> <span class="nx">itemCheckBoxDom</span> <span class="o">=</span> <span class="nx">fromItemList</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;#item_&quot;</span> <span class="o">+</span> <span class="nx">item</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
    <span class="nx">itemCheckBoxDom</span><span class="p">.</span><span class="nx">prop</span><span class="p">(</span><span class="s2">&quot;checked&quot;</span><span class="p">,</span> <span class="nx">item</span><span class="p">.</span><span class="nx">done</span> <span class="o">==</span> <span class="mi">1</span><span class="p">);</span> 

    <span class="nx">itemCheckBoxDom</span><span class="p">.</span><span class="nx">parent</span><span class="p">().</span><span class="nx">fadeOut</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">targetItemList</span><span class="p">.</span><span class="nx">prepend</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">fadeIn</span><span class="p">());</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">},</span>
</code></pre></div>
<p>One the event is received on the front end, the app will find the toggled item using item&#39;s id, determine the list that the item is original from, infer the targeted list. It will then fade out the item and prepend it to the list targeted list before fading it in again.</p>

<h4>Update Item Event</h4>

<p>There will be few actions that user need to take before being able to send the updated item to the channel. First, a user will need to click on the edit button. A text box with the content of the item is expected to appear and user can key in the new description. He will then hits enter to submit the new description for that item. Hence, let&#39;s start with creating a function to listen to the click <code>edit</code> button event. Let&#39;s named it <code>bindEventForEditingsItem</code> and call this function in call this function inside <code>bindAndListenToEvents</code> function.</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">bindEventForEditingsItem</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">toDoListContainer</span><span class="p">.</span><span class="nx">delegate</span><span class="p">(</span><span class="s2">&quot;span.edit-item&quot;</span><span class="p">,</span> <span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">itemContainer</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">parent</span><span class="p">();</span>
    <span class="kd">var</span> <span class="nx">itemDescription</span> <span class="o">=</span> <span class="nx">itemContainer</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;span.item-description&quot;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">editItemDescription</span> <span class="o">=</span> <span class="nx">itemContainer</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;span.edit-item-description&quot;</span><span class="p">);</span>
    <span class="nx">itemDescription</span><span class="p">.</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s2">&quot;hidden&quot;</span><span class="p">);</span>
    <span class="nx">editItemDescription</span><span class="p">.</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s2">&quot;hidden&quot;</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;input&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="nx">itemDescription</span><span class="p">.</span><span class="nx">html</span><span class="p">()).</span><span class="nx">focus</span><span class="p">();</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">hasClass</span><span class="p">(</span><span class="s2">&quot;cancel-edit-item&quot;</span><span class="p">))</span> <span class="p">{</span>
      <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s2">&quot;edit&quot;</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s2">&quot;cancel&quot;</span><span class="p">);</span>
    <span class="p">}</span><span class="c1">//end else</span>
    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s2">&quot;cancel-edit-item&quot;</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div>
<p>Let&#39;s go through the above code:</p>

<ul>
<li>On line 3, we will find the item container, which is an <code>li</code> DOM.</li>
<li>On line 4, we will find the <code>item-description</code> span.</li>
<li>On line 5, we will find the <code>edit-item-description</code> span which contains the text box inside.</li>
<li>On line 6, we will just toggle show/hide the item description. </li>
<li>On line 7, we will just toggle show/hide the item description text box container and assign the text box value to be the description of the item.</li>
<li>From line 8 - 12, we wiill show the approriate text for the <code>edit</code> button after being clicked. If the item is not edited at that moment, the text will be set to <code>edit</code>, otherwise, it will be set to <code>cancel</code> instead.</li>
<li>On line 13, we will toggle the <code>cancel-edit-item</code> class the <code>edit</code> button just to mark if the item is being edited.</li>
</ul>

<p>Next, we are going to define the listener for the event that user hits enter on the edit item text box to commit the changes he/she has made. Let&#39;s create a function named <code>bindEventsForUpdatingItem</code> for this purpose and call this function inside <code>bindAndListenToEvents</code></p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">bindEventsForUpdatingItem</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">channel</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">toDoListContainer</span><span class="p">.</span><span class="nx">delegate</span><span class="p">(</span><span class="s2">&quot;span.edit-item-description input&quot;</span><span class="p">,</span> <span class="s2">&quot;keypress&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span> <span class="o">==</span> <span class="mi">13</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">newDescription</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
      <span class="kd">var</span> <span class="nx">itemContainer</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">parents</span><span class="p">(</span><span class="s2">&quot;li:first&quot;</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">itemDescription</span> <span class="o">=</span> <span class="nx">itemContainer</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;span.item-description&quot;</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">itemCheckBox</span> <span class="o">=</span> <span class="nx">itemContainer</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;input.item-done&quot;</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">editItemLink</span> <span class="o">=</span> <span class="nx">itemContainer</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;span.edit-item&quot;</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">editItemDescription</span> <span class="o">=</span> <span class="nx">itemContainer</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;span.edit-item-description&quot;</span><span class="p">);</span>
      <span class="nx">itemDescription</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="nx">newDescription</span><span class="p">).</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s2">&quot;hidden&quot;</span><span class="p">);</span>
      <span class="nx">editItemDescription</span><span class="p">.</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s2">&quot;hidden&quot;</span><span class="p">);</span>
      <span class="nx">editItemLink</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="s2">&quot;edit&quot;</span><span class="p">);</span>

      <span class="nx">channel</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s2">&quot;update:item&quot;</span><span class="p">,</span> <span class="p">{</span>
        <span class="nx">item_id</span><span class="o">:</span> <span class="nx">itemCheckBox</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;id&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&quot;item_&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">),</span> 
        <span class="nx">item</span><span class="o">:</span> <span class="p">{</span> <span class="nx">description</span><span class="o">:</span> <span class="nx">newDescription</span> <span class="p">}</span>
      <span class="p">});</span>
    <span class="p">}</span><span class="c1">//end if</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div>
<ul>
<li>On line 5 - 10 of the above code, we are assigning the approriate DOMs for those that we need. Then we assign back the item description to the description  span on line 11, hide the edit textbox container on line 12 and set the edit link to show the <code>edit</code> text.</li>
<li>From line 15 - 17, we are sending back the event <code>update:item</code> back to server with the item&#39;s ID and its new description. On the server, the application will update the item description and broadcast the event <code>update:item</code>. </li>
<li>We will need to add in the function to listen to the event <code>update:item</code> as the result of the server&#39;s broadcast. Let&#39;s name the function <code>listenToUpdatingItemEvent</code> and call this function inside <code>bindAndListToEvents</code> function:</li>
</ul>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">listenToUpdatingItemEvent</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">channel</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
  <span class="nx">channel</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;update:item&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">item</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">item</span><span class="p">;</span>
    <span class="nx">app</span><span class="p">.</span><span class="nx">toDoListContainer</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;#item_&quot;</span> <span class="o">+</span> <span class="nx">item</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">parent</span><span class="p">().</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;span.item-description&quot;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">description</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div>
<p>Once the event is received on the client side, the app will find the approriate item given the item&#39;s id and update the description span of that item according to the received item&#39;s description.</p>

<h4>Delete Item event</h4>

<p>We will also need to bind an event to the delete button next to each of item to trigger <code>delete:item</code> event when user hits this link. Let&#39;s create function named <code>bindEventsForDeletingItem</code> and call this function inside <code>bindAndListToEvents</code> function:</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">bindEventsForDeletingItem</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">channel</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">toDoListContainer</span><span class="p">.</span><span class="nx">delegate</span><span class="p">(</span><span class="s2">&quot;span.delete-item&quot;</span><span class="p">,</span> <span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">itemContainer</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">parent</span><span class="p">();</span>
    <span class="nx">itemContainer</span><span class="p">.</span><span class="nx">fadeOut</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">itemCheckBox</span> <span class="o">=</span> <span class="nx">itemContainer</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;input.item-done&quot;</span><span class="p">);</span>
      <span class="nx">itemContainer</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span> <span class="c1">// remove the item from the list</span>
      <span class="nx">channel</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s2">&quot;delete:item&quot;</span><span class="p">,</span> <span class="p">{</span><span class="nx">item_id</span><span class="o">:</span> <span class="nx">itemCheckBox</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;id&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&quot;item_&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)});</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div>
<p>After the server receives this <code>delete:item</code> event, it will broadcast this event <code>delete:item</code> with the deleted item. Hence, let&#39;s implement a function to listen to this broadcast event and remove the item accordingly. Let&#39;s name the  function <code>listenToDeletingItemEvent</code> and call its inside <code>bindAndListToEvents</code> function:</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">listenToDeletingItemEvent</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">channel</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
  <span class="nx">channel</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;delete:item&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">item</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">item</span><span class="p">;</span>
    <span class="nx">app</span><span class="p">.</span><span class="nx">toDoListContainer</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;#item_&quot;</span> <span class="o">+</span> <span class="nx">item</span><span class="p">.</span><span class="nx">id</span><span class="p">).</span><span class="nx">parent</span><span class="p">().</span><span class="nx">fadeIn</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">remove</span><span class="p">();</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div>
<h4>Arrange Items event</h4>

<p>When a user clicks on the link Arrange Items, the list of items will need to become sortable, i.e. the item can be dragged to different places. We will need a function to cater for this. Let&#39;s create a function named <code>bindEventsForArrangingItems</code> and call this function inside inside <code>bindAndListToEvents</code> function:</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">bindEventsForArrangingItems</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">channel</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;span.arrange-items&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">forList</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;for&quot;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">listUl</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">forList</span><span class="p">);</span>
    <span class="nx">listUl</span><span class="p">.</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s2">&quot;arranging&quot;</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">listUl</span><span class="p">.</span><span class="nx">hasClass</span><span class="p">(</span><span class="s2">&quot;arranging&quot;</span><span class="p">))</span> <span class="p">{</span>
      <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s2">&quot;I&#39;m done with arrangement&quot;</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">sortable</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Sortable</span><span class="p">(</span><span class="nx">listUl</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">{</span>
        <span class="nx">ghostClass</span><span class="o">:</span> <span class="s2">&quot;sortable-ghost&quot;</span><span class="p">,</span>
        <span class="nx">onUpdate</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
          <span class="kd">var</span> <span class="nx">listOfOrderedIds</span> <span class="o">=</span> <span class="p">[];</span>
          <span class="nx">listUl</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;li&quot;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">listOfOrderedIds</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;input.item-done&quot;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;id&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&quot;item_&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">));</span>
          <span class="p">});</span>
          <span class="nx">channel</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s2">&quot;arrange:items&quot;</span><span class="p">,</span> <span class="p">{</span><span class="nx">item_ids</span><span class="o">:</span> <span class="nx">listOfOrderedIds</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">),</span> <span class="nx">for_list</span><span class="o">:</span> <span class="nx">forList</span><span class="p">});</span>
        <span class="p">}</span>
      <span class="p">});</span>
      <span class="nx">app</span><span class="p">.</span><span class="nx">sortableCollection</span><span class="p">[</span><span class="nx">forList</span><span class="p">]</span> <span class="o">=</span> <span class="nx">sortable</span><span class="p">;</span>
    <span class="p">}</span><span class="c1">//end if</span>
    <span class="k">else</span> <span class="p">{</span>
      <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s2">&quot;Arrange Items&quot;</span><span class="p">);</span>
      <span class="nx">app</span><span class="p">.</span><span class="nx">sortableCollection</span><span class="p">[</span><span class="nx">forList</span><span class="p">].</span><span class="nx">destroy</span><span class="p">();</span>
      <span class="nx">app</span><span class="p">.</span><span class="nx">sortableCollection</span><span class="p">[</span><span class="nx">forList</span><span class="p">]</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span><span class="c1">//end else</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div>
<p>There are quite a bit of things here so let&#39;s quickly go through a few of them:</p>

<ul>
<li>On line 4, we are getting the <code>for</code> attribute of the <code>arrange-items</code> link. This <code>for</code> value will be the DOM&#39;s id of the targeted list. Hence on line 5, we can retrieve out the list using the id on line 4. </li>
<li>On line 6, we toggle the class <code>arranging</code> and check on line 7 if the list is in <code>arranging</code> mode.</li>
<li>On line 9 - 18, we then create a sortable list based on  the current item list. When an item is dropped on the list, the <code>onUpdate</code> function is triggered. It will then calculate the list of the IDs following the new order and send back this list of ids back to the server tapping on the event <code>arrange:items</code>.</li>
<li>On line 19, we keep the sortable object inside the <code>sortableCollection</code> object so that it can be <code>destroy()</code> on line 23 later  when user click on the <code>I&#39;m done with the arrangement</code> link. </li>
</ul>

<p>As the server will broadcast the event <code>arrange:items</code>, let&#39;s create function named <code>listenToArrangingItemsEvent</code> to listen to this event. Remember to call <code>listenToArrangingItemsEvent</code> function on <code>bindAndListToEvents</code> function:</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">listenToArrangingItemsEvent</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">channel</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">channel</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;arrange:items&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">itemIds</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="s2">&quot;item_ids&quot;</span><span class="p">];</span>
    <span class="kd">var</span> <span class="nx">forList</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="s2">&quot;for_list&quot;</span><span class="p">];</span>
    <span class="kd">var</span> <span class="nx">listUl</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">forList</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">itemIdsArray</span> <span class="o">=</span> <span class="nx">itemIds</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">sortable</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Sortable</span><span class="p">(</span><span class="nx">listUl</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
    <span class="nx">sortable</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="nx">itemIdsArray</span><span class="p">);</span>
    <span class="nx">sortable</span><span class="p">.</span><span class="nx">destroy</span><span class="p">();</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div>
<p>The server will send back the list of item&#39;s ids the same format when we send the item&#39;s ids to the server (i.e. <code>1,2,3,4</code>) and the DOM id (inside <code>data[for_list</code>) of the targeted list. The list of ids will then be split into an array on line 6. The sortable object is then created on line 7 on top of the targeted list. The sortable object will then trigger the sort function to sort the list based on the received array of ids created on line 6. </p>

<p>That&#39;s it. We are now done with all the events. You can try out the complete application on <a href="http://localhost:4000">http://localhost:4000</a></p>

<h3>Conclusion</h3>

<p>Now, you can sit back, relax and enjoy the real time to do list. Note that, this is just an experiment with javascript and Phoenix channel. If you want to build a better JS code for this to do list, <a href="http://backbonejs.org/">Backbone JS</a>, <a href="https://angularjs.org/">Angular JS</a> or <a href="http://facebook.github.io/react/">ReactJS</a> can do a much better job with shorter source code and more comprehensive comparing to just plain jQuery. We&#39;ll come back to it later in another article.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating Applications From Phoenix 0.4.1 to Phoenix 0.5.0]]></title>
    <link href="http://learnelixir.com/blog/2014/10/29/migrating-applications-from-phoenix-0-dot-4-1-to-phoenix-0-dot-5-0/"/>
    <updated>2014-10-29T06:16:12+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/29/migrating-applications-from-phoenix-0-dot-4-1-to-phoenix-0-dot-5-0</id>
    <content type="html"><![CDATA[<p>Phoenix 0.5.0 was released 2 weeks ago and it was a great release with bug fixes and a lot enhancements, performance tweaks. If you are running your application on Phoenix 0.4.1, it&#39;s now a good time to upgrade your app to utilise the speed of Phoenix 0.5.0. Besides those, there are some backward incompatible changes which may break your app that you should watch out when you upgrade to Phoenix 0.5.0. In this article, we are going to go through in details how to upgrade a Phoenix 0.4.0 application to a Phoenix 0.5.0.</p>

<p>The source code for the Phoenix application after upgrade to 0.5.0, which I applied inside this article is available at:</p>

<p><a href="https://github.com/learnelixir/hardware-zone/tree/phoenix-0.5.0">https://github.com/learnelixir/hardware-zone/tree/phoenix-0.5.0</a></p>

<!--more-->

<p>To start, you will need to branch your application to another branch called phoenix-0.5.0:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git checkout -b phoenix-0.5.0
</code></pre></div>
<h3>Before upgrading</h3>

<p>Before we start any upgrading, it&#39;s important to note that Phoenix 0.5.0 will only run on Elixir 1.0.1 and it&#39;s not compatible with Elixir 1.0.0. Hence you will need to upgrade your Elixir to 1.0.1 first if you have not done so. On your Mac, you can simply run the <code>brew install</code> command:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>brew install elixir
</code></pre></div>
<p>On Ubuntu server, you can refer to this updated article - http://learnelixir.com/blog/2014/10/16/deploy-phoenix-application-to-a-ubuntu-server/ - <strong>Step Number 4</strong> on how to bring up your Elixir to version 1.0.1</p>

<h3>Upgrading to Phoenix 0.5.0</h3>

<p>You will need to delete your Phoenix source folder and install the latest one by typing the following command on your terminal. This way, next time, when you generate a new Phoenix application, it will Phoenix 0.5.0:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git clone https://github.com/phoenixframework/phoenix.git <span class="o">&amp;&amp;</span> <span class="se">\</span>
  <span class="nb">cd </span>phoenix <span class="o">&amp;&amp;</span> <span class="se">\</span>
  git checkout v0.5.0 <span class="o">&amp;&amp;</span> <span class="se">\</span>
  mix <span class="k">do</span> deps.get, compile
</code></pre></div>
<h3>Upgrading application running Phoenix 0.4.1 to Phoenix 0.5.0</h3>

<p>Now enter the application folder that are still running Phoenix 0.4.1. For my case, I will upgrade the hardware zone app described in the <a href="http://learnelixir.com/blog/2014/10/18/seven-restful-actions-in-phoenix-web-app/">Seven RESTful Actions in Phoenix Web App</a>.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">cd</span> ~/learn/elixir/hardware_zone
</code></pre></div>
<p>And then follow the following steps:</p>

<h4>Step 1 - Change Phoenix version to 0.5.0 in <code>mix.exs</code></h4>

<p>Open <code>mix.exs</code> file:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim mix.exs
</code></pre></div>
<p>On <code>def project</code> function, make sure your <code>elixir</code> is using <code>~&gt; 1.0.0</code>. You will also need to add in the <code>compilers</code> line below <code>elixrc_paths</code> line as following:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">def</span> <span class="n">project</span> <span class="k">do</span>
  <span class="p">[</span> <span class="ss">app</span><span class="p">:</span> <span class="ss">:hardware_zone</span><span class="p">,</span>
    <span class="ss">version</span><span class="p">:</span> <span class="s2">&quot;0.0.1&quot;</span><span class="p">,</span>
    <span class="ss">elixir</span><span class="p">:</span> <span class="s2">&quot;~&gt; 1.0.0&quot;</span><span class="p">,</span>
    <span class="ss">elixirc_paths</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;lib&quot;</span><span class="p">,</span> <span class="s2">&quot;web&quot;</span><span class="p">],</span>
    <span class="ss">compilers</span><span class="p">:</span> <span class="p">[</span><span class="ss">:phoenix</span><span class="p">]</span> <span class="o">++</span> <span class="nc">Mix</span><span class="p">.</span><span class="n">compilers</span><span class="p">,</span>
    <span class="ss">deps</span><span class="p">:</span> <span class="n">deps</span> <span class="p">]</span>
<span class="k">end</span>
</code></pre></div>
<p>On <code>defp deps</code> function, make sure <code>phoenix</code> version is now <code>0.5.0</code>.</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defp</span> <span class="n">deps</span> <span class="k">do</span>
  <span class="p">[</span>
    <span class="p">{</span><span class="ss">:phoenix</span><span class="p">,</span> <span class="s2">&quot;0.5.0&quot;</span><span class="p">},</span>
    <span class="p">{</span><span class="ss">:cowboy</span><span class="p">,</span> <span class="s2">&quot;~&gt; 1.0.0&quot;</span><span class="p">},</span>
    <span class="p">{</span><span class="ss">:postgrex</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.5&quot;</span><span class="p">},</span>
    <span class="p">{</span><span class="ss">:ecto</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.2.0&quot;</span><span class="p">},</span>
    <span class="p">{</span><span class="ss">:plug</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.8.1&quot;</span><span class="p">},</span>
    <span class="p">{</span><span class="ss">:mogrify</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.1&quot;</span><span class="p">}</span>
  <span class="p">]</span>
<span class="k">end</span>
</code></pre></div>
<p>After that, run <code>deps.get, compile</code>:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix <span class="k">do</span> deps.get, compile
</code></pre></div>
<h4>Step 2 - Upgrade config files</h4>

<p>There have a been a huge change in config files in config folder. Those files are <code>config.exs</code>, <code>def.exs</code>, <code>prod.exs</code> and <code>test.exs</code>. Let&#39;s look at them one by one</p>

<h5>config.exs</h5>

<p>Open <code>config.exs</code> file</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim config/config.exs
</code></pre></div>
<p>Inside the function call <code>config :phoenix, HardwareZone.Router, ...</code>, you will need to change the lines for <code>port</code>, <code>ssl</code>, <code>static_assets</code>, <code>cookies</code>, <code>session_key</code> and <code>session_secret</code>:</p>

<ul>
<li>Line <code>port: System.get_env(&quot;PORT&quot;),</code> will need to change to <code>http: [port: System.get_env(&quot;PORT&quot;)],</code>.</li>
<li>Line <code>ssl: false,</code> will need to change to <code>https: false,</code>.</li>
<li>Line <code>cookies: true,</code> will need to be removed.</li>
<li>Line <code>session_key: &quot;_hardware_zone_key&quot;,</code> will need to be removed.</li>
<li>Line <code>session_secret: ...</code>, will need to change to <code>secret_key_base: ...</code></li>
</ul>

<p>Add line <code>url: [host: &quot;localhost&quot;],</code> to be right under <code>config :phoenix, HardwareZone.Router,</code> function call. </p>

<p>Effectively, the function call: <code>config :phoenix, HardwareZone.Router</code> will be like following after change:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">config</span> <span class="ss">:phoenix</span><span class="p">,</span> <span class="nc">HardwareZone.Router</span><span class="p">,</span>
  <span class="ss">url</span><span class="p">:</span> <span class="p">[</span><span class="ss">host</span><span class="p">:</span> <span class="s2">&quot;localhost&quot;</span><span class="p">],</span>
  <span class="ss">http</span><span class="p">:</span> <span class="p">[</span><span class="ss">port</span><span class="p">:</span> <span class="nc">System</span><span class="p">.</span><span class="n">get_env</span><span class="p">(</span><span class="s2">&quot;PORT&quot;</span><span class="p">)],</span>
  <span class="ss">https</span><span class="p">:</span> <span class="no">false</span><span class="p">,</span>
  <span class="ss">secret_key_base</span><span class="p">:</span> <span class="s2">&quot;oXLywfYvLeqUBlTmg2ly4HL64UpJycMiwqG2OlN95TM30AwXqXEFb...&quot;</span><span class="p">,</span>
  <span class="ss">catch_errors</span><span class="p">:</span> <span class="no">true</span><span class="p">,</span>
  <span class="ss">debug_errors</span><span class="p">:</span> <span class="no">false</span><span class="p">,</span>
  <span class="ss">error_controller</span><span class="p">:</span> <span class="nc">HardwareZone.PageController</span>
</code></pre></div>
<p>You will also need to remove the entire function call:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">config</span> <span class="ss">:phoenix</span><span class="p">,</span> <span class="ss">:code_reloader</span><span class="p">,</span>
  <span class="ss">enabled</span><span class="p">:</span> <span class="no">false</span>
</code></pre></div>
<p>And add in the following. Note that you will need to change the key name according to the project&#39;s name:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">config</span> <span class="ss">:phoenix</span><span class="p">,</span> <span class="nc">HardwareZone.Router</span><span class="p">,</span>
  <span class="ss">session</span><span class="p">:</span> <span class="p">[</span><span class="ss">store</span><span class="p">:</span> <span class="ss">:cookie</span><span class="p">,</span>
            <span class="ss">key</span><span class="p">:</span> <span class="s2">&quot;_hardware_zone_key&quot;</span><span class="p">]</span>
</code></pre></div>
<p>That&#39;s all for <code>config.exs</code>. Let&#39;s move on to <code>dev.exs</code></p>

<h5>dev.exs</h5>

<p>Open <code>dev.exs</code> file:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim config/dev.exs
</code></pre></div>
<p>Under <code>config :phoenix, HardwareZone.Router,</code> call you will need to remove the following lines:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="ss">port</span><span class="p">:</span> <span class="nc">System</span><span class="p">.</span><span class="n">get_env</span><span class="p">(</span><span class="s2">&quot;PORT&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="mi">4000</span><span class="p">,</span>
<span class="ss">ssl</span><span class="p">:</span> <span class="no">false</span><span class="p">,</span>
<span class="ss">host</span><span class="p">:</span> <span class="s2">&quot;localhost&quot;</span><span class="p">,</span>
<span class="ss">cookies</span><span class="p">:</span> <span class="no">true</span><span class="p">,</span>
<span class="ss">session_key</span><span class="p">:</span> <span class="s2">&quot;_hardware_zone_key&quot;</span><span class="p">,</span>
<span class="ss">session_secret</span><span class="p">:</span> <span class="s2">&quot;VQP)JU1Z7*5L+^09X*L=6RKN9R1HL0O2E7^(1B%V3W64Z7@J9^7(M&amp;TXW8*C)...&quot;</span><span class="p">,</span>
</code></pre></div>
<p>and add in this line:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="ss">http</span><span class="p">:</span> <span class="p">[</span><span class="ss">port</span><span class="p">:</span> <span class="nc">System</span><span class="p">.</span><span class="n">get_env</span><span class="p">(</span><span class="s2">&quot;PORT&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="mi">4000</span><span class="p">],</span>
</code></pre></div>
<p>Also, remove the following block of code:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">config</span> <span class="ss">:phoenix</span><span class="p">,</span> <span class="ss">:code_reloader</span><span class="p">,</span>
  <span class="ss">enabled</span><span class="p">:</span> <span class="no">true</span>

<span class="n">config</span> <span class="ss">:logger</span><span class="p">,</span> <span class="ss">:console</span><span class="p">,</span>
  <span class="ss">level</span><span class="p">:</span> <span class="ss">:debug</span>
</code></pre></div>
<p>And add in the following line:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">config</span> <span class="ss">:phoenix</span><span class="p">,</span> <span class="ss">:code_reloader</span><span class="p">,</span> <span class="no">true</span>
</code></pre></div>
<p>Effectively, for my case, it will look like following after these changes have been  made:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kn">use</span> <span class="nc">Mix.Config</span>

<span class="n">config</span> <span class="ss">:phoenix</span><span class="p">,</span> <span class="nc">HardwareZone.Router</span><span class="p">,</span>
  <span class="ss">http</span><span class="p">:</span> <span class="p">[</span><span class="ss">port</span><span class="p">:</span> <span class="nc">System</span><span class="p">.</span><span class="n">get_env</span><span class="p">(</span><span class="s2">&quot;PORT&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="mi">4000</span><span class="p">],</span>
  <span class="ss">debug_errors</span><span class="p">:</span> <span class="no">true</span>

<span class="c1"># Enables code reloading for development</span>
<span class="n">config</span> <span class="ss">:phoenix</span><span class="p">,</span> <span class="ss">:code_reloader</span><span class="p">,</span> <span class="no">true</span>
</code></pre></div>
<p>Let&#39;s move on to <code>prod.exs</code></p>

<h5>prod.exs</h5>

<p>Open <code>prod.exs</code> file:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim config/prod.exs
</code></pre></div>
<p>under the function call <code>config :phoenix, HardwareZone.Router,</code>, you will also need to remove the block of code:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="ss">port</span><span class="p">:</span> <span class="nc">System</span><span class="p">.</span><span class="n">get_env</span><span class="p">(</span><span class="s2">&quot;PORT&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="mi">4000</span><span class="p">,</span>
<span class="ss">ssl</span><span class="p">:</span> <span class="no">false</span><span class="p">,</span>
<span class="ss">host</span><span class="p">:</span> <span class="s2">&quot;localhost&quot;</span><span class="p">,</span>
<span class="ss">cookies</span><span class="p">:</span> <span class="no">true</span><span class="p">,</span>
<span class="ss">session_key</span><span class="p">:</span> <span class="s2">&quot;_hardware_zone_key&quot;</span><span class="p">,</span>
<span class="ss">session_secret</span><span class="p">:</span> <span class="s2">&quot;VQP)JU1Z7*5L+^09X*L=6RKN9R1HL0O2E7^(1B%V3W64Z7@J9^7(M&amp;TXW8*C)I....&quot;</span><span class="p">,</span>
</code></pre></div>
<p>and replace by the following code. Note that the secret key is different per application, hence make sure you change it:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">url: [host: &quot;estark-sands-7697.herokuapp.com&quot;],
http: [port: System.get_env(&quot;PORT&quot;)],
secret_key_base: &quot;oXLywfYvLeqUBlTmg2ly4HL64UpJycMiwqG2OlN95TM30AwXqXEFbwjAbD/tgnfDDNpqFeEc...&quot;
</code></pre></div>
<p>Under <code>config :logger, :console,</code> call, remove the line <code>metadata: [:request_id]</code>.</p>

<p>After all the <code>prod.exs</code> should look like below:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kn">use</span> <span class="nc">Mix.Config</span>

<span class="n">config</span> <span class="ss">:phoenix</span><span class="p">,</span> <span class="nc">HardwareZone.Router</span><span class="p">,</span>
  <span class="ss">url</span><span class="p">:</span> <span class="p">[</span><span class="ss">host</span><span class="p">:</span> <span class="s2">&quot;estark-sands-7697.herokuapp.com&quot;</span><span class="p">],</span>
  <span class="ss">http</span><span class="p">:</span> <span class="p">[</span><span class="ss">port</span><span class="p">:</span> <span class="nc">System</span><span class="p">.</span><span class="n">get_env</span><span class="p">(</span><span class="s2">&quot;PORT&quot;</span><span class="p">)],</span>
  <span class="ss">secret_key_base</span><span class="p">:</span> <span class="s2">&quot;oXLywfYvLeqUBlTmg2ly4HL64UpJycMiwqG2OlN95TM30AwXqXEFbwjAbD/tgnfDDNpq....&quot;</span>

<span class="n">config</span> <span class="ss">:logger</span><span class="p">,</span> <span class="ss">:console</span><span class="p">,</span>
  <span class="ss">level</span><span class="p">:</span> <span class="ss">:info</span>
</code></pre></div>
<p>Now, let&#39;s move on to <code>prod/test.exs</code>:</p>

<h5>test.exs</h5>

<p>Open <code>test.exs</code> file:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim config/test.exs
</code></pre></div>
<p>under the function call <code>config :phoenix, HardwareZone.Router,</code>, you will also need to remove the block of code:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="ss">port</span><span class="p">:</span> <span class="nc">System</span><span class="p">.</span><span class="n">get_env</span><span class="p">(</span><span class="s2">&quot;PORT&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="mi">4000</span><span class="p">,</span>
<span class="ss">ssl</span><span class="p">:</span> <span class="no">false</span><span class="p">,</span>
<span class="ss">host</span><span class="p">:</span> <span class="s2">&quot;localhost&quot;</span><span class="p">,</span>
<span class="ss">cookies</span><span class="p">:</span> <span class="no">true</span><span class="p">,</span>
<span class="ss">session_key</span><span class="p">:</span> <span class="s2">&quot;_hardware_zone_key&quot;</span><span class="p">,</span>
<span class="ss">session_secret</span><span class="p">:</span> <span class="s2">&quot;VQP)JU1Z7*5L+^09X*L=6RKN9R1HL0O2E7^(1B%V3W64Z7@J9^7(M&amp;TXW8*C)I....&quot;</span><span class="p">,</span>
</code></pre></div>
<p>and replace by:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="ss">http</span><span class="p">:</span> <span class="p">[</span><span class="ss">port</span><span class="p">:</span> <span class="nc">System</span><span class="p">.</span><span class="n">get_env</span><span class="p">(</span><span class="s2">&quot;PORT&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="mi">4001</span><span class="p">],</span>
<span class="ss">catch_errors</span><span class="p">:</span> <span class="no">false</span>
</code></pre></div>
<p>You will also need to remove the 2 function calls:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">config</span> <span class="ss">:phoenix</span><span class="p">,</span> <span class="ss">:code_reloader</span><span class="p">,</span>
  <span class="ss">enabled</span><span class="p">:</span> <span class="no">true</span>

<span class="n">config</span> <span class="ss">:logger</span><span class="p">,</span> <span class="ss">:console</span><span class="p">,</span>
  <span class="ss">level</span><span class="p">:</span> <span class="ss">:debug</span>
</code></pre></div>
<p>Effectively, <code>test.exs</code> will look like following:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kn">use</span> <span class="nc">Mix.Config</span>

<span class="n">config</span> <span class="ss">:phoenix</span><span class="p">,</span> <span class="nc">HardwareZone.Router</span><span class="p">,</span>
  <span class="ss">http</span><span class="p">:</span> <span class="p">[</span><span class="ss">port</span><span class="p">:</span> <span class="nc">System</span><span class="p">.</span><span class="n">get_env</span><span class="p">(</span><span class="s2">&quot;PORT&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="mi">4001</span><span class="p">],</span>
  <span class="ss">catch_errors</span><span class="p">:</span> <span class="no">false</span>
</code></pre></div>
<p>That&#39;s all for config files. We can move on to the next one: <code>test/test_helper.exs</code></p>

<h4>Step 3 - <code>test/test_helper.exs</code></h4>

<p>Open <code>test/test_helper.exs</code>:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim <span class="nb">test</span>/test_helper.exs
</code></pre></div>
<p>and remove the top line:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="nc">Phoenix.CodeReloader</span><span class="p">.</span><span class="n">reload!</span>
</code></pre></div>
<h4>Step 4 - router.ex</h4>

<p>Open <code>router.ex</code>: </p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/router.ex
</code></pre></div>
<p>In this file, you will need to move all the current routes to be under <code>scope &quot;/&quot;</code>. This change is because in Phoenix 0.5.0 introduces pipeline DSL whereby a arrival request will be eventually dispatched to a desired end-point. More information can be found <a href="https://github.com/phoenixframework/phoenix/blob/bdd9a88324d7a95fd54ba0d9904f7ff304f019d0/lib/phoenix/router.ex#L113-L220">here</a>. Let&#39;s start by adding on the following</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">scope</span> <span class="s2">&quot;/&quot;</span> <span class="k">do</span>
  <span class="n">pipe_through</span> <span class="ss">:browser</span>
  <span class="p">...</span>
<span class="k">end</span>
</code></pre></div>
<p>And then copy all your existing routes to the <code>...</code> position in the above code. For our Hardware Zone application, the end result is as following:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">scope</span> <span class="s2">&quot;/&quot;</span> <span class="k">do</span>
    <span class="n">pipe_through</span> <span class="ss">:browser</span>

    <span class="n">get</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="nc">HardwareZone.HardwaresController</span><span class="p">,</span> <span class="ss">:index</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:root</span>
    <span class="n">resources</span> <span class="s2">&quot;/hardwares&quot;</span><span class="p">,</span> <span class="nc">HardwareZone.HardwaresController</span>
  <span class="k">end</span>
</code></pre></div>
<p>That&#39;s all for <code>router.ex</code>, let&#39;s move on to upgrade our controllers</p>

<h4>Step 5 - Controllers</h4>

<p>Open all your controllers and put in <code>plug :action</code> under your controller name, aka.</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">HardwareZone.HardwaresController</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Phoenix.Controller</span>
  <span class="p">...</span>
  <span class="n">plug</span> <span class="ss">:action</span>

  <span class="kd">def</span> <span class="n">index</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="n">_params</span><span class="p">)</span> <span class="k">do</span>
    <span class="p">...</span>
  <span class="k">end</span>  
  <span class="p">...</span>
</code></pre></div>
<p>That&#39;s all for Controllers. Let&#39;s move on to view.</p>

<h4>Step 6 - Views</h4>

<p>You will need to open <code>web/views.ex</code> file</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/views.ex
</code></pre></div>
<p>and add in the following line under the <code>import</code> <code>Router.Helpers</code> line:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kn">alias</span> <span class="nc">Phoenix.Controller.Flash</span> 
</code></pre></div>
<p>There are no step 7 :-). Happy Upgrading.</p>

<h3>Wrap Up</h3>

<p>That&#39;s all how we migrate from Phoenix 0.4.1 to Phoenix 0.5.0. Please leave any comments if you find anyway better way. All your comments and questions are always welcomed. :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Image Upload in Phoenix Web App]]></title>
    <link href="http://learnelixir.com/blog/2014/10/23/image-upload-in-phoenix-web-app/"/>
    <updated>2014-10-23T06:46:02+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/23/image-upload-in-phoenix-web-app</id>
    <content type="html"><![CDATA[<p><strong>UPDATE</strong> on 27 Nov 14: I have updated this article in order to work with Phoenix framework version 0.6.0. Previously the Phoenix framework used in this article was 0.5.0
<hr/><br/>
<strong>UPDATE</strong> on 30th Oct 14: I have updated this article in order to work with Phoenix framework version 0.5.0. Previously the Phoenix framework used in this article was 0.4.1
<hr/><br/>
I was trying to find on Internet a way to receive uploaded image and format the uploaded image in multiple styles for Elixir and Phoenix but unable to find one. Hence I decide to make a library to handle the image upload and blog about it. The end point that we would like to have in this article is the hardware gapplication that we have in the last article integrated with this library to allow user to upload a photo for each hardware. Here is the screenshot of the finished application:</p>

<p><img src='http://learnelixir.com/images/upload_image/final.png' width='800' height='394'/></p>

<!-- more -->

<ul>
<li>The source code is available on <a href="https://github.com/learnelixir/hardware-zone/tree/phoenix-0.6.0">https://github.com/learnelixir/hardware-zone/tree/phoenix-0.6.0</a></li>
<li>The updated application is also now lived at http://phoenix-hardware-zone.herokuapp.com</li>
</ul>

<p>In case you missed it, here is the URL linked to last article http://learnelixir.com/blog/2014/10/18/seven-restful-actions-in-phoenix-web-app/ which is an application that lets user do basic functionalities with hardware entity. What we are going to implement in this article is to allow user to upload a photo for each of the hardwares. Hence it will look more attractive to potential buyer. Let&#39;s start by adding the some more dependencies to the project.</p>

<h3>0 - Dependencies - More dependencies</h3>

<p>Add <code>plug</code> and <code>mogrify</code> library as extra depenecies inside your <code>mix.exs</code> file as of following:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defp</span> <span class="n">deps</span> <span class="k">do</span>
    <span class="p">[</span>
      <span class="p">{</span><span class="ss">:phoenix</span><span class="p">,</span> <span class="s2">&quot;0.6.0&quot;</span><span class="p">},</span>
      <span class="p">{</span><span class="ss">:cowboy</span><span class="p">,</span> <span class="s2">&quot;~&gt; 1.0.0&quot;</span><span class="p">},</span>
      <span class="p">{</span><span class="ss">:postgrex</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.5&quot;</span><span class="p">},</span>
      <span class="p">{</span><span class="ss">:ecto</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.2.0&quot;</span><span class="p">},</span>
      <span class="p">{</span><span class="ss">:plug</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.7&quot;</span><span class="p">},</span>
      <span class="p">{</span><span class="ss">:mogrify</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.1&quot;</span><span class="p">}</span>
    <span class="p">]</span>
<span class="k">end</span>
</code></pre></div>
<ul>
<li><code>plug</code> will be used to retrieve the MIME types.</li>
<li><code>mogrify</code> will be used for image processing. It is actually ImageMagick wrapper.</li>
</ul>

<p>Then run <code>deps.get</code></p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix deps.get
</code></pre></div>
<h3>1 - Migration - More columns</h3>

<p>Now add 4 additional columns to the <code>hardware</code> model. The uploaded photo information will be captured using these fields:</p>

<ul>
<li><code>photo_file_name</code>: is used to store photo&#39;s file name.</li>
<li><code>photo_content_type</code>: is used to store photo&#39;s content type. </li>
<li><code>photo_file_size</code>: is used to store photo&#39;s file size in byte unit. </li>
<li><code>photo_updated_at</code>: is used to store the time stamp that photo last updated.</li>
</ul>

<p>To do this, we will need to generate another migration file by running this command from the terminal</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix ecto.gen.migration HardwareZone.Repo add_photo_to_hardware
</code></pre></div>
<p>Let open this newly generated migration file and add these 4 columns. In my case, it is <code>priv/repo/migrations/20141022230017_add_photo_to_hardware.exs</code>:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim priv/repo/migrations/20141022230017_add_photo_to_hardware.exs
</code></pre></div>
<p>and replace by the following code content:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">HardwareZone.Repo.Migrations.AddPhotoToHardware</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Ecto.Migration</span>

  <span class="kd">def</span> <span class="n">up</span> <span class="k">do</span>
    <span class="s2">&quot;ALTER TABLE hardwares </span><span class="err">\</span><span class="s2"></span>
<span class="s2">        ADD COLUMN photo_file_name varchar(255), </span><span class="err">\</span><span class="s2"></span>
<span class="s2">        ADD COLUMN photo_content_type varchar(255), </span><span class="err">\</span><span class="s2"></span>
<span class="s2">        ADD COLUMN photo_file_size integer, </span><span class="err">\</span><span class="s2"></span>
<span class="s2">        ADD COLUMN photo_updated_at timestamp;&quot;</span>
  <span class="k">end</span>

  <span class="kd">def</span> <span class="n">down</span> <span class="k">do</span>
    <span class="s2">&quot;ALTER TABLE hardwares </span><span class="err">\</span><span class="s2"></span>
<span class="s2">        DROP COLUMN photo_file_name, </span>
<span class="s2">        DROP COLUMN photo_content_type, </span>
<span class="s2">        DROP COLUMN photo_file_size, </span>
<span class="s2">        DROP COLUMN photo_updated_at;&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Then from your command line, run the migration:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix ecto.migrate HardwareZone.Repo
</code></pre></div>
<p>In the last step in this section, you will need to specify these fields in the model so that it can be recognised by Ecto library. You can do this by editing <code>web/models/hardware.ex</code>:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/models/hardware.ex
</code></pre></div>
<p>and modify the schema <code>hardwares</code> like following:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">schema</span> <span class="s2">&quot;hardwares&quot;</span> <span class="k">do</span>
  <span class="n">field</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:string</span>
  <span class="n">field</span> <span class="ss">:description</span><span class="p">,</span> <span class="ss">:string</span>
  <span class="n">field</span> <span class="ss">:manufacturer</span><span class="p">,</span> <span class="ss">:string</span>
  <span class="n">field</span> <span class="ss">:sale_contact_number</span><span class="p">,</span> <span class="ss">:string</span>
  <span class="n">field</span> <span class="ss">:photo_file_name</span><span class="p">,</span> <span class="ss">:string</span>
  <span class="n">field</span> <span class="ss">:photo_file_size</span><span class="p">,</span> <span class="ss">:integer</span>
  <span class="n">field</span> <span class="ss">:photo_updated_at</span><span class="p">,</span> <span class="ss">:datetime</span>
  <span class="n">field</span> <span class="ss">:photo_content_type</span><span class="p">,</span> <span class="ss">:string</span>
<span class="k">end</span> 
</code></pre></div>
<p>Note that we have added into 4 extra fields here corresponding with the fields that we have added in the database earlier.</p>

<h3>2 - File Upload field in form view</h3>

<p>To let user choose a file from the form, we will need to add an upload field in our form. So let&#39;s go ahead and edit the hardware form:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ vim web/templates/hardwares/form.html.eex
</code></pre></div>
<p>then add in the following HTML code just below the <code>if @hardware.id do</code> condition block</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;form-group&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;hardware[photo]&quot;</span><span class="nt">&gt;</span>Photo<span class="nt">&lt;/label&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;file&quot;</span> <span class="na">name=</span><span class="s">&quot;hardware[photo]&quot;</span> <span class="na">class=</span><span class="s">&quot;form-control&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div>
<p>Now try to visit the new hardware page <a href="http://localhost:4000/hardwares/new">http://localhost:4000/hardwares/new</a>, select a random file and click save then check the server log. What you will see is the parameter as something similar to what is inside the below screenshot I took from my Mac:</p>

<p><img class="center" src="/images/upload<em>image/upload</em>image_terminal.png&#8221; width=&#8221;637&#8221; height=&#8221;269&#8221; title=&#8221;&#39;image&#39; &#39;images&#39;&#8221; ></p>

<p>Let&#39;s reformat the parameters for readable purpose:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">Parameters: %<span class="o">{</span>
  <span class="s2">&quot;hardware&quot;</span> <span class="o">=</span>&gt; %<span class="o">{</span>
    <span class="s2">&quot;description&quot;</span> <span class="o">=</span>&gt; <span class="s2">&quot;&quot;</span>, 
    <span class="s2">&quot;manufacturer&quot;</span> <span class="o">=</span>&gt; <span class="s2">&quot;&quot;</span>, 
    <span class="s2">&quot;name&quot;</span> <span class="o">=</span>&gt; <span class="s2">&quot;&quot;</span>, 
    <span class="s2">&quot;photo&quot;</span> <span class="o">=</span>&gt; %Plug.Upload<span class="o">{</span>
      content_type: <span class="s2">&quot;image/png&quot;</span>, 
      filename: <span class="s2">&quot;Screen Shot 2014-10-23 at 6.43.12 am.png&quot;</span>, 
      path: <span class="s2">&quot;/var/folders/jk/c2560ztn1394tl7c_67yx8900000gn/T//plug-1414/multipart-68820-690153&quot;</span>
    <span class="o">}</span>, 
    <span class="s2">&quot;sale_contact_number&quot;</span> <span class="o">=</span>&gt; <span class="s2">&quot;&quot;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<p>As you can see, the parameter photo has been formated and nicely and gave to us as <code>Plug.Upload</code> struct thank to phoenix framework. From here, we will only need to take in this struct, save and make a thumbnail out of this photo. Let&#39;s move on to next step to process this <code>Plug.Upload</code> struct in a library file.</p>

<h3>3 - Process <code>Plug.Upload</code> struct</h3>

<p>You can start by creating a library file and named it <code>up_plug.ex</code> and put in under <code>lib</code> folder:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim lib/up_plug.ex
</code></pre></div>
<p>and paste in the following initial code:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">UpPlug</span> <span class="k">do</span>
  <span class="kn">import</span> <span class="nc">Mogrify</span>
  <span class="kd">defstruct</span> <span class="ss">plug</span><span class="p">:</span> <span class="no">nil</span><span class="p">,</span> <span class="ss">model</span><span class="p">:</span> <span class="no">nil</span><span class="p">,</span> <span class="ss">attribute_name</span><span class="p">:</span> <span class="no">nil</span><span class="p">,</span> <span class="ss">styles</span><span class="p">:</span> <span class="p">%{}</span> 
<span class="k">end</span>
</code></pre></div>
<p>Here we have defined a <code>defmodule</code> named <code>UpPlug</code>, and at the same time we have defined it to be a struct by using the command <code>defstruct</code> on line 3 of the code. <code>defstruct</code> will enable us create <code>UnPlug</code> struct later with the attributes <code>plug</code>, <code>model</code>, <code>attribute_name</code> and <code>styles</code> witht corresponding default value specified on the same line. </p>

<p>To make our library solid and roboust, we also need a test file for it. Let&#39;s create <code>up_plug_test.exs</code> in <code>test</code> folder: </p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim <span class="nb">test</span>/up_plug_test.exs
</code></pre></div>
<p>with the following initial code:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">UpPlugTest</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">ExUnit.Case</span>
  <span class="kn">import</span> <span class="nc">UpPlug</span>
<span class="k">end</span>
</code></pre></div>
<p>What we want to achieve are in this library can be seen below. And of course, it can be extended eventually to become a library that support uploading file. But for the scope of this article, let&#39;s just stick with the following requirements:</p>

<ul>
<li>Create a function which takes in a <code>UpPlug</code> struct argument containing the <code>Plug.Upload</code> struct, the model struct this upload belongs to, the name of the uploaded file attribute (i.e. in this case it is <code>photo</code>) and the styles and saves the uploaded file, at the same time created all the formatted photo based on the input <code>styles</code>. In code, I would love to have this function call:</li>
</ul>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="c1"># For processing uploaded file </span>
<span class="nc">UpPlug</span><span class="p">.</span><span class="n">process_upload_plug</span><span class="p">(</span>
  <span class="p">%</span><span class="nc">UpPlug</span><span class="p">{</span>
    <span class="ss">model</span><span class="p">:</span> <span class="p">%</span><span class="nc">Hardware</span><span class="p">{</span><span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span>
    <span class="ss">plug</span><span class="p">:</span> <span class="p">%</span><span class="nc">Plug.Upload</span><span class="p">{</span>
      <span class="ss">filename</span><span class="p">:</span> <span class="s2">&quot;sample.png&quot;</span><span class="p">,</span>
      <span class="ss">path</span><span class="p">:</span> <span class="s2">&quot;...&quot;</span><span class="p">,</span>
      <span class="ss">content_type</span><span class="p">:</span> <span class="s2">&quot;image/png&quot;</span>
    <span class="p">},</span>
    <span class="ss">attribute_name</span><span class="p">:</span> <span class="ss">:photo</span><span class="p">,</span>
    <span class="ss">styles</span><span class="p">:</span> <span class="p">%{</span>
      <span class="ss">thumb</span><span class="p">:</span> <span class="s2">&quot;50x50&gt;&quot;</span><span class="p">,</span>
      <span class="ss">medium</span><span class="p">:</span> <span class="s2">&quot;120x120&gt;&quot;</span>
    <span class="p">}</span> 
  <span class="p">}</span> 
<span class="p">)</span>
</code></pre></div>
<ul>
<li><p>The file should be stored in the folder structure such that there are max 1,000 files in each folder. This is to maximize the performance of linux folder structure. If there are more than 1,000 files in a folder, the file retrieval will be slower. For this we will follow the structure that Paperclip library (https://github.com/thoughtbot/paperclip) defined, i.e. first file will be stored in the folder <code>000/000/001</code>, second file will be on <code>000/000/002</code>, and say the 1001st file will be stored in folder <code>000/001/001</code> and so on.</p></li>
<li><p>If the uploaded file is not an image file, we can simply store the file in the <code>original</code> subfolder of the folder mentioned above. </p></li>
<li><p>If the uploaded file is an image, we will let user specify styles attributed defined in <code>UpPlug</code> struct argument in order to generate different styles for the photo. For example, a sample of styles parameter is as following and when calling the process image function, it will create 3 folders under the folder structure that was mentioned above: <code>original</code> for storing the user uploaded original image, <code>medium</code> is for storing the <code>120x120&gt;</code> processed image and a <code>thumb</code> folder is for storing <code>50x50&gt;</code> processed image. </p></li>
</ul>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir">  <span class="p">%{</span> 
    <span class="ss">styles</span><span class="p">:</span> <span class="p">%{</span>
      <span class="ss">thumb</span><span class="p">:</span> <span class="s2">&quot;50x50&gt;&quot;</span>
      <span class="ss">medium</span><span class="p">:</span> <span class="s2">&quot;120x120&gt;&quot;</span><span class="p">,</span>
    <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div>
<ul>
<li>So let&#39;s say I upload a file called <code>sample.png</code> into model <code>HardwareZone.Hardware</code>, and I specify with 2 styles <code>thumb</code> and <code>medium</code>. After the upload process is completed, I should have 3 files stored at the following paths which are relative to the project path:</li>
</ul>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">priv/static/system/hardware_zone/hardware/photo/000/000/001/original/sample.png
priv/static/system/hardware_zone/hardware/photo/000/000/001/thumb/sample.png
priv/static/system/hardware_zone/hardware/photo/000/000/001/medium/sample.png
</code></pre></div>
<ul>
<li><p>The file is supposed to be stored in <code>priv/static</code> because that&#39;s the only place that the browser can access the file directly. In the same folder, you also can see the assets folder <code>css</code>, <code>images</code> and <code>js</code>.</p></li>
<li><p>The library should allow us to retrieve back the path and the URLs to the file for different formats for displaying purposes. The function can be envisioned as like following:</p></li>
</ul>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="nc">UpPlug</span><span class="p">.</span><span class="n">attachment_url_for</span><span class="p">(</span>
  <span class="p">%{</span><span class="nc">Hardware</span><span class="p">{</span>
    <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> 
    <span class="ss">photo_file_name</span><span class="p">:</span> <span class="s2">&quot;sample.png&quot;</span>
  <span class="p">},</span> <span class="ss">:photo</span><span class="p">,</span> <span class="ss">:thumb</span><span class="p">,</span> <span class="s2">&quot;/images/no_photo.png&quot;&quot;)</span>

<span class="err">#</span><span class="s2"> Arguments order:</span>
<span class="err">#</span><span class="s2"></span>
<span class="err">#</span><span class="s2"> - model struct</span>
<span class="err">#</span><span class="s2"> - attachment attribute name</span>
<span class="err">#</span><span class="s2"> - style (default is original)</span>
<span class="err">#</span><span class="s2"> - default_url (will be served when no image)</span>
</code></pre></div>
<p>With these in mind, let&#39;s create the first test case for this <code>UpPlug</code> library. But before that, we will need to create some sample data. Open your file <code>test/test_helper.exs</code></p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim <span class="nb">test</span>/test_helper.exs
</code></pre></div>
<p>and add in <code>SampleModel</code> struct at the end of the file. This will be the model which the uploaded photo is attached to:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">SampleModel</span> <span class="k">do</span>
  <span class="kd">defstruct</span> <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">photo_file_size</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="err">\</span>
            <span class="ss">photo_file_name</span><span class="p">:</span> <span class="no">nil</span><span class="p">,</span> <span class="ss">photo_content_type</span><span class="p">:</span> <span class="no">nil</span><span class="p">,</span> <span class="ss">photo_updated_at</span><span class="p">:</span> <span class="no">nil</span> 
<span class="k">end</span>
</code></pre></div>
<p>Create a folder <code>sample_data</code> in your project folder:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mkdir sample_data
</code></pre></div>
<p>Then copy files <code>samples.png</code> (<a href="https://raw.githubusercontent.com/learnelixir/hardware-zone/master/sample_data/sample.png">https://raw.githubusercontent.com/learnelixir/hardware-zone/master/sample_data/sample.png</a>) and <code>sample.pdf</code> (<a href="https://github.com/learnelixir/hardware-zone/raw/master/sample_data/sample.pdf">https://github.com/learnelixir/hardware-zone/raw/master/sample_data/sample.pdf</a>) into <code>sample_data</code> folder. You might want to change the path of these 2 sample files by modify the following code on line 7 and 12. Here is the <code>setup</code> callback in <code>test/up_plug_test.exs</code>:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">setup</span> <span class="k">do</span>
  <span class="p">{</span>
    <span class="ss">:ok</span><span class="p">,</span> <span class="err">\</span>
    <span class="ss">sample_image_plug</span><span class="p">:</span> <span class="p">%</span><span class="nc">Plug.Upload</span><span class="p">{</span> <span class="err">\</span>
      <span class="ss">content_type</span><span class="p">:</span> <span class="s2">&quot;image/png&quot;</span><span class="p">,</span> <span class="err">\</span>
      <span class="ss">filename</span><span class="p">:</span> <span class="s2">&quot;sample.png&quot;</span><span class="p">,</span> <span class="err">\</span>
      <span class="ss">path</span><span class="p">:</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nc">Path</span><span class="p">.</span><span class="n">expand</span><span class="p">(</span><span class="s2">&quot;../&quot;</span><span class="p">,</span> <span class="bp">__DIR__</span><span class="p">)</span><span class="si">}</span><span class="s2">/sample_data/sample.png&quot;</span> <span class="err">\</span>
    <span class="p">},</span> <span class="err">\</span>
    <span class="ss">sample_document_plug</span><span class="p">:</span> <span class="p">%</span><span class="nc">Plug.Upload</span><span class="p">{</span> <span class="err">\</span>
      <span class="ss">content_type</span><span class="p">:</span> <span class="s2">&quot;application/pdf&quot;</span><span class="p">,</span> <span class="err">\</span>
      <span class="ss">filename</span><span class="p">:</span> <span class="s2">&quot;sample.pdf&quot;</span><span class="p">,</span> <span class="err">\</span>
      <span class="ss">path</span><span class="p">:</span>  <span class="s2">&quot;</span><span class="si">#{</span><span class="nc">Path</span><span class="p">.</span><span class="n">expand</span><span class="p">(</span><span class="s2">&quot;../&quot;</span><span class="p">,</span> <span class="bp">__DIR__</span><span class="p">)</span><span class="si">}</span><span class="s2">/sample_data/sample.pdf&quot;</span> <span class="err">\</span>
    <span class="p">},</span> <span class="err">\</span>
    <span class="ss">model_struct</span><span class="p">:</span> <span class="p">%</span><span class="nc">SampleModel</span><span class="p">{},</span> <span class="err">\</span>
    <span class="ss">photo_attribute_name</span><span class="p">:</span> <span class="ss">:photo</span><span class="p">,</span>
    <span class="ss">document_attribute_name</span><span class="p">:</span> <span class="ss">:spec</span>
  <span class="p">}</span>
<span class="k">end</span>

<span class="n">setup</span> <span class="n">context</span> <span class="k">do</span> 
  <span class="p">{</span>
    <span class="ss">:ok</span><span class="p">,</span> 
    <span class="nc">Map</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="ss">:up_plug</span><span class="p">,</span> <span class="p">%</span><span class="nc">UpPlug</span><span class="p">{</span> <span class="err">\</span>
      <span class="ss">plug</span><span class="p">:</span> <span class="n">context</span><span class="p">[</span><span class="ss">:sample_image_plug</span><span class="p">],</span> <span class="err">\</span>
      <span class="ss">model</span><span class="p">:</span> <span class="n">context</span><span class="p">[</span><span class="ss">:model_struct</span><span class="p">],</span>  <span class="err">\</span>
      <span class="ss">attribute_name</span><span class="p">:</span> <span class="n">context</span><span class="p">[</span><span class="ss">:photo_attribute_name</span><span class="p">],</span> <span class="err">\</span>
      <span class="ss">styles</span><span class="p">:</span> <span class="p">%{</span>
        <span class="ss">thumb</span><span class="p">:</span> <span class="s2">&quot;50x50&gt;&quot;</span><span class="p">,</span>
        <span class="ss">medium</span><span class="p">:</span> <span class="s2">&quot;120x120&gt;&quot;</span> 
      <span class="p">}</span>
    <span class="p">})</span> <span class="o">|&gt;</span>  
    <span class="nc">Map</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="ss">:document_up_plug</span><span class="p">,</span> <span class="p">%</span><span class="nc">UpPlug</span><span class="p">{</span> <span class="err">\</span>
      <span class="ss">plug</span><span class="p">:</span> <span class="n">context</span><span class="p">[</span><span class="ss">:sample_document_plug</span><span class="p">],</span> <span class="err">\</span>
      <span class="ss">model</span><span class="p">:</span> <span class="n">context</span><span class="p">[</span><span class="ss">:model_struct</span><span class="p">],</span>
      <span class="ss">attribute_name</span><span class="p">:</span> <span class="n">context</span><span class="p">[</span><span class="ss">:document_attribute_name</span><span class="p">]</span>
    <span class="p">})</span>
  <span class="p">}</span>
<span class="k">end</span>
</code></pre></div>
<ul>
<li>I have used <code>setup</code> callback function in <code>ExUnit</code> to define some testing data so that it can be kept reusing in all the test cases. The <code>context</code> need to start with <code>:ok</code> and following by a Map.</li>
<li>In addition, on line 20, we can use the <code>setup</code> callback again to define extra data based on what have already been defined in the earlier call of <code>setup</code>. </li>
<li>In order to use testing data, you will need to pass in <code>context</code> in each of your test as in the test case that we are going to write by using <code>context</code> as the second parameter in <code>test</code> function call.</li>
</ul>

<p>Now, let try <code>mix test</code> by first adding the first test case inside also inside <code>test/up_plug_test.exs</code>. For this test, we would like to check if <code>Plug.Upload</code> struct is an upload of an image:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">test</span> <span class="s2">&quot;is_image? returns true if upload file is image&quot;</span><span class="p">,</span> <span class="n">context</span> <span class="k">do</span>
  <span class="n">assert</span> <span class="n">is_image?</span><span class="p">(</span><span class="n">context</span><span class="p">[</span><span class="ss">:sample_image_plug</span><span class="p">])</span> <span class="o">==</span> <span class="no">true</span>
<span class="k">end</span>
</code></pre></div>
<p>Note that, <code>context[:sample_image_plug]</code> is the struct <code>Plug.Upload</code> that we have defined in the <code>setup</code> callback ealier.</p>

<p>Then let&#39;s run the test. From the command line, type in the following command:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">mix <span class="nb">test</span>
</code></pre></div>
<p>Apparently, when we run <code>mix test</code> it will be a failed case and give an error. This is because we have not written any code yet. We are now at the red stage (red stage as in TDD red, green, refactor). </p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">test</span>/hardware_zone_test.exs:5: warning: this check/guard will always yield the same result
<span class="nb">test</span>/plug_plug_test.exs:3: warning: unused import UpPlug
** <span class="o">(</span>CompileError<span class="o">)</span> <span class="nb">test</span>/plug_plug_test.exs:17: <span class="k">function</span> <span class="s1">&#39;is_image?&#39;</span>/1 undefined
    <span class="o">(</span>stdlib<span class="o">)</span> lists.erl:1336: :lists.foreach/2
        <span class="o">(</span>stdlib<span class="o">)</span> erl_eval.erl:657: :erl_eval.do_apply/6
</code></pre></div>
<p>Because of this error, let go to our <code>UpPlug</code> library and add the <code>is_image?</code> function:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim lib/up_plug.ex
</code></pre></div>
<p>and add in the following <code>is_image?</code> helper which always return <code>true</code>:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">def</span> <span class="n">is_image?</span><span class="p">(</span><span class="n">plug</span><span class="p">)</span> <span class="k">do</span>
  <span class="no">true</span>
<span class="k">end</span>
</code></pre></div>
<p>Run the test now by using <code>mix test</code> and it should pass</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">..

Finished in 0.05 seconds <span class="o">(</span>0.05s on load, 0.00s on tests<span class="o">)</span>
<span class="m">2</span> tests, <span class="m">0</span> failures
</code></pre></div>
<p>Add in another test case to test the a document file case for this <code>is_image?</code> function, but this time, let&#39;s use <code>refute</code> as a negative assertion</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">test</span> <span class="s2">&quot;is_image? returns false if upload file is not an image&quot;</span><span class="p">,</span> <span class="n">context</span> <span class="k">do</span>
  <span class="n">refute</span> <span class="n">is_image?</span><span class="p">(</span><span class="n">context</span><span class="p">[</span><span class="ss">:sample_document_plug</span><span class="p">])</span>
<span class="k">end</span>
</code></pre></div>
<p>Run the test again and expect it to fail because our <code>is_image?</code> function always return true. </p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">.

  1<span class="o">)</span> <span class="nb">test </span>is_image? returns <span class="nb">false </span><span class="k">if</span> upload file is not an image <span class="o">(</span>UpPlugTest<span class="o">)</span>
     <span class="nb">test</span>/up_plug_test.exs:25
     Assertion <span class="nv">with</span> <span class="o">==</span> failed
     code: is_image?<span class="o">(</span>context<span class="o">[</span>:sample_document_plug<span class="o">])</span> <span class="o">==</span> <span class="nb">false</span>
<span class="nb">     </span>lhs:  <span class="nb">true</span>
<span class="nb">     </span>rhs:  <span class="nb">false</span>
<span class="nb">     </span>stacktrace:
       <span class="nb">test</span>/up_plug_test.exs:26

.

Finished in 0.05 seconds <span class="o">(</span>0.05s on load, 0.00s on tests<span class="o">)</span>
<span class="m">3</span> tests, <span class="m">1</span> failures
</code></pre></div>
<p>It&#39;s time to fix the <code>is_image?</code> function that we created ealier by do a real check on the image&#39;s MIME type:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">def</span> <span class="n">is_image?</span><span class="p">(</span><span class="n">plug</span><span class="p">)</span> <span class="k">do</span>
  <span class="n">content_type</span> <span class="p">=</span> <span class="n">plug</span><span class="p">.</span><span class="n">content_type</span>
  <span class="n">image_mimes</span> <span class="p">=</span> <span class="p">[</span> 
    <span class="nc">Plug.MIME</span><span class="p">.</span><span class="n">type</span><span class="p">(</span><span class="s2">&quot;png&quot;</span><span class="p">),</span> 
    <span class="nc">Plug.MIME</span><span class="p">.</span><span class="n">type</span><span class="p">(</span><span class="s2">&quot;jpg&quot;</span><span class="p">),</span> 
    <span class="nc">Plug.MIME</span><span class="p">.</span><span class="n">type</span><span class="p">(</span><span class="s2">&quot;gif&quot;</span><span class="p">)</span>
  <span class="p">]</span>   
  <span class="nc">Enum</span><span class="p">.</span><span class="n">find_index</span><span class="p">(</span><span class="n">image_mimes</span><span class="p">,</span> <span class="k">fn</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">x</span> <span class="o">==</span> <span class="n">content_type</span> <span class="k">end</span><span class="p">)</span> <span class="o">!=</span> <span class="no">nil</span> 
<span class="k">end</span> 
</code></pre></div>
<p>Note that <code>Plug.MIME</code> is from <code>plug</code> library. Run the test again and every thing should pass now:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">...

Finished in 0.05 seconds <span class="o">(</span>0.05s on load, 0.00s on tests<span class="o">)</span>
<span class="m">3</span> tests, <span class="m">0</span> failures
</code></pre></div>
<p>Up to this point, let&#39;s list down all the requirements before starting to implement, then eventually write the content of all these specs and the codes to pass the spec. Below is the list of all the requirements which have been trasnformed into test spec for this upload module. It&#39;s not an exhausted list yet, but you are encouraged to keep adding on more test cases when there is a need. It is good practice to write all the specs down in this kind of format so that you are aware of all the requirements that need to be implemented: </p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="c1"># test/up_plug_test.exs</span>

<span class="n">test</span> <span class="s2">&quot;returns 000/000/001 from id_partition with id 1&quot;</span> <span class="ss">do</span><span class="p">:</span> <span class="ss">:pending</span>
<span class="n">test</span> <span class="s2">&quot;returns 000/120/501 from id_partition with id 120501&quot;</span> <span class="ss">do</span><span class="p">:</span> <span class="ss">:pending</span> 
<span class="n">test</span> <span class="s2">&quot;assigns photo_updated_at attribute after saving the photo&quot;</span><span class="p">,</span> <span class="ss">do</span><span class="p">:</span> <span class="ss">:pending</span>
<span class="n">test</span> <span class="s2">&quot;assigns photo_content_type attribute after saving the photo&quot;</span><span class="p">,</span> <span class="ss">do</span><span class="p">:</span> <span class="ss">:pending</span>
<span class="n">test</span> <span class="s2">&quot;assigns photo_file_name attribute after saving the photo&quot;</span><span class="p">,</span> <span class="ss">do</span><span class="p">:</span> <span class="ss">:pending</span>
<span class="n">test</span> <span class="s2">&quot;replaces special character in file name with _&quot;</span><span class="p">,</span> <span class="n">context</span><span class="p">,</span> <span class="ss">do</span><span class="p">:</span> <span class="ss">:pending</span>
<span class="n">test</span> <span class="s2">&quot;assigns photo_file_size attribute after saving the photo&quot;</span><span class="p">,</span> <span class="ss">do</span><span class="p">:</span> <span class="ss">:pending</span>
<span class="n">test</span> <span class="s2">&quot;stores uploaded image in original folder&quot;</span><span class="p">,</span> <span class="ss">do</span><span class="p">:</span> <span class="ss">:pending</span>
<span class="n">test</span> <span class="s2">&quot;stores extra styled images in corresponding folder&quot;</span><span class="p">,</span> <span class="ss">do</span><span class="p">:</span> <span class="ss">:pending</span>
<span class="n">test</span> <span class="s2">&quot;stores uploaded document in original folder&quot;</span><span class="p">,</span> <span class="ss">do</span><span class="p">:</span> <span class="ss">:pending</span>
<span class="n">test</span> <span class="s2">&quot;returns correct url for original image&quot;</span><span class="p">,</span> <span class="ss">do</span><span class="p">:</span> <span class="ss">:pending</span>
<span class="n">test</span> <span class="s2">&quot;returns correct url for a styled image&quot;</span><span class="p">,</span> <span class="ss">do</span><span class="p">:</span> <span class="ss">:pending</span>
</code></pre></div>
<p>At the time I wrote this article, <code>ExUnit</code> does not have a way to specify a test case as a pending case, so what I did was using <code>do: :pending</code>. However I really hope that <code>ExUnit</code> will support pending case soon as it&#39;s important to know what are the cases that are still pending when running all the tests. </p>

<p>Now, if you run the command <code>mix test</code> now, you should see everything passed.</p>

<p>At this stage, I would like to fast forward by just showing the test code and follow by showing the code implementation. Let&#39;s continue with specifying the test for <code>id_partition</code> function.</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="c1"># test/up_plug_test.exs</span>

<span class="n">test</span> <span class="s2">&quot;returns 000/000/001 for id_partition call with id 1&quot;</span> <span class="k">do</span>
  <span class="n">assert</span> <span class="n">id_partition</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&quot;000/000/001&quot;</span>
<span class="k">end</span>

<span class="n">test</span> <span class="s2">&quot;returns 000/120/501 for id_partition call with id 120501&quot;</span> <span class="k">do</span>
  <span class="n">assert</span> <span class="n">id_partition</span><span class="p">(</span><span class="mi">120501</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&quot;000/120/501&quot;</span>
<span class="k">end</span>
</code></pre></div>
<p>To make these tests pass, the implementation for <code>id_partition</code> is as following:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="c1"># lib/up_plug.ex</span>

<span class="kd">def</span> <span class="n">id_partition</span><span class="p">(</span><span class="n">id</span><span class="p">)</span> <span class="k">do</span>
  <span class="k">if</span> <span class="n">id</span> <span class="o">!=</span> <span class="no">nil</span> <span class="k">do</span>
    <span class="n">formatted_id</span> <span class="p">=</span> <span class="ss">:io_lib</span><span class="p">.</span><span class="n">format</span><span class="p">(</span><span class="s2">&quot;~9..0B&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">id</span><span class="p">])</span>  <span class="o">|&gt;</span> <span class="nc">List</span><span class="p">.</span><span class="n">flatten</span> <span class="o">|&gt;</span> <span class="n">to_string</span> 
    <span class="nc">Regex</span><span class="p">.</span><span class="n">scan</span><span class="p">(</span><span class="sx">~r/</span><span class="se">\d</span><span class="sx">{3}/</span><span class="p">,</span> <span class="n">formatted_id</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="nc">List</span><span class="p">.</span><span class="n">flatten</span> <span class="o">|&gt;</span> <span class="nc">Enum</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">)</span>
  <span class="k">else</span>
    <span class="s2">&quot;&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p><code>id_partition</code> function is defined to convert an id into the 3 layer folder structure. Line 4 is the code to convert an id to a string of 9 characters. For instance, 1025 will be transformed to <code>000001025</code>. Then on line 5, this string will be split into 3 segments, each segment has 3 characters, then are joined by <code>/</code> to form <code>000/001/025</code>.</p>

<p>Next, we will need put in test code for testing the proper assignments for the 4 attributes: <code>photo_file_name</code>, <code>photo_file_size</code>, <code>photo_content_type</code> and <code>photo_updated_at</code></p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="c1"># test/up_plug_test.exs</span>

<span class="n">test</span> <span class="s2">&quot;assigns photo_updated_at attribute after saving the photo&quot;</span><span class="p">,</span> <span class="n">context</span> <span class="k">do</span>
  <span class="n">model</span> <span class="p">=</span> <span class="n">process_upload_plug</span><span class="p">(</span><span class="n">context</span><span class="p">[</span><span class="ss">:up_plug</span><span class="p">])</span> 
  <span class="n">assert</span> <span class="n">model</span><span class="p">.</span><span class="n">photo_updated_at</span><span class="p">.</span><span class="n">__struct__</span> <span class="o">==</span> <span class="nc">Ecto.DateTime</span>
<span class="k">end</span>

<span class="n">test</span> <span class="s2">&quot;assigns photo_content_type attribute after saving the photo&quot;</span><span class="p">,</span> <span class="n">context</span> <span class="k">do</span>
  <span class="n">model</span> <span class="p">=</span> <span class="n">process_upload_plug</span><span class="p">(</span><span class="n">context</span><span class="p">[</span><span class="ss">:up_plug</span><span class="p">])</span>
  <span class="n">assert</span> <span class="n">model</span><span class="p">.</span><span class="n">photo_content_type</span> <span class="o">==</span> <span class="n">context</span><span class="p">[</span><span class="ss">:sample_image_plug</span><span class="p">].</span><span class="n">content_type</span> 
<span class="k">end</span>

<span class="n">test</span> <span class="s2">&quot;assigns photo_file_name attribute after saving the photo&quot;</span><span class="p">,</span> <span class="n">context</span> <span class="k">do</span>
  <span class="n">model</span> <span class="p">=</span> <span class="n">process_upload_plug</span><span class="p">(</span><span class="n">context</span><span class="p">[</span><span class="ss">:up_plug</span><span class="p">])</span>
  <span class="n">assert</span> <span class="n">model</span><span class="p">.</span><span class="n">photo_file_name</span> <span class="o">==</span> <span class="n">context</span><span class="p">[</span><span class="ss">:sample_image_plug</span><span class="p">].</span><span class="n">filename</span>
<span class="k">end</span>

<span class="n">test</span> <span class="s2">&quot;replaces special character in file name with _&quot;</span><span class="p">,</span> <span class="n">context</span> <span class="k">do</span>
  <span class="n">new_plug</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">context</span><span class="p">[</span><span class="ss">:up_plug</span><span class="p">].</span><span class="n">plug</span><span class="p">,</span> <span class="ss">:filename</span><span class="p">,</span> <span class="s2">&quot;a&amp;b+c?d;e@f&gt;g&lt;h|i^j</span><span class="err">#</span><span class="s2">k%l\\m,n=o.png&quot;</span><span class="p">)</span>
  <span class="n">new_up_plug</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">context</span><span class="p">[</span><span class="ss">:up_plug</span><span class="p">],</span> <span class="ss">:plug</span><span class="p">,</span> <span class="n">new_plug</span><span class="p">)</span>
  <span class="n">model</span> <span class="p">=</span> <span class="n">process_upload_plug</span><span class="p">(</span><span class="n">new_up_plug</span><span class="p">)</span>
  <span class="n">assert</span> <span class="n">model</span><span class="p">.</span><span class="n">photo_file_name</span> <span class="o">==</span> <span class="s2">&quot;a_b_c_d_e_f_g_h_i_j_k_l_m_n_o.png&quot;</span>
<span class="k">end</span>

<span class="n">test</span> <span class="s2">&quot;assigns the photo_file_size attribute after saving the photo&quot;</span><span class="p">,</span> <span class="n">context</span> <span class="k">do</span>
  <span class="n">model</span> <span class="p">=</span> <span class="n">process_upload_plug</span><span class="p">(</span><span class="n">context</span><span class="p">[</span><span class="ss">:up_plug</span><span class="p">])</span>
  <span class="n">assert</span> <span class="n">model</span><span class="p">.</span><span class="n">photo_file_size</span> <span class="o">==</span> <span class="mi">917350</span> 
<span class="k">end</span>
</code></pre></div>
<p>Just one thing to highlight in the above code is on the third test case (line 16 - 21), we enforce the system to convert all the special characters to underscore (<code>_</code>) so that when we generate the URL for displaying the photo, it will be a well-formatted URL. </p>

<p>And here comes the code to pass the above cases:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="c1"># lib/up_plug.ex</span>

<span class="kd">def</span> <span class="n">process_upload_plug</span><span class="p">(</span><span class="n">up_plug</span><span class="p">)</span> <span class="k">do</span>
  <span class="n">model</span> <span class="p">=</span> <span class="n">assign_file_information</span><span class="p">(</span><span class="n">up_plug</span><span class="p">)</span>
  <span class="n">up_plug</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">up_plug</span><span class="p">,</span> <span class="ss">:model</span><span class="p">,</span> <span class="n">model</span><span class="p">)</span>
  <span class="n">post_process_file</span><span class="p">(</span><span class="n">up_plug</span><span class="p">)</span>
  <span class="n">up_plug</span><span class="p">.</span><span class="n">model</span>
<span class="k">end</span>

<span class="kd">def</span> <span class="n">assign_file_information</span><span class="p">(</span><span class="n">up_plug</span><span class="p">)</span> <span class="k">do</span>
  <span class="n">plug</span> <span class="p">=</span> <span class="n">up_plug</span><span class="p">.</span><span class="n">plug</span>
  <span class="n">model</span> <span class="p">=</span> <span class="n">up_plug</span><span class="p">.</span><span class="n">model</span>
  <span class="n">model</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="err">\</span>
                  <span class="nc">String</span><span class="p">.</span><span class="n">to_atom</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">up_plug</span><span class="p">.</span><span class="n">attribute_name</span><span class="si">}</span><span class="s2">_updated_at&quot;</span><span class="p">),</span> <span class="nc">Ecto.DateTime</span><span class="p">.</span><span class="n">utc</span><span class="p">)</span>
  <span class="n">model</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="err">\</span>
                  <span class="nc">String</span><span class="p">.</span><span class="n">to_atom</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">up_plug</span><span class="p">.</span><span class="n">attribute_name</span><span class="si">}</span><span class="s2">_content_type&quot;</span><span class="p">),</span> <span class="n">content_type</span><span class="p">(</span><span class="n">plug</span><span class="p">))</span>
  <span class="n">model</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="err">\</span>
                  <span class="nc">String</span><span class="p">.</span><span class="n">to_atom</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">up_plug</span><span class="p">.</span><span class="n">attribute_name</span><span class="si">}</span><span class="s2">_file_name&quot;</span><span class="p">),</span> <span class="n">file_name</span><span class="p">(</span><span class="n">plug</span><span class="p">))</span>
  <span class="n">model</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="err">\</span>
                  <span class="nc">String</span><span class="p">.</span><span class="n">to_atom</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">up_plug</span><span class="p">.</span><span class="n">attribute_name</span><span class="si">}</span><span class="s2">_file_size&quot;</span><span class="p">),</span> <span class="n">size</span><span class="p">(</span><span class="n">plug</span><span class="p">))</span>
  <span class="n">model</span> 
<span class="k">end</span>

<span class="kd">def</span> <span class="n">size</span><span class="p">(</span><span class="n">plug</span><span class="p">)</span> <span class="k">do</span>
  <span class="nc">File</span><span class="p">.</span><span class="n">stat!</span><span class="p">(</span><span class="n">plug</span><span class="p">.</span><span class="n">path</span><span class="p">).</span><span class="n">size</span>
<span class="k">end</span>

<span class="kd">def</span> <span class="n">content_type</span><span class="p">(</span><span class="n">plug</span><span class="p">)</span> <span class="k">do</span>
  <span class="n">plug</span><span class="p">.</span><span class="n">content_type</span>
<span class="k">end</span>

<span class="kd">def</span> <span class="n">file_name</span><span class="p">(</span><span class="n">plug</span><span class="p">)</span> <span class="k">do</span>
  <span class="nc">Regex</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="sx">~r/[&amp;$+,\/:;=?@&lt;&gt;\[\]\{\}\|\\\^~%</span><span class="err">#</span><span class="sx"> ]/</span><span class="p">,</span> <span class="n">plug</span><span class="p">.</span><span class="n">filename</span><span class="p">,</span> <span class="s2">&quot;_&quot;</span><span class="p">)</span>
<span class="k">end</span>

<span class="kd">def</span> <span class="n">post_process_file</span><span class="p">(</span><span class="n">up_plug</span><span class="p">)</span> <span class="k">do</span>
  <span class="c1"># TODO</span>
<span class="k">end</span>
</code></pre></div>
<p>As you can see, the actual attribute assignments are done on function <code>assign_file_information</code>. Next, these are tests for checking that the images are stored in the proper folders:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="c1"># test/up_plug_test.exs</span>

<span class="n">test</span> <span class="s2">&quot;stores uploaded image in original folder&quot;</span><span class="p">,</span> <span class="n">context</span> <span class="k">do</span>
  <span class="n">process_upload_plug</span><span class="p">(</span><span class="n">context</span><span class="p">[</span><span class="ss">:up_plug</span><span class="p">])</span>
  <span class="n">expected_original_file_path</span> <span class="p">=</span> <span class="err">\</span>
    <span class="s2">&quot;</span><span class="si">#{</span><span class="nc">Mix.Project</span><span class="p">.</span><span class="n">app_path</span><span class="si">}</span><span class="s2">/priv/static/system/sample_model/photo/000/000/001/original/sample.png&quot;</span>
  <span class="n">assert</span> <span class="nc">File</span><span class="p">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">expected_original_file_path</span><span class="p">)</span>
<span class="k">end</span>

<span class="n">test</span> <span class="s2">&quot;stores extra styled images in corresponding folder&quot;</span><span class="p">,</span> <span class="n">context</span> <span class="k">do</span>
  <span class="n">process_upload_plug</span><span class="p">(</span><span class="n">context</span><span class="p">[</span><span class="ss">:up_plug</span><span class="p">])</span>
  <span class="n">expected_thumb_file_path</span> <span class="p">=</span> <span class="err">\</span>
    <span class="s2">&quot;</span><span class="si">#{</span><span class="nc">Mix.Project</span><span class="p">.</span><span class="n">app_path</span><span class="si">}</span><span class="s2">/priv/static/system/sample_model/photo/000/000/001/thumb/sample.png&quot;</span>
  <span class="n">assert</span> <span class="nc">File</span><span class="p">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">expected_thumb_file_path</span><span class="p">)</span>

  <span class="n">expected_medium_file_path</span> <span class="p">=</span> <span class="err">\</span>
    <span class="s2">&quot;</span><span class="si">#{</span><span class="nc">Mix.Project</span><span class="p">.</span><span class="n">app_path</span><span class="si">}</span><span class="s2">/priv/static/system/sample_model/photo/000/000/001/medium/sample.png&quot;</span>
  <span class="n">assert</span> <span class="nc">File</span><span class="p">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">expected_medium_file_path</span><span class="p">)</span>
<span class="k">end</span>

<span class="n">test</span> <span class="s2">&quot;stores uploaded document in original folder&quot;</span><span class="p">,</span> <span class="n">context</span> <span class="k">do</span>
  <span class="n">process_upload_plug</span><span class="p">(</span><span class="n">context</span><span class="p">[</span><span class="ss">:document_up_plug</span><span class="p">])</span>
  <span class="n">expected_original_file_path</span> <span class="p">=</span> <span class="err">\</span>
    <span class="s2">&quot;</span><span class="si">#{</span><span class="nc">Mix.Project</span><span class="p">.</span><span class="n">app_path</span><span class="si">}</span><span class="s2">/priv/static/system/sample_model/spec/000/000/001/original/sample.pdf&quot;</span>
  <span class="n">assert</span> <span class="nc">File</span><span class="p">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">expected_original_file_path</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<p>And for the tests above to pass, we will need to implement the function <code>post_process_file</code> as shown below:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="c1"># lib/up_plug.ex</span>

<span class="kd">def</span> <span class="n">post_process_file</span><span class="p">(</span><span class="n">up_plug</span><span class="p">)</span> <span class="k">do</span>
  <span class="k">if</span> <span class="n">up_plug</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">id</span> <span class="k">do</span>
    <span class="n">attachment_directory_path</span> <span class="p">=</span> <span class="err">\</span>
      <span class="n">attachment_container_absolute_path</span><span class="p">(</span><span class="n">up_plug</span><span class="p">.</span><span class="n">model</span><span class="p">,</span> <span class="n">up_plug</span><span class="p">.</span><span class="n">attribute_name</span><span class="p">)</span>
    <span class="nc">File</span><span class="p">.</span><span class="n">rm_rf</span><span class="p">(</span><span class="n">attachment_directory_path</span><span class="p">)</span>
    <span class="nc">File</span><span class="p">.</span><span class="n">mkdir_p</span><span class="p">(</span><span class="n">attachment_directory_path</span><span class="p">)</span>
    <span class="n">store_original_file</span><span class="p">(</span><span class="n">up_plug</span><span class="p">,</span> <span class="n">attachment_directory_path</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">is_image?</span><span class="p">(</span><span class="n">up_plug</span><span class="p">.</span><span class="n">plug</span><span class="p">)</span> <span class="k">do</span>
      <span class="n">post_process_for_other_styles</span><span class="p">(</span><span class="n">up_plug</span><span class="p">,</span> <span class="n">attachment_directory_path</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="kd">def</span> <span class="n">store_original_file</span><span class="p">(</span><span class="n">up_plug</span><span class="p">,</span> <span class="n">attachment_directory_path</span><span class="p">)</span> <span class="k">do</span>
  <span class="n">original_file_destination</span> <span class="p">=</span> <span class="nc">Enum</span><span class="p">.</span><span class="n">join</span><span class="p">(</span> <span class="err">\</span>
      <span class="p">[</span><span class="n">attachment_directory_path</span><span class="p">,</span> <span class="s2">&quot;original&quot;</span><span class="p">],</span> <span class="s2">&quot;/&quot;</span><span class="p">)</span>
  <span class="nc">File</span><span class="p">.</span><span class="n">mkdir_p</span><span class="p">(</span><span class="n">original_file_destination</span><span class="p">)</span>
  <span class="nc">File</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">up_plug</span><span class="p">.</span><span class="n">plug</span><span class="p">.</span><span class="n">path</span><span class="p">,</span> <span class="nc">Enum</span><span class="p">.</span><span class="n">join</span><span class="p">(</span> <span class="err">\</span>
    <span class="p">[</span><span class="n">original_file_destination</span><span class="p">,</span> <span class="n">file_name</span><span class="p">(</span><span class="n">up_plug</span><span class="p">.</span><span class="n">plug</span><span class="p">)],</span> <span class="s2">&quot;/&quot;</span><span class="p">),</span> <span class="ss">:infinity</span><span class="p">)</span>
<span class="k">end</span>

<span class="kd">def</span> <span class="n">post_process_for_other_styles</span><span class="p">(</span><span class="n">up_plug</span><span class="p">,</span> <span class="n">attachment_directory_path</span><span class="p">)</span> <span class="k">do</span>
  <span class="n">styles</span> <span class="p">=</span> <span class="n">up_plug</span><span class="p">.</span><span class="n">styles</span>
  <span class="k">if</span> <span class="n">styles</span> <span class="o">!=</span> <span class="no">nil</span> <span class="k">do</span>
    <span class="nc">Enum</span><span class="p">.</span><span class="n">each</span> <span class="n">styles</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">post_process_for_style</span><span class="p">(</span><span class="ni">&amp;1</span><span class="p">,</span> <span class="n">up_plug</span><span class="p">,</span> <span class="n">attachment_directory_path</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="kd">def</span> <span class="n">post_process_for_style</span><span class="p">({</span><span class="n">style_name</span><span class="p">,</span> <span class="n">style_size</span><span class="p">},</span> <span class="n">up_plug</span><span class="p">,</span> <span class="n">attachment_directory_path</span><span class="p">)</span> <span class="k">do</span>
  <span class="n">saved_file_name</span> <span class="p">=</span> <span class="n">file_name</span><span class="p">(</span><span class="n">up_plug</span><span class="p">.</span><span class="n">plug</span><span class="p">)</span>
  <span class="n">original_file_path</span> <span class="p">=</span> <span class="nc">Enum</span><span class="p">.</span><span class="n">join</span><span class="p">(</span> <span class="err">\</span>
      <span class="p">[</span><span class="n">attachment_directory_path</span><span class="p">,</span> <span class="s2">&quot;original&quot;</span><span class="p">,</span> <span class="n">saved_file_name</span><span class="p">],</span> <span class="s2">&quot;/&quot;</span><span class="p">)</span>
  <span class="n">styled_file_destination</span> <span class="p">=</span> <span class="nc">Enum</span><span class="p">.</span><span class="n">join</span><span class="p">(</span> <span class="err">\</span>
      <span class="p">[</span><span class="n">attachment_directory_path</span><span class="p">,</span> <span class="n">style_name</span><span class="p">],</span> <span class="s2">&quot;/&quot;</span><span class="p">)</span>
  <span class="nc">File</span><span class="p">.</span><span class="n">mkdir_p</span><span class="p">(</span><span class="n">styled_file_destination</span><span class="p">)</span>
  <span class="n">open</span><span class="p">(</span><span class="n">original_file_path</span><span class="p">)</span> 
    <span class="o">|&gt;</span> <span class="n">copy</span> 
    <span class="o">|&gt;</span> <span class="n">resize</span><span class="p">(</span><span class="n">style_size</span><span class="p">)</span> 
    <span class="o">|&gt;</span> <span class="n">save</span><span class="p">(</span><span class="nc">Enum</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="n">styled_file_destination</span><span class="p">,</span> <span class="n">saved_file_name</span><span class="p">],</span> <span class="s2">&quot;/&quot;</span><span class="p">))</span>
<span class="k">end</span>

<span class="kd">def</span> <span class="n">attachment_container_relative_path</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">attribute_name</span><span class="p">)</span> <span class="k">do</span>
  <span class="nc">Enum</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="s2">&quot;system&quot;</span><span class="p">,</span> <span class="err">\</span>
      <span class="nc">Mix.Utils</span><span class="p">.</span><span class="n">underscore</span><span class="p">(</span><span class="n">model</span><span class="p">.</span><span class="n">__struct__</span><span class="p">),</span> <span class="err">\</span>
      <span class="n">attribute_name</span><span class="p">,</span> <span class="err">\</span>
      <span class="n">id_partition</span><span class="p">(</span><span class="n">model</span><span class="p">.</span><span class="n">id</span><span class="p">)],</span> <span class="s2">&quot;/&quot;</span><span class="p">)</span>
<span class="k">end</span>

<span class="kd">def</span> <span class="n">attachment_container_absolute_path</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">attribute_name</span><span class="p">)</span> <span class="k">do</span>
  <span class="nc">Enum</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="nc">Mix.Project</span><span class="p">.</span><span class="n">app_path</span><span class="p">,</span> <span class="s2">&quot;/priv/static&quot;</span><span class="p">,</span> 
      <span class="n">attachment_container_relative_path</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">attribute_name</span><span class="p">)],</span> <span class="s2">&quot;/&quot;</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<ul>
<li><p>We first define the <code>post_process_file</code> function. In this function, we first check for the model id, then generate the target directory where the uploaded file will be copied into - <code>attachment_directory_path</code> (for example, id 201 will yield <code>&lt;path to your project&gt;/priv/static/system/hardware_zone/hardware/phot/000/000/201</code>). We then delete that folder and create again to make sure all the folder is clean. Then we copy the original uploaded file into the <code>original</code> folder under the generated folder path. This happens inside <code>store_original_file</code> function call. Then we check if the uploaded file is an image, then we will process with other styles of the uploaded file.</p></li>
<li><p>From line 36 to 39, we are using <code>mogrify</code> library to <code>open</code> the image, <code>copy</code>, <code>resize</code> and then save the resized image in the destination folder that are computed ealier. It is a very natural flow of converting an image file, thank to pipe Elixir operator <code>|&gt;</code>. The <code>mogrify</code> library has done a great job here by managing combining the pipe operator and the ImageMagick itself.</p></li>
</ul>

<p>And finally, here the test code to check if the generated URL for the uploaded images are returned correctly</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="c1"># test/up_plug_test.exs</span>

<span class="n">test</span> <span class="s2">&quot;returns correct url for original image&quot;</span><span class="p">,</span> <span class="n">context</span> <span class="k">do</span>
  <span class="n">model</span> <span class="p">=</span> <span class="n">process_upload_plug</span><span class="p">(</span><span class="n">context</span><span class="p">[</span><span class="ss">:up_plug</span><span class="p">])</span>
  <span class="n">assert</span> <span class="n">attachment_url_for</span><span class="p">(</span> <span class="err">\</span>
      <span class="n">model</span><span class="p">,</span> <span class="err">\</span>
      <span class="n">context</span><span class="p">[</span><span class="ss">:photo_attribute_name</span><span class="p">])</span> <span class="err">\</span>
    <span class="o">==</span> <span class="s2">&quot;/system/sample_model/photo/000/000/001/original/sample.png&quot;</span>
<span class="k">end</span>

<span class="n">test</span> <span class="s2">&quot;returns correct url for a styled image&quot;</span><span class="p">,</span> <span class="n">context</span> <span class="k">do</span>
  <span class="n">model</span> <span class="p">=</span> <span class="n">process_upload_plug</span><span class="p">(</span><span class="n">context</span><span class="p">[</span><span class="ss">:up_plug</span><span class="p">])</span>
  <span class="n">assert</span> <span class="n">attachment_url_for</span><span class="p">(</span> <span class="err">\</span>
      <span class="n">model</span><span class="p">,</span> <span class="err">\</span>
      <span class="n">context</span><span class="p">[</span><span class="ss">:photo_attribute_name</span><span class="p">],</span> <span class="err">\</span>
      <span class="ss">:thumb</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&quot;/system/sample_model/photo/000/000/001/thumb/sample.png&quot;</span>

<span class="k">end</span>
</code></pre></div>
<p>And here is the corresponding implementation to pass these above test in <code>lib/up_plug.ex</code></p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="c1"># lib/up_plug.ex</span>

<span class="kd">def</span> <span class="n">attachment_url_for</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">attribute_name</span><span class="p">,</span> <span class="n">style</span> <span class="p">\\</span> <span class="ss">:original</span><span class="p">,</span> <span class="n">default_url</span> <span class="p">\\</span> <span class="no">nil</span> <span class="p">)</span> <span class="k">do</span>
  <span class="n">style</span> <span class="p">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">style</span><span class="si">}</span><span class="s2">&quot;</span>
  <span class="n">container_relative_path</span> <span class="p">=</span> <span class="n">attachment_container_relative_path</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">attribute_name</span><span class="p">)</span>
  <span class="n">container_absolute_path</span> <span class="p">=</span> <span class="n">attachment_container_absolute_path</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">attribute_name</span><span class="p">)</span>
  <span class="n">stored_file_name</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="nc">String</span><span class="p">.</span><span class="n">to_atom</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">attribute_name</span><span class="si">}</span><span class="s2">_file_name&quot;</span><span class="p">))</span> 

  <span class="n">target_file</span> <span class="p">=</span> <span class="nc">Enum</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="n">container_absolute_path</span><span class="p">,</span> <span class="n">style</span><span class="p">,</span> <span class="n">stored_file_name</span><span class="p">],</span> <span class="s2">&quot;/&quot;</span><span class="p">)</span>
  <span class="k">if</span> <span class="nc">File</span><span class="p">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">target_file</span><span class="p">)</span> <span class="k">do</span>
    <span class="nc">Enum</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="n">container_relative_path</span><span class="p">,</span> <span class="n">style</span><span class="p">,</span> <span class="n">stored_file_name</span><span class="p">],</span> <span class="s2">&quot;/&quot;</span><span class="p">)</span>
  <span class="k">else</span>
    <span class="n">default_url</span> 
  <span class="k">end</span>
<span class="k">end</span>

<span class="kd">def</span> <span class="n">attachment_exist?</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">attribute_name</span><span class="p">)</span> <span class="k">do</span>
  <span class="nc">File</span><span class="p">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">attachment_container_relative_path</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">attribute_name</span><span class="p">))</span>
<span class="k">end</span>
</code></pre></div>
<p>As you can see, the code is pretty straight forward. The program again tries the find the absolute path to the file and check if the file really exists. It it does, we will join the relative path (<code>/system/hardware_zone/hardware/photo/000/000/010/:style/</code>) with its stored file name. This link can be then accessed directly from the web browser.</p>

<p>That&#39;s all for this library. Let&#39;s move on to the more easy part.</p>

<h3>4 - Use <code>UpPlug</code> in the project</h3>

<p>We have done the hard part. Now is the fun part where we will use the <code>UpPlug</code> and apply into the hardware zone app. Open the <code>hardwares_controller.ex</code>:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/controllers/hardwares_controller.ex
</code></pre></div>
<p>and add in the following private function at the end of the file. This function is basically just a wrapper of the <code>UpPlug.process_upload_plug</code> call when there is an attachment received. Note that you will need to update the model struct after done with the file processing by triggering <code>Repo.update(...)</code> - occurs on line 9 of the code below: </p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defp</span> <span class="n">upload_photo_attachment</span><span class="p">(</span><span class="n">hardware</span><span class="p">,</span> <span class="n">params</span><span class="p">,</span> <span class="n">attachment_attribute_name</span><span class="p">)</span> <span class="k">do</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="n">attachment_attribute_name</span><span class="p">]</span> <span class="o">!=</span> <span class="no">nil</span> <span class="ow">and</span> <span class="err">\</span>
          <span class="nc">String</span><span class="p">.</span><span class="n">length</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="n">attachment_attribute_name</span><span class="p">].</span><span class="n">filename</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">hardware</span> <span class="p">=</span> <span class="nc">UpPlug</span><span class="p">.</span><span class="n">process_upload_plug</span><span class="p">(%</span><span class="nc">UpPlug</span><span class="p">{</span>
      <span class="ss">model</span><span class="p">:</span> <span class="n">hardware</span><span class="p">,</span>
      <span class="ss">plug</span><span class="p">:</span> <span class="n">params</span><span class="p">[</span><span class="n">attachment_attribute_name</span><span class="p">],</span>
      <span class="ss">attribute_name</span><span class="p">:</span> <span class="n">attachment_attribute_name</span><span class="p">,</span>
      <span class="ss">styles</span><span class="p">:</span> <span class="p">%{</span> <span class="ss">thumb</span><span class="p">:</span> <span class="s2">&quot;100x100&gt;&quot;</span><span class="p">,</span> <span class="ss">large</span><span class="p">:</span> <span class="s2">&quot;300x300&gt;&quot;</span> <span class="p">}</span>
    <span class="p">})</span>
    <span class="n">hardware</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="n">hardware</span><span class="p">,</span> <span class="ss">:photo</span><span class="p">)</span>
    <span class="nc">Repo</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">hardware</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>As you can see, we are generating 2 styles for this uploaded photo: <code>thumb</code> (<code>100x100&gt;</code>) and <code>large</code> (<code>300x300&gt;</code>). We will use these 2 styles in 2 different places. They are inside <code>create</code> and <code>update</code> function as following:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="p">...</span>
<span class="kd">def</span> <span class="n">create</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="p">%{</span><span class="s2">&quot;hardware&quot;</span> <span class="p">=&gt;</span> <span class="n">params</span><span class="p">})</span> <span class="k">do</span>
  <span class="n">atomized_keys_params</span> <span class="p">=</span> <span class="n">atomize_keys</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
  <span class="n">hardware</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">merge</span><span class="p">(%</span><span class="nc">Hardware</span><span class="p">{},</span> <span class="n">atomized_keys_params</span><span class="p">)</span>
  <span class="k">case</span> <span class="nc">Hardware</span><span class="p">.</span><span class="n">validate</span><span class="p">(</span><span class="n">hardware</span><span class="p">)</span> <span class="k">do</span>
    <span class="p">[]</span> <span class="p">-&gt;</span>
      <span class="n">hardware</span> <span class="p">=</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">hardware</span><span class="p">)</span>
      <span class="n">upload_photo_attachment</span><span class="p">(</span><span class="n">hardware</span><span class="p">,</span> <span class="n">atomized_keys_params</span><span class="p">,</span> <span class="ss">:photo</span><span class="p">)</span>
      <span class="n">redirect</span> <span class="n">conn</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="n">hardwares_path</span><span class="p">(</span><span class="ss">:show</span><span class="p">,</span> <span class="n">hardware</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
    <span class="n">errors</span> <span class="p">-&gt;</span>
      <span class="n">render</span> <span class="n">conn</span><span class="p">,</span> <span class="s2">&quot;new.html&quot;</span><span class="p">,</span> <span class="ss">hardware</span><span class="p">:</span> <span class="n">hardware</span><span class="p">,</span> <span class="ss">errors</span><span class="p">:</span> <span class="n">errors</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="p">...</span>

<span class="kd">def</span> <span class="n">update</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="p">%{</span><span class="s2">&quot;id&quot;</span> <span class="p">=&gt;</span> <span class="n">id</span><span class="p">,</span> <span class="s2">&quot;hardware&quot;</span> <span class="p">=&gt;</span> <span class="n">params</span><span class="p">})</span> <span class="k">do</span>
  <span class="k">case</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nc">Hardware</span><span class="p">,</span> <span class="nc">String</span><span class="p">.</span><span class="n">to_integer</span><span class="p">(</span><span class="n">id</span><span class="p">))</span> <span class="k">do</span>
    <span class="n">hardware</span> <span class="ow">when</span> <span class="n">is_map</span><span class="p">(</span><span class="n">hardware</span><span class="p">)</span> <span class="p">-&gt;</span>
      <span class="n">atomized_keys_params</span> <span class="p">=</span> <span class="n">atomize_keys</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
      <span class="n">hardware</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">merge</span><span class="p">(</span><span class="n">hardware</span><span class="p">,</span> <span class="n">atomized_keys_params</span><span class="p">)</span>
      <span class="k">case</span> <span class="nc">Hardware</span><span class="p">.</span><span class="n">validate</span><span class="p">(</span><span class="n">hardware</span><span class="p">)</span> <span class="k">do</span>
        <span class="p">[]</span> <span class="p">-&gt;</span>
          <span class="nc">Repo</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">hardware</span><span class="p">)</span>
          <span class="n">upload_photo_attachment</span><span class="p">(</span><span class="n">hardware</span><span class="p">,</span> <span class="n">atomized_keys_params</span><span class="p">,</span> <span class="ss">:photo</span><span class="p">)</span>
          <span class="n">redirect</span> <span class="n">conn</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="n">hardwares_path</span><span class="p">(</span><span class="ss">:show</span><span class="p">,</span> <span class="n">hardware</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
        <span class="n">errors</span> <span class="p">-&gt;</span>
          <span class="n">render</span> <span class="n">conn</span><span class="p">,</span> <span class="s2">&quot;edit.html&quot;</span><span class="p">,</span> <span class="ss">hardware</span><span class="p">:</span> <span class="n">hardware</span><span class="p">,</span> <span class="ss">errors</span><span class="p">:</span> <span class="n">errors</span>
      <span class="k">end</span>
    <span class="bp">_</span> <span class="p">-&gt;</span>
      <span class="n">redirect</span> <span class="n">conn</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="n">hardwares_path</span><span class="p">(</span><span class="ss">:index</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Now, let&#39;s move on to displaying the photos. First edit the template <code>web/templates/hardwares/index.html.eex</code> to show the thumbnail of the hardware photo in the list of hardwares:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/templates/hardwares/index.html.eex
</code></pre></div>
<p>and add in the folling line under <code>&lt;div class=&quot;description&quot;&gt;&lt;/div&gt;</code> tag</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;photo&#39;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&#39;&lt;%= UpPlug.attachment_url_for(</span>
<span class="s">                           hardware, :photo, :thumb, &quot;/images/no_photo_thumb.png&quot;)  %&gt;&#39;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div>
<p>Next, we will also need to edit the show template at <code>web/templates/hardwares/show.html.eex</code> to show a bigger version of the photo:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/templates/hardwares/show.html.eex
</code></pre></div>
<p>Replace the part to display the hardware with the following</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;h1&gt;</span><span class="err">&lt;</span>%= @hardware.name %&gt;<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>

  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-sm-6&quot;</span><span class="nt">&gt;</span> 
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&#39;manufacturer&#39;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= @hardware.manufacturer %&gt;<span class="nt">&lt;/span&gt;</span>

    <span class="nt">&lt;br/&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;description&#39;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= @hardware.description %&gt;<span class="nt">&lt;/div&gt;</span>

    <span class="err">&lt;</span>%= if @hardware.sale_contact_number do %&gt;
      Want to buy, contact me at: <span class="err">&lt;</span>%= @hardware.sale_contact_number %&gt;
    <span class="err">&lt;</span>% end %&gt;
    <span class="nt">&lt;br/&gt;&lt;br/&gt;</span>
  <span class="nt">&lt;/div&gt;</span>

  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-sm-6&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&#39;&lt;%= UpPlug.attachment_url_for(</span>
<span class="s">                            @hardware, :photo, :large, &quot;/images/no_photo_large.png&quot;) %&gt;&#39;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;br/&gt;&lt;br/&gt;</span>
</code></pre></div>
<p>We will need to modify the style so that it will fit the uploaded photo. Let&#39;s edit <code>priv/static/css/app.css</code></p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim priv/static/css/app.css
</code></pre></div>
<p>and change the height in <code>div.hardware-box</code> height to <code>235px</code></p>
<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nt">div</span><span class="nc">.hardware-box</span> <span class="p">{</span>
  <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="m">#ccc</span><span class="p">;</span>
  <span class="k">padding</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
  <span class="k">height</span><span class="o">:</span> <span class="m">235px</span><span class="p">;</span>
  <span class="k">background</span><span class="o">:</span> <span class="m">#efefef</span><span class="p">;</span>
  <span class="k">margin-top</span><span class="o">:</span> <span class="m">30px</span><span class="p">;</span>
  <span class="k">cursor</span><span class="o">:</span> <span class="k">pointer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>And add <code>margin-bottom: 10px;</code> to <code>div.hardware-box div.description</code> style</p>
<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nt">div</span><span class="nc">.hardware-box</span> <span class="nt">div</span><span class="nc">.description</span> <span class="p">{</span>
  <span class="k">margin-top</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
  <span class="k">height</span><span class="o">:</span> <span class="m">60px</span><span class="p">;</span>
  <span class="k">overflow</span><span class="o">:</span> <span class="k">hidden</span><span class="p">;</span>
  <span class="k">margin-bottom</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
<span class="p">}</span> 
</code></pre></div>
<p>Finally, copy the following 2 files into your <code>priv/static/images</code> folder. These 2 files are used to cater for the case that a hardware does not have a photo yet:</p>

<ul>
<li><a href="https://raw.githubusercontent.com/learnelixir/hardware-zone/master/priv/static/images/no_photo_large.png">https://raw.githubusercontent.com/learnelixir/hardware-zone/master/priv/static/images/no_photo_large.png</a></li>
<li><a href="https://raw.githubusercontent.com/learnelixir/hardware-zone/master/priv/static/images/no_photo_thumb.png">https://raw.githubusercontent.com/learnelixir/hardware-zone/master/priv/static/images/no_photo_thumb.png</a></li>
</ul>

<p>After this, you can start your phoenix server and enjoy the web application with the ability to upload and process photos.</p>

<h3>Conclusion</h3>

<p>I hope that I have covered something missing at the point of this article and I do hope that you enjoy the article. If you have any comments or questions, please put those in the comments box below. The <code>UpPlug</code> library can be enhanced in many ways, below are some of them:</p>

<ul>
<li>Uploaded File validation in term of file size and content type.</li>
<li>Supporting Amazon S3 file upload.</li>
<li>Callback after <code>Repo.update</code> or <code>Repo.insert</code> instead of calling the process uploaded file function inside the controller</li>
<li>Callback support for uploaded file after it has been processed.</li>
</ul>

<p>That&#39;s all for now. Thank you for your time. :-)</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Pattern-matching | Learn Elixir Language]]></title>
  <link href="http://learnelixir.com/blog/categories/pattern-matching/atom.xml" rel="self"/>
  <link href="http://learnelixir.com/"/>
  <updated>2014-11-02T12:33:20+08:00</updated>
  <id>http://learnelixir.com/</id>
  <author>
    <name><![CDATA[Learn Elixir]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Have Fun With Pattern Matching in Elixir]]></title>
    <link href="http://learnelixir.com/blog/2014/10/07/have-fun-with-pattern-matching-in-elixir/"/>
    <updated>2014-10-07T22:28:03+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/07/have-fun-with-pattern-matching-in-elixir</id>
    <content type="html"><![CDATA[<p>In this article, we will look deeper into pattern matching in Elixir. Coming from prologue background, I think pattern matching is quite a fun thing to do. Prologue is a too hard core language for this kind of thing, whereas Elixir is mixing just well between normal programming language and pattern matching&#8230;</p>

<!-- more -->

<p>First, let&#39;s look at the very basic pattern matching in Elixir:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="n">variable</span> <span class="p">=</span> <span class="mi">1</span>
<span class="mi">1</span>
</code></pre></div>
<p>In a common programming language like Ruby or Java, this is simple an assignment. However, in Elixir, this assignment operator is called the match operator. Here is why</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="n">variable</span> <span class="p">=</span> <span class="mi">1</span>
<span class="mi">1</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="mi">1</span> <span class="p">=</span> <span class="n">variable</span>
<span class="mi">1</span>
</code></pre></div>
<p>In Ruby or Java, the expression <code>1 = variable</code> will give you a syntax error because 1 cannot be assigned to a variable. But in Elixir, it is just fine, because 1 and variable are matching in value. However, you cannot match an undefined variable with a number when the variable in on the right hand side</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="mi">2</span> <span class="p">=</span> <span class="n">x</span>
<span class="o">**</span> <span class="p">(</span><span class="nc">RuntimeError</span><span class="p">)</span> <span class="n">undefined</span> <span class="ss">function</span><span class="p">:</span> <span class="n">x</span><span class="o">/</span><span class="mi">0</span>
</code></pre></div>
<p>Without pre-definining <code>x</code> variable, Elixir will think that you are trying to call a function <code>x</code> (<code>x/0</code>) without any argument. Now, let&#39;s go further to matching few variables at the same time</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">]</span> <span class="p">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">a</span>
<span class="mi">1</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">b</span>
<span class="mi">2</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">c</span>
<span class="mi">3</span>
</code></pre></div>
<p>After this matching operation, <code>a</code>, <code>b</code> and <code>c</code> will have value <code>1</code>, <code>2</code> and <code>3</code> respectively. This is extremely useful when you need to assign a list of variables or when you return a function as a tuple. We can now go a bit further by first trying to understand a definition of a list:</p>

<p><strong>A list is a series of element which can have 0 elements.</strong></p>

<p>So based on this definition, I can write a list as following</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">a list is <span class="o">[]</span> <span class="c"># empty list</span>
<span class="c"># or</span>
a list is <span class="o">[</span>element1, element2, element3, element4, etc...<span class="o">]</span>
</code></pre></div>
<p>The first is easy to understand, a list can be empty. The second list basically shows that it can have many elements, which can be understood that a list is combined from <code>element1</code> and the rest of the element:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">list is <span class="o">[</span>element1, and the remaining<span class="o">]</span>
</code></pre></div>
<p>In mathematics, we can say</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">list</span> <span class="o">=</span> <span class="o">[</span>head <span class="p">|</span> tail<span class="o">]</span>
</code></pre></div>
<p>Where <code>head</code> is <code>element1</code> and <code>tail</code> is the remaining. So now we apply this into Elixir pattern matching</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="n">list</span> <span class="p">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="p">[</span><span class="n">head</span> <span class="p">|</span> <span class="n">tail</span><span class="p">]</span> <span class="p">=</span> <span class="n">list</span> 
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</code></pre></div>
<p>Because of patter matching, <code>head</code> is now carrying value <code>1</code></p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="n">head</span>
<span class="mi">1</span>
</code></pre></div>
<p>And tail is now carrying the remaining of the list which is:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="n">tail</span>
<span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</code></pre></div>
<p>So if we want to get our all elements of this list, we can just simply continue to assign like following:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="p">[</span><span class="n">head1</span> <span class="p">|</span> <span class="n">tail1</span><span class="p">]</span> <span class="p">=</span> <span class="n">tail</span>
<span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">head1</span>
<span class="mi">2</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">tail1</span>
<span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</code></pre></div>
<p>So on so forth we will be able to extract every single element of this list using pattern matching. You can note that we never talk about a for loop, yet we still can go through the loop easily using Pattern Matching.</p>

<p>The applications of pattern matching is endless, but I am going to show you a classic pattern matching by trying to calculate a sum of a list. </p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">Utils</span> <span class="k">do</span>
  <span class="kd">def</span> <span class="n">sum</span><span class="p">([]),</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">0</span>
  <span class="kd">def</span> <span class="n">sum</span><span class="p">([</span><span class="n">head</span> <span class="p">|</span> <span class="n">tail</span><span class="p">]),</span> <span class="ss">do</span><span class="p">:</span> <span class="n">head</span> <span class="o">+</span> <span class="n">sum</span><span class="p">(</span><span class="n">tail</span><span class="p">)</span>
<span class="k">end</span>

<span class="nc">Utils</span><span class="p">.</span><span class="n">sum</span><span class="p">([])</span> <span class="c1"># return 0</span>
<span class="nc">Utils</span><span class="p">.</span><span class="n">sum</span><span class="p">([</span><span class="mi">9</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">6</span><span class="p">])</span> <span class="c1"># returns 30</span>
</code></pre></div>
<p>Let&#39;s go through quickly how this work:</p>

<ul>
<li>On line 2, we definied a sum function for an empty list (pattern matching an empty list in sum function&#39;s argument) and return 0.</li>
<li>On line 3, we defined another sum function but with a non empty list, this function then returns the result as the value of <code>head</code> + the sum of the remaining inside the list (<code>sum(tail)</code>). It is actually a recursion by calling the function itself in its evaluation.</li>
</ul>

<p>So by now you should have a basic understanding how Elixir pattern matching works. Eventually, you will see more and more this type of pattern matching throughout Elixir Programming.</p>
]]></content>
  </entry>
  
</feed>

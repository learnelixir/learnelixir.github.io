<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Test | Learn Elixir Language]]></title>
  <link href="http://learnelixir.com/blog/categories/test/atom.xml" rel="self"/>
  <link href="http://learnelixir.com/"/>
  <updated>2014-10-30T07:33:23+08:00</updated>
  <id>http://learnelixir.com/</id>
  <author>
    <name><![CDATA[Learn Elixir]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Basic Testing With Elixir]]></title>
    <link href="http://learnelixir.com/blog/2014/10/06/basic-testing-with-elixir/"/>
    <updated>2014-10-06T22:31:16+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/06/basic-testing-with-elixir</id>
    <content type="html"><![CDATA[<p>In this article, we will go through some basic testing syntax with elixir. Elixir is a language that very well supports unit test and I totally love it when I first see it on the video. Let&#39;s start by writing a simple assertion</p>

<!--more-->

<p>You can use your favorite editor to edit an <code>.ex</code> file. In my case, I create a test folder and edit my <code>sample.ex</code> inside</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mkdir <span class="nb">test</span>
<span class="nv">$ </span>vim <span class="nb">test</span>/sample.ex
</code></pre></div>
<p>Now, inside this <code>sample.ex</code>, I can immediately write my first assertion like below</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="nc">ExUnit</span><span class="p">.</span><span class="n">start</span>                                                      

<span class="kd">defmodule</span> <span class="nc">TestIt</span> <span class="k">do</span>                                               
  <span class="kn">use</span> <span class="nc">ExUnit.Case</span>                                                 

  <span class="n">test</span> <span class="s2">&quot;1 + 1 is 2&quot;</span> <span class="k">do</span>                                            
    <span class="n">assert</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">==</span> <span class="mi">2</span>                                             
  <span class="k">end</span>                                                             
<span class="k">end</span>
</code></pre></div>
<p>As you can see, the test case can be written in a very simple manner. It starts with <code>ExUnit.start</code> and then make use of <code>ExUnit.Case</code> in <code>use ExUnit.Case</code></p>

<p>You can then run this file by this command</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>elixir sample.ex
.

Finished in 0.03 seconds <span class="o">(</span>0.03s on load, 0.00s on tests<span class="o">)</span>
<span class="m">1</span> tests, <span class="m">0</span> failures

Randomized with seed 322828
</code></pre></div>
<p>That&#39;s for the start, now we can following a Test Driven Development method (TDD) to develop something basic just for learning purpose. Let&#39;s write fibonacci generate. </p>

<p>Giving a sequence number, the program will generate out a fibonacci number. Before we start writing, let&#39;s review the definition of fibonacci number </p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">fibonacci<span class="o">(</span>0<span class="o">)</span> <span class="o">=</span> 1
fibonacci<span class="o">(</span>1<span class="o">)</span> <span class="o">=</span> 1
fibonacci<span class="o">(</span>n<span class="o">)</span> <span class="o">=</span> fibonacci<span class="o">(</span>n - 1<span class="o">)</span> + fibonacci<span class="o">(</span>n - 2<span class="o">)</span> 
</code></pre></div>
<p>With this definition in mind, let start by writing the first test:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="nc">ExUnit</span><span class="p">.</span><span class="n">start</span>                                                      

<span class="kd">defmodule</span> <span class="nc">TestIt</span> <span class="k">do</span>                                               
  <span class="kn">use</span> <span class="nc">ExUnit.Case</span>                                                 

  <span class="n">test</span> <span class="s2">&quot;fibonacci number 0 is 1&quot;</span> <span class="k">do</span>
    <span class="n">assert</span> <span class="nc">Sequence</span><span class="p">.</span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Run this test and you can expect a failure:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>elixir sample.ex

  1<span class="o">)</span> <span class="nb">test </span>fibonacci number <span class="m">0</span> is <span class="m">1</span> <span class="o">(</span>TestIt<span class="o">)</span>
     sample.ex:6
     ** <span class="o">(</span>UndefinedFunctionError<span class="o">)</span> undefined <span class="k">function</span>: <span class="se">\</span>
            Sequence.fibonacci/1 <span class="o">(</span>module Sequence is not available<span class="o">)</span>
     stacktrace:
       Sequence.fibonacci<span class="o">(</span>0<span class="o">)</span>
       sample.ex:7



Finished in 0.03 seconds <span class="o">(</span>0.03s on load, 0.00s on tests<span class="o">)</span>
<span class="m">1</span> tests, <span class="m">1</span> failures

Randomized with seed 490020
</code></pre></div>
<p>As you can expect, the failure is because we do not have any module <code>Sequence</code> and function <code>fibonacci</code>. Let go to <code>sample.ex</code> and add in a function fibonacci:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="nc">ExUnit</span><span class="p">.</span><span class="n">start</span>                                                      

<span class="kd">defmodule</span> <span class="nc">Sequence</span> <span class="k">do</span>
  <span class="kd">def</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="k">do</span>
    <span class="mi">1</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="kd">defmodule</span> <span class="nc">TestIt</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">ExUnit.Case</span>

  <span class="n">test</span> <span class="s2">&quot;fibonacci number 0 is 1&quot;</span> <span class="k">do</span> 
    <span class="n">assert</span> <span class="nc">Sequence</span><span class="p">.</span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Now we have <code>fibonacci</code> function in <code>Sequence</code> module, which takes in a number and always return 1. Run the test again</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">elixir sample.ex
.

Finished in 0.04 seconds <span class="o">(</span>0.04s on load, 0.00s on tests<span class="o">)</span>
<span class="m">1</span> tests, <span class="m">0</span> failures

Randomized with seed 311294
</code></pre></div>
<p>Great! It passed. We are at green state now. We can now refactor a bit to make our source code a bit shorter:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="nc">ExUnit</span><span class="p">.</span><span class="n">start</span>                                                      

<span class="kd">defmodule</span> <span class="nc">Sequence</span> <span class="k">do</span>
  <span class="kd">def</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">1</span>
<span class="k">end</span>

<span class="kd">defmodule</span> <span class="nc">TestIt</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">ExUnit.Case</span>

  <span class="n">test</span> <span class="s2">&quot;fibonacci number 0 is 1&quot;</span> <span class="k">do</span>
    <span class="n">assert</span> <span class="nc">Sequence</span><span class="p">.</span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>I have moved the block inside <code>def fibonacci</code> to become something shorter. In fact, <code>def</code> is a function call in Elixir, which takes in a pattern (<code>fibonacci(n)</code>) and <code>do</code> something. This something needs to be a regular expression.</p>

<p>Now run the test again and you would expect it to pass</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>elixir sample.ex
sample.ex:4: warning: variable n is unused
.

Finished in 0.04 seconds <span class="o">(</span>0.04s on load, 0.00s on tests<span class="o">)</span>
<span class="m">1</span> tests, <span class="m">0</span> failures

Randomized with seed 999642
</code></pre></div>
<p>You can ignore the warning of unused variable n for now. We will come back to that shortly. Now, let&#39;s write some more test cases:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="nc">ExUnit</span><span class="p">.</span><span class="n">start</span> 

<span class="kd">defmodule</span> <span class="nc">Sequence</span> <span class="k">do</span>
  <span class="kd">def</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">1</span>
<span class="k">end</span>

<span class="kd">defmodule</span> <span class="nc">TestIt</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">ExUnit.Case</span>

  <span class="n">test</span> <span class="s2">&quot;fibonacci number 0 is 1&quot;</span> <span class="k">do</span>
    <span class="n">assert</span> <span class="nc">Sequence</span><span class="p">.</span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span>
  <span class="k">end</span>

  <span class="n">test</span> <span class="s2">&quot;fibonacci number 1 is 1&quot;</span> <span class="k">do</span>
    <span class="n">assert</span> <span class="nc">Sequence</span><span class="p">.</span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span>
  <span class="k">end</span>

  <span class="n">test</span> <span class="s2">&quot;fibonacci number 2 is 2&quot;</span> <span class="k">do</span>
    <span class="n">assert</span> <span class="nc">Sequence</span><span class="p">.</span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span> 
  <span class="k">end</span>

  <span class="n">test</span> <span class="s2">&quot;fibonacci number 3 is 3&quot;</span> <span class="k">do</span>
    <span class="n">assert</span> <span class="nc">Sequence</span><span class="p">.</span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span> 
  <span class="k">end</span>

  <span class="n">test</span> <span class="s2">&quot;fibonacci number 4 is 5&quot;</span> <span class="k">do</span>
    <span class="n">assert</span> <span class="nc">Sequence</span><span class="p">.</span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span> 
  <span class="k">end</span>

  <span class="n">test</span> <span class="s2">&quot;fibonacci number 10 is 89&quot;</span> <span class="k">do</span>
    <span class="n">assert</span> <span class="nc">Sequence</span><span class="p">.</span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="o">==</span> <span class="mi">89</span> 
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>And when run the test, it will fail as expected</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>elixir sample.ex
  1<span class="o">)</span> <span class="nb">test </span>fibonacci number <span class="m">2</span> is <span class="m">2</span> <span class="o">(</span>TestIt<span class="o">)</span>
     sample.ex:18
     Assertion <span class="nv">with</span> <span class="o">==</span> failed
     code: Sequence.fibonacci<span class="o">(</span>2<span class="o">)</span> <span class="o">==</span> 2
     lhs:  1
     rhs:  2
     stacktrace:
       sample.ex:19



  2<span class="o">)</span> <span class="nb">test </span>fibonacci number <span class="m">3</span> is <span class="m">3</span> <span class="o">(</span>TestIt<span class="o">)</span>
     sample.ex:22
     Assertion <span class="nv">with</span> <span class="o">==</span> failed
     code: Sequence.fibonacci<span class="o">(</span>2<span class="o">)</span> <span class="o">==</span> 2
     lhs:  1
     rhs:  2
     stacktrace:
       sample.ex:23



  3<span class="o">)</span> <span class="nb">test </span>fibonacci number <span class="m">4</span> is <span class="m">5</span> <span class="o">(</span>TestIt<span class="o">)</span>
     sample.ex:26
     Assertion <span class="nv">with</span> <span class="o">==</span> failed
     code: Sequence.fibonacci<span class="o">(</span>2<span class="o">)</span> <span class="o">==</span> 2
     lhs:  1
     rhs:  2
     stacktrace:
       sample.ex:27

..

  4<span class="o">)</span> <span class="nb">test </span>fibonacci number <span class="m">10</span> is <span class="m">89</span> <span class="o">(</span>TestIt<span class="o">)</span>
     sample.ex:30
     Assertion <span class="nv">with</span> <span class="o">==</span> failed
     code: Sequence.fibonacci<span class="o">(</span>10<span class="o">)</span> <span class="o">==</span> 89
     lhs:  1
     rhs:  89
     stacktrace:
       sample.ex:31



Finished in 0.06 seconds <span class="o">(</span>0.06s on load, 0.00s on tests<span class="o">)</span>
<span class="m">6</span> tests, <span class="m">4</span> failures

Randomized with seed 982355
</code></pre></div>
<p>Now let try to write the code to pass these cases using the definition</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">Sequence</span> <span class="k">do</span>
  <span class="kd">def</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="ow">when</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">1</span>
  <span class="kd">def</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<p>Note that <code>when n &lt;= 1</code> in the first function definition is Elixir guard conidtion&#8220;. Now, run the test and everything is passed</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>elixir sample.ex
......

Finished in 0.06 seconds <span class="o">(</span>0.06s on load, 0.00s on tests<span class="o">)</span>
<span class="m">6</span> tests, <span class="m">0</span> failures

Randomized with seed 456516
</code></pre></div>
<p>Since elixir function definition is patterned matching. You also can write as following to match according to the mathematic definition</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">Sequence</span> <span class="k">do</span>
  <span class="kd">def</span> <span class="n">fibonacci</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">1</span>
  <span class="kd">def</span> <span class="n">fibonacci</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="mi">1</span>
  <span class="kd">def</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="ss">do</span><span class="p">:</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<p>Here we do not need a guard condition for n in third function as it will match first and second if n is 0 or 1. The function matching is top to bottom. Run the test again</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>elixir sample.ex
......

Finished in 0.06 seconds <span class="o">(</span>0.06s on load, 0.00s on tests<span class="o">)</span>
<span class="m">6</span> tests, <span class="m">0</span> failures

Randomized with seed 163178
</code></pre></div>
<p>We concluded this article here and hope you have learned and enjoyed the following from Elixir. Thank you for your time</p>

<ul>
<li>TDD in Elixir</li>
<li>ExUnit Test</li>
<li>Function Pattern Matching</li>
<li>Guard Conditions</li>
</ul>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Deploy | Learn Elixir Language]]></title>
  <link href="http://learnelixir.com/blog/categories/deploy/atom.xml" rel="self"/>
  <link href="http://learnelixir.com/"/>
  <updated>2014-11-14T08:19:07+08:00</updated>
  <id>http://learnelixir.com/</id>
  <author>
    <name><![CDATA[Learn Elixir]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Deploy Phoenix Application to a Ubuntu Server]]></title>
    <link href="http://learnelixir.com/blog/2014/10/16/deploy-phoenix-application-to-a-ubuntu-server/"/>
    <updated>2014-10-16T22:26:46+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/16/deploy-phoenix-application-to-a-ubuntu-server</id>
    <content type="html"><![CDATA[<p><strong>UPDATE</strong> on 28th Oct 14: I have updated this article in order to work with Phoenix framework version 0.5.0. Previously the Phoenix framework used in this article was 0.4.1. The source code is available on the following git URL:</p>

<p><a href="https://github.com/learnelixir/my-awesome-app">https://github.com/learnelixir/my-awesome-app</a>
<hr/><br/>
In previous article, we have already learned how to deploy a Phoenix Application to Heroku server. I am actually quite curious to see how Elixir, and Phoenix can work with nginx server. That&#39;s the reason why I try to dig into this topic. Here are the steps that I managed to find out how to automate the deployment process and run the application on nginx server.</p>

<!-- more -->

<h3>Step to set create a basic Phoenix application.</h3>

<p>You can skip this section if you already have a Phoenix application to deploy</p>

<p>From phoenix installation folder, run the following command. You can name it any name as long as you remember to use the same app name in subsequent steps.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix phoenix.new my_awesome_app ../
</code></pre></div>
<p>Enter this new application folder and install all the dependencies</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">cd</span> ../my_awesome_app
mix <span class="k">do</span> deps.get, compile
</code></pre></div>
<p>This is a miminal number of steps to setup a phoenix application. Eventually, you will need to add more code to build it up. Moving forward, let&#39;s deploy this application. </p>

<h3>Deploy and Deploy</h3>

<h4>Step 1: Install capistrano and capify</h4>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>gem install capistrano --version<span class="o">=</span>2.15.5 
</code></pre></div>
<p>then capify it.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>capify . 
<span class="o">[</span>add<span class="o">]</span> writing <span class="s1">&#39;./Capfile&#39;</span>
<span class="o">[</span>add<span class="o">]</span> writing <span class="s1">&#39;./config/deploy.rb&#39;</span>
<span class="o">[</span><span class="k">done</span><span class="o">]</span> capified!
</code></pre></div>
<p>and create a folder for multi staging deploy later.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mkdir config/deploy
</code></pre></div>
<h4>Step 2: Add exrm to the dependencies</h4>

<p>Exrm stands for Elixir Release Management. It is a very nice tool to help release this phoenix app into a runnable standalone application. Everytime we deploy, we will need to run <code>mix release</code> to generate a ready-to-run application. Exrm will help us to handle the release process nicely.</p>

<p>To start, you will need to add <code>exrm</code> into <code>mix.exs</code>  </p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defp</span> <span class="n">deps</span> <span class="k">do</span>
  <span class="p">[</span>   
    <span class="p">{</span><span class="ss">:phoenix</span><span class="p">,</span> <span class="s2">&quot;0.5.0&quot;</span><span class="p">},</span>
    <span class="p">{</span><span class="ss">:cowboy</span><span class="p">,</span> <span class="s2">&quot;~&gt; 1.0.0&quot;</span><span class="p">},</span>
    <span class="p">{</span><span class="ss">:exrm</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.14.11&quot;</span><span class="p">}</span>
  <span class="p">]</span>   
<span class="k">end</span>
</code></pre></div>
<p>And install</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix deps.get
</code></pre></div>
<h4>Step 3: Change the way the application starts</h4>

<p>Add in <strong>line 14</strong> to the application file in lib folder. In my case it is <code>lib/my_awesome_app.ex</code></p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">MyAwesomeApp</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Application</span>

  <span class="c1"># See http://elixir-lang.org/docs/stable/elixir/Application.html</span>
  <span class="c1"># for more information on OTP Applications</span>
  <span class="kd">def</span> <span class="n">start</span><span class="p">(</span><span class="n">_type</span><span class="p">,</span> <span class="n">_args</span><span class="p">)</span> <span class="k">do</span>
    <span class="kn">import</span> <span class="nc">Supervisor.Spec</span><span class="p">,</span> <span class="ss">warn</span><span class="p">:</span> <span class="no">false</span>

    <span class="n">children</span> <span class="p">=</span> <span class="p">[</span>
      <span class="c1"># Define workers and child supervisors to be supervised</span>
      <span class="c1"># worker(TestApp.Worker, [arg1, arg2, arg3])</span>
    <span class="p">]</span>

    <span class="nc">MyAwesomeApp.Router</span><span class="p">.</span><span class="n">start</span>

    <span class="n">opts</span> <span class="p">=</span> <span class="p">[</span><span class="ss">strategy</span><span class="p">:</span> <span class="ss">:one_for_one</span><span class="p">,</span> <span class="ss">name</span><span class="p">:</span> <span class="nc">MyAwesomeApp.Supervisor</span><span class="p">]</span>
    <span class="nc">Supervisor</span><span class="p">.</span><span class="n">start_link</span><span class="p">(</span><span class="n">children</span><span class="p">,</span> <span class="n">opts</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>After adding line 14, your application in development mode will no longer be able to start the normal way - <code>mix phoenix.start</code>. It will crash immediately like below.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">Running MyAwesomeApp.Router with Cowboy on port 4000
** <span class="o">(</span>CaseClauseError<span class="o">)</span> no <span class="k">case</span> clause matching: <span class="o">{</span>:error, <span class="o">{</span>:already_started, <span class="c">#PID&lt;0.149.0&gt;}}</span>
    <span class="o">(</span>phoenix<span class="o">)</span> lib/phoenix/router.ex:78: Phoenix.Router.start_adapter/2
    <span class="o">(</span>phoenix<span class="o">)</span> lib/mix/tasks/phoenix/start.ex:12: Mix.Tasks.Phoenix.Start.run/1
    <span class="o">(</span>mix<span class="o">)</span> lib/mix/cli.ex:55: Mix.CLI.run_task/2
    <span class="o">(</span>elixir<span class="o">)</span> src/elixir_lexical.erl:17: :elixir_lexical.run/3
    <span class="o">(</span>elixir<span class="o">)</span> lib/code.ex:316: Code.require_file/2
</code></pre></div>
<p>To fix this issue, you will need to run the phoenix server using the command below in development mode:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>iex -S mix phoenix.start
</code></pre></div>
<h4>Step 3: Push all the source code to a git repository</h4>

<p>Create a git place for your code to be stored in online. For my case, I have created a public github project at <code>git@github.com:learnelixir/my-awesome-app.git</code></p>

<p>Then from the application root folder, type the following commands to add the git remote url. Remember to change the git url accordingly</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git init
<span class="nv">$ </span>git remote add origin git@github.com:learnelixir/my-awesome-app.git
</code></pre></div>
<p>Then push everything up to this repo</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git add . <span class="o">&amp;&amp;</span> git commit -am <span class="s2">&quot;initial commit&quot;</span>
<span class="nv">$ </span>git push origin master
</code></pre></div>
<h4>Step 4: Install erlang and elixir on ubuntu server</h4>

<p>Login to your server, and run the following command to install erlang environment:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>wget http://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb 
<span class="nv">$ </span>sudo dpkg -i erlang-solutions_1.0_all.deb
<span class="nv">$ </span>sudo apt-get update
<span class="nv">$ </span>sudo apt-get install erlang
</code></pre></div>
<p>Since phoenix is runnng on Elixir 1.0.1+ now, we cannot install elixir by using <code>sudo apt-get install elixir</code> which will only install elixir 1.0.0. We will need to download the prebuilt package. If you have already installed elixir, you will need to remove it by using the command <code>sudo apt-get remove elixir</code>. After that, from your home folder, type the following commands:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">cd</span> ~
<span class="nv">$ </span>mkdir -p src
<span class="nv">$ </span><span class="nb">cd </span>src
<span class="nv">$ </span>wget https://github.com/elixir-lang/elixir/releases/download/v1.0.2/Precompiled.zip
<span class="nv">$ </span>unzip Precompile.zip -d elixir
</code></pre></div>
<p>Then open <code>~/.profile</code> file and add in the elixir path</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim ~/.profile
</code></pre></div>
<p>add the path to elixir bin folder at the end of the file. In my case it is <code>/home/app/src/elixir</code></p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;$PATH:/home/app/src/elixir/bin&quot;</span>
<span class="c"># export PATH=&quot;$PATH:&lt;path_to_elixir_bin_folder&gt;&quot;</span>
</code></pre></div>
<p>then make <code>~/.profile</code> take effect:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>. ~/.profile
</code></pre></div>
<p>and check Elixir version now. It should come up with 1.0.2</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>elixir --version
Elixir 1.0.2
</code></pre></div>
<h4>Step 5: Adjust your locale to UTF8</h4>

<p>Elixir is quite particular about the locale issue. It will give a lot of warnings later when we deploy if we do not set it up now. You can start by running the following commands:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">export </span><span class="nv">LANGUAGE</span><span class="o">=</span>en_US.UTF-8
<span class="nv">$ </span><span class="nb">export </span><span class="nv">LANG</span><span class="o">=</span>en_US.UTF-8
<span class="nv">$ </span><span class="nb">export </span><span class="nv">LC_ALL</span><span class="o">=</span>en_US.UTF-8
<span class="nv">$ </span>locale-gen en_US.UTF-8
<span class="nv">$ </span>sudo apt-get install locales
<span class="nv">$ </span>sudo dpkg-reconfigure locales
</code></pre></div>
<p>Then put the following export lines at the end of <code>~/.profile</code>: </p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">export </span><span class="nv">LANGUAGE</span><span class="o">=</span>en_US.UTF-8
<span class="nb">export </span><span class="nv">LANG</span><span class="o">=</span>en_US.UTF-8
<span class="nb">export </span><span class="nv">LC_ALL</span><span class="o">=</span>en_US.UTF-8
</code></pre></div>
<p>Finally, put the following code at the end of <code>/etc/environment</code>:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">LC_ALL</span><span class="o">=</span>en_US.UTF-8
<span class="nv">LANG</span><span class="o">=</span>en_US.UTF-8
</code></pre></div>
<h4>Step 5: Edit config/deploy.rb</h4>

<p>Edit <code>config/deploy.rb</code> file:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim config/deploy.rb
</code></pre></div>
<p>And paste in the following code:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">&#39;capistrano/ext/multistage&#39;</span>

<span class="n">set</span> <span class="ss">:stages</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;staging&quot;</span><span class="p">,</span> <span class="s2">&quot;production&quot;</span><span class="o">]</span>
<span class="n">set</span> <span class="ss">:default_stage</span><span class="p">,</span> <span class="s2">&quot;production&quot;</span>

<span class="n">set</span> <span class="ss">:keep_releases</span><span class="p">,</span> <span class="mi">5</span>
<span class="n">set</span> <span class="ss">:application</span><span class="p">,</span> <span class="s2">&quot;My Awesome App&quot;</span>
<span class="n">set</span> <span class="ss">:repository</span><span class="p">,</span>  <span class="s2">&quot;git@github.com:learnelixir/my-awesome-app.git&quot;</span>
<span class="n">set</span> <span class="ss">:scm</span><span class="p">,</span> <span class="ss">:git</span>
<span class="n">set</span> <span class="ss">:branch</span><span class="p">,</span> <span class="ss">:master</span> 
<span class="n">set</span> <span class="ss">:use_sudo</span><span class="p">,</span> <span class="kp">false</span>

<span class="n">set</span> <span class="ss">:normalize_asset_timestamps</span><span class="p">,</span> <span class="kp">false</span>
<span class="n">set</span> <span class="ss">:deploy_via</span><span class="p">,</span> <span class="ss">:remote_cache</span>
<span class="n">after</span> <span class="s2">&quot;deploy:update&quot;</span><span class="p">,</span> <span class="s2">&quot;deploy:cleanup&quot;</span>

<span class="n">after</span> <span class="s2">&quot;deploy:update&quot;</span><span class="p">,</span> <span class="s2">&quot;deploy:build&quot;</span><span class="p">,</span> <span class="s2">&quot;deploy:cleanup&quot;</span>

<span class="n">namespace</span> <span class="ss">:assets</span> <span class="k">do</span>
  <span class="n">task</span> <span class="ss">:precompile</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="ss">:web</span> <span class="k">do</span>
    <span class="c1"># do nothing</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">is_application_running?</span><span class="p">(</span><span class="n">current_path</span><span class="p">)</span>
  <span class="n">pid</span> <span class="o">=</span> <span class="n">capture</span><span class="p">(</span><span class="sx">%Q{ps ax -o pid= -o command=|</span>
<span class="sx">      grep &quot;/home/app/www/my_awesome_app/current/rel/my_awesome_app/.*/[b]eam&quot;|awk &#39;{print $1}&#39;}</span><span class="p">)</span>
  <span class="k">return</span> <span class="n">pid</span> <span class="o">!=</span> <span class="s2">&quot;&quot;</span>
<span class="k">end</span>

<span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
  <span class="n">task</span> <span class="ss">:is_running</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="ss">:web</span> <span class="k">do</span>
    <span class="n">is_running</span> <span class="o">=</span> <span class="n">is_application_running?</span><span class="p">(</span><span class="n">current_path</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">is_running</span>
      <span class="nb">puts</span> <span class="s2">&quot;Application is running&quot;</span>
    <span class="k">else</span>
      <span class="nb">puts</span> <span class="s2">&quot;Application is NOT running&quot;</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="n">task</span> <span class="ss">:build</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="ss">:web</span> <span class="k">do</span>
    <span class="n">run</span> <span class="s2">&quot;cd </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2"> &amp;&amp; mix deps.get &amp;&amp; MIX_ENV=</span><span class="si">#{</span><span class="n">mix_env</span><span class="si">}</span><span class="s2"> mix release&quot;</span>
  <span class="k">end</span> 

  <span class="n">task</span> <span class="ss">:restart</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="ss">:web</span> <span class="k">do</span>
    <span class="k">if</span> <span class="n">is_application_running?</span><span class="p">(</span><span class="n">current_path</span><span class="p">)</span>
      <span class="n">run</span> <span class="s2">&quot;cd </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2">/rel/my_awesome_app/bin &amp;&amp; ./my_awesome_app stop&quot;</span> 
    <span class="k">end</span> 
    <span class="n">run</span> <span class="s2">&quot;cd </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2">/rel/my_awesome_app/bin &amp;&amp; ./my_awesome_app start&quot;</span>
  <span class="k">end</span>

  <span class="n">task</span> <span class="ss">:start</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="ss">:web</span> <span class="k">do</span>
    <span class="n">run</span> <span class="s2">&quot;cd </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2">/rel/my_awesome_app/bin &amp;&amp; ./my_awesome_app start&quot;</span>
  <span class="k">end</span>

  <span class="n">task</span> <span class="ss">:stop</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="ss">:web</span> <span class="k">do</span>
    <span class="n">run</span> <span class="s2">&quot;cd </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2">/rel/my_awesome_app/bin &amp;&amp; ./my_awesome_app stop&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>We have re-written 3 default task in capistrano. They are <code>restart</code>, <code>start</code> and <code>stop</code>. These are used to run the script which was generated in step 2. Note that this script is generated by the command `<code>mix release</code> on line 41. You will need to change the application name accordingly. In my case, the application name is <code>my_awesome_app</code>.</p>

<p>Besides <code>cap deploy</code>, here the commands that you can run with this capistrano:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>cap deploy:is_running <span class="c"># tell you if the application is running</span>
<span class="nv">$ </span>cap deploy:stop       <span class="c"># stop the application</span>
<span class="nv">$ </span>cap deploy:start      <span class="c"># start the application</span>
<span class="nv">$ </span>cap deploy:restart    <span class="c"># restart the application</span>
</code></pre></div>
<h4>Step 6: Create production.rb file inside config/deploy folder</h4>

<p>Create `<code>config/deploy/production.rb</code> file:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ vim config/deploy/production.rb
</code></pre></div>
<p>Then paste in the following code. You will need to change the server IP address in <code>xx.xx.xx.xx</code>, replace the server username in `<code>&lt;user&gt;</code> and change the path to your the compiled elixir bin folder mentioned ealier in this article:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">server</span> <span class="s2">&quot;xx.xx.xx.xx&quot;</span><span class="p">,</span> <span class="ss">:app</span><span class="p">,</span> <span class="ss">:web</span><span class="p">,</span> <span class="ss">:db</span><span class="p">,</span> <span class="ss">:primary</span> <span class="o">=&gt;</span> <span class="kp">true</span>
<span class="n">set</span> <span class="ss">:user</span><span class="p">,</span> <span class="s1">&#39;&lt;user&gt;&#39;</span>
<span class="n">set</span> <span class="ss">:branch</span><span class="p">,</span> <span class="ss">:master</span>
<span class="n">set</span> <span class="ss">:mix_env</span><span class="p">,</span> <span class="ss">:prod</span>
<span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s2">&quot;/home/&lt;user&gt;/www/my_awesome_app&quot;</span>

<span class="n">set</span> <span class="ss">:default_environment</span><span class="p">,</span> <span class="p">{</span>
  <span class="s1">&#39;PATH&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;$PATH:/home/app/src/elixir/bin&quot;</span> <span class="c1"># --&gt; replace by path to your elixir bin folder</span>
<span class="p">}</span>
</code></pre></div>
<p>You can also create <code>staging.rb</code> inside <code>config/deploy</code> folder as well for your staging environment.</p>

<h4>Step 7: Run deploy setup and actual deploy</h4>

<p>Run the following command to initialize the capistrano folder structure for you for future deployments:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>cap deploy:setup
</code></pre></div>
<p>Then launch the actual deployment and wait. On the first time, the server will take some times to install all the dependencies:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>cap deploy
</code></pre></div>
<h4>Step 8: Connect with nginx server</h4>

<p>Create the nginx configuration file on your nginx <code>sites-available</code> folder. In this case, it is <code>/etc/nginx/sites-available/my_awesome_app.com</code></p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim /etc/nginx/sites-available/my-awesome-app.com
</code></pre></div>
<p>Paste in the following code. Note that <strong>you will need to change the IP Address of your server on line 6 and the Domain name on line 7 to match with your server config</strong>:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">upstream my_awesome_app <span class="o">{</span>
  server 127.0.0.1:4000<span class="p">;</span>
<span class="o">}</span>

server <span class="o">{</span>
  listen xx.xx.xx.xx:80<span class="p">;</span>
  server_name app-url.com app-url.com<span class="p">;</span>

  try_files <span class="nv">$uri</span>/index.html <span class="nv">$uri</span> @my_awesome_app<span class="p">;</span>

  location @my_awesome_app <span class="o">{</span>
    proxy_set_header Host <span class="nv">$http_host</span><span class="p">;</span>
    <span class="k">if</span> <span class="o">(</span>!-f <span class="nv">$request_filename</span><span class="o">)</span> <span class="o">{</span>
      proxy_pass http://my_awesome_app<span class="p">;</span>
      <span class="nb">break</span><span class="p">;</span>
    <span class="o">}</span>
  <span class="o">}</span>
  error_page <span class="m">500</span> <span class="m">502</span> <span class="m">503</span> <span class="m">504</span> /500.html<span class="p">;</span>

  access_log  /var/log/nginx/my_awesome_app.log<span class="p">;</span>
  error_log  /var/log/nginx/my_awesome_app.log<span class="p">;</span>
<span class="o">}</span>
</code></pre></div>
<p>I leave the default port 4000 on my phoenix configuration. But you can change it inside your <code>config/prod.exs</code></p>

<p>Then link this file to the same file name in <code>/etc/nginx/sites-enabled</code>. Note that by using <code>ln</code> command, source file always come first.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">sudo ln -nfs /etc/nginx/sites-available/my-awesome-app.com <span class="se">\</span>
             /etc/nginx/sites-enabled/my-awesome-app.com
</code></pre></div>
<p>Test the nginx config:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>sudo /etc/init.d/nginx configtest
</code></pre></div>
<p>If everything is okay, restart the nginx server:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>sudo /etc/init.d/nginx restart
</code></pre></div>
<h3>Conclusion</h3>

<p>Now after so many steps, finally I can enjoy my small victory by visiting the site and see it has been deployed up :-)</p>

<p>{% img center /images/deploy<em>app</em>to_server/ubuntu.png 800 509 &#39;image&#39; &#39;images&#39; %}</p>

<p>Happy Deploying!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy Phonenix Application to Heroku]]></title>
    <link href="http://learnelixir.com/blog/2014/10/15/deploy-phonenix-application-to-heroku-server/"/>
    <updated>2014-10-15T23:16:00+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/15/deploy-phonenix-application-to-heroku-server</id>
    <content type="html"><![CDATA[<p><strong>UPDATE</strong> on 27th Oct 14: I have updated this article in order to work with Phoenix framework version 0.5.0. Previously the Phoenix framework used in this article was 0.4.1. The source code is available on the following git URL:</p>

<p><a href="https://github.com/learnelixir/phoenix-heroku">https://github.com/learnelixir/phoenix-heroku</a>
<hr/><br/>
Phoenix is a pretty cool web framework for Elixir. However, up to date, there are still very few resources on how to deploy a Phoenix application to a web server. I tried to google on how to deploy but could not find any tutorials that provide very clear and exact steps. Hence, in this article, let walkthrouh step by step how to do that with a heroku server.</p>

<!-- more -->

<h3>Create an awesome Phoenix application</h3>

<p>From phoenix installation folder, run the following command. You can name it any name as long as you remember to use the same app name in subsequent steps.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix phoenix.new phoenix-heroku ../
</code></pre></div>
<p>Enter this new application </p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">cd</span> ../phoenix-heroku
</code></pre></div>
<p>and change the phoenix deps to refer to ref <code>8cffae4</code> sha. There is an error in current Phoenix 0.5 version whereby the view layout file is touched even though it does not exists. This commit https://github.com/phoenixframework/phoenix/commit/86dee56b42da5f465c81cae6b0556942069a2165 has fixed that:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defp</span> <span class="n">deps</span> <span class="k">do</span>
  <span class="p">[{</span><span class="ss">:phoenix</span><span class="p">,</span> <span class="ss">git</span><span class="p">:</span> <span class="s2">&quot;https://github.com/phoenixframework/phoenix.git&quot;</span><span class="p">,</span> <span class="ss">ref</span><span class="p">:</span> <span class="s2">&quot;8cffae4&quot;</span><span class="p">},</span>
   <span class="p">{</span><span class="ss">:cowboy</span><span class="p">,</span> <span class="s2">&quot;~&gt; 1.0&quot;</span><span class="p">}]</span>
<span class="k">end</span>
</code></pre></div>
<p>Now, install all the depenencies</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">mix <span class="k">do</span> deps.get, compile
</code></pre></div>
<p>You will also need to modify the views to work with this phoenix version:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/views.ex
</code></pre></div>
<p>and change it to the following</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">PhoenixHeroku.Views</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Phoenix.View</span><span class="p">,</span> <span class="ss">root</span><span class="p">:</span> <span class="s2">&quot;web/templates&quot;</span>

  <span class="c1"># Everything in this block is available runs in this</span>
  <span class="c1"># module and in other views that use MyApp.View</span>
  <span class="n">using</span> <span class="k">do</span>
    <span class="c1"># Import common functionality</span>
    <span class="kn">import</span> <span class="nc">PhoenixHeroku.I</span><span class="mi">18</span><span class="n">n</span>
    <span class="kn">import</span> <span class="nc">PhoenixHeroku.Router.Helpers</span>

    <span class="c1"># Use Phoenix.HTML to import all HTML functions (forms, tags, etc)</span>
    <span class="kn">use</span> <span class="nc">Phoenix.HTML</span>

    <span class="c1"># Common aliases</span>
    <span class="kn">alias</span> <span class="nc">Phoenix.Controller.Flash</span>
  <span class="k">end</span> 

  <span class="c1"># Functions defined here are available to all other views/templates</span>
<span class="k">end</span>
</code></pre></div>
<p>This is a miminal number of steps to setup a phoenix application. Eventually, you will need to add more code to build it up. Moving forward, let&#39;s deploy this application. </p>

<p>Here are the steps to deploy to Heroku server</p>

<h4>Step 1: Run git init</h4>

<p>Pretty straight forward. Just run this command in your application folder</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git init 
</code></pre></div>
<h4>Step 2: Create the heroku application</h4>

<p><strong>Note</strong>: You will need to change the heroku application name, which is in this post -  <code>phoenix-heroku-demo</code> to your application name.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>heroku create phoenix-heroku-demo
Creating phoenix-heroku-demo... <span class="k">done</span>, stack is cedar
http://phoenix-heroku-demo.herokuapp.com/ <span class="p">|</span> git@heroku.com:phoenix-heroku-demo.git
Git remote heroku added
</code></pre></div>
<p>After this command, Heroku will provide me a URL for my heroku app. But there is nothing there yet. Also, do note down the name, we will use it later. Mine is <code>phoenix-heroku-demo</code>. Let&#39;s move to next step</p>

<h4>Step 3: Add buildback to your app</h4>

<p>Run a heroku config:set command as following</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>heroku config:set <span class="se">\ </span>
<span class="nv">BUILDPACK_URL</span><span class="o">=</span>https://github.com/HashNuke/heroku-buildpack-elixir.git -a phoenix-heroku-demo 
</code></pre></div>
<h4>Step 4: Set mix environment config</h4>

<p>You can choose to set mix environment to be staging or production at this step. Here I choose to run my app using production environment:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">heroku config:set <span class="nv">MIX_ENV</span><span class="o">=</span>prod
</code></pre></div>
<p>After this, you will need to modify some of the config file in this Phoenix application. Let&#39;s move to step 5</p>

<h4>Step 5: Edit Procfile</h4>

<p>Create file <code>Procfile</code> inside the root of your application folder with the following content</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>web: yes <span class="p">|</span> mix compile.protocols <span class="o">&amp;&amp;</span> elixir -pa _build/prod/consolidated -S mix phoenix.start 
</code></pre></div>
<p>If in step 4, you have specified staging environment, you will need to use the folder <code>_build/staging/consolidated</code> for the <code>-pa</code> option here. </p>

<h4>Step 6: Edit elixir_buildpack.config</h4>

<p>Create file <code>elixir_buildpack.config</code> inside the root of your application folder with the following content. Note that we will need to use Elixir 1.0.1 here as the Phoenix build at the point that I wrote this article requires that.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">erlang_version</span><span class="o">=</span>17.2
<span class="nv">elixir_version</span><span class="o">=</span>1.0.1
<span class="nv">always_rebuild</span><span class="o">=</span><span class="nb">true</span>
</code></pre></div>
<h4>Step 7: Commit everything and push</h4>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git add . <span class="o">&amp;&amp;</span> git commit -am <span class="s2">&quot;initial commit&quot;</span>
<span class="nv">$ </span>git push heroku master
</code></pre></div>
<p>It can be quite slow in this first time pushing to heroku master as there is a need to compile all the elixir depenencies on Heroku server, but subsequently it will be quite fast. Now I go to <code>http://phoenix-heroku-demo.herokuapp.com/</code> and hooray the phoenix home page is there</p>

<p>{% img center /images/deploy<em>app</em>to_server/heroku.png 800 509 &#39;image&#39; &#39;images&#39; %}</p>

<p>In subsequent deploys, you will just need to perform this step - step 7</p>

<p><strong>Tips</strong>: On your terminal, in order to run custom command for your phoenix app, you can trigger <code>heroku run</code>. For instance, if I want to run seed file, I can type the following command from my terminal:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>heroku run mix run seeds.ex
</code></pre></div>
<p>This has concluded for Heroku deploy. Happy Deploying :-) </p>
]]></content>
  </entry>
  
</feed>

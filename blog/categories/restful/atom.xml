<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Restful | Learn Elixir Language]]></title>
  <link href="http://learnelixir.com/blog/categories/restful/atom.xml" rel="self"/>
  <link href="http://learnelixir.com/"/>
  <updated>2014-10-30T07:33:23+08:00</updated>
  <id>http://learnelixir.com/</id>
  <author>
    <name><![CDATA[Learn Elixir]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Seven RESTful Actions in Phoenix Web App]]></title>
    <link href="http://learnelixir.com/blog/2014/10/18/seven-restful-actions-in-phoenix-web-app/"/>
    <updated>2014-10-18T23:20:53+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/18/seven-restful-actions-in-phoenix-web-app</id>
    <content type="html"><![CDATA[<p><strong>UPDATE</strong> on 30th Oct 14: I have updated this article in order to work with Phoenix framework version 0.5.0. Previously the Phoenix framework used in this article was 0.4.1
<hr/><br/>
For a new web application framework, I always start with building a 7 actions RESTful app to try out how good the framework is, and so far for Phoenix, it looks quite promising in term of code readability and the speed of churning out these 7 actions for a model entity. As these 7 RESTful actions are the backbone of the most web apps nowadays, it is crucial that we are familiar with the steps to create them.</p>

<!-- more -->

<p>In this article, we are going through the process of creating these 7 RESTful actions. These 7 actions are <code>index</code>, <code>new</code>, <code>create</code>, <code>edit</code>, <code>update</code>, <code>destroy</code> and <code>show</code>. The <code>index</code> action has already been covered in the very first article of this blog, but for the sake of completeness, it will be recovered in this article. </p>

<p>Anyway, here is the end result:</p>

<p>{% img center /images/7restful-action/screenshot.png 500 396 &#39;image&#39; &#39;images&#39; %}</p>

<p>You are able to download the source code on github - </p>

<p><a href="https://github.com/learnelixir/hardware-zone/tree/phoenix-0.5.0">https://github.com/learnelixir/hardware-zone/tree/phoenix-0.5.0</a></p>

<p>as well as check the application online - deployed to Heroku Server at </p>

<p><a href="https://github.com/learnelixir/hardware-zone/tree/phoenix-0.5.0">http://phoenix-hardware-zone.herokuapp.com</a></p>

<p>Let&#39;s start with create an application for this. We will be building a public hardware parts posting site where user will be able to post a hardware and other users will be able to see it.</p>

<h3>0 - Setup</h3>

<p>Let&#39;s start by creating a new project</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">cd</span> &lt;phoenix_directory&gt;
<span class="nv">$ </span>mix phoenix.new hardward_zone ../
</code></pre></div>
<p>This will create a all the stuffs that we need to develop the app. Now let&#39;s move to that project folder and install all the dependencies by typing the following commands:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">cd</span> ../
<span class="nv">$ </span>mix deps.get
</code></pre></div>
<p>Next, we will need to add in 2 <code>postgrex</code> and <code>ecto</code> library for our database. </p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim mix.exs
</code></pre></div>
<p>Add in line 5 and 6 in the following code to <code>deps</code> method</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defp</span> <span class="n">deps</span> <span class="k">do</span>
  <span class="p">[</span>
    <span class="p">{</span><span class="ss">:phoenix</span><span class="p">,</span> <span class="s2">&quot;0.5.0&quot;</span><span class="p">},</span>
    <span class="p">{</span><span class="ss">:cowboy</span><span class="p">,</span> <span class="s2">&quot;~&gt; 1.0.0&quot;</span><span class="p">},</span>
    <span class="p">{</span><span class="ss">:postgrex</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.5&quot;</span><span class="p">},</span>
    <span class="p">{</span><span class="ss">:ecto</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.2.0&quot;</span><span class="p">}</span>
  <span class="p">]</span>
<span class="k">end</span>
</code></pre></div>
<p>Also, in the same file, we will also need to add in <code>postgrex</code> and <code>ecto</code> application in <code>application</code> method</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="c1"># Configuration for the OTP application</span>
<span class="kd">def</span> <span class="n">application</span> <span class="k">do</span>
  <span class="p">[</span>   
    <span class="ss">mod</span><span class="p">:</span> <span class="p">{</span> <span class="nc">HardwareZone</span><span class="p">,</span> <span class="p">[]</span> <span class="p">},</span>
    <span class="ss">applications</span><span class="p">:</span> <span class="p">[</span><span class="ss">:phoenix</span><span class="p">,</span> <span class="ss">:cowboy</span><span class="p">,</span> <span class="ss">:logger</span><span class="p">,</span> <span class="ss">:postgrex</span><span class="p">,</span> <span class="ss">:ecto</span><span class="p">]</span>
  <span class="p">]</span>   
<span class="k">end</span> 
</code></pre></div>
<p>Install the dependencies again:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix deps.get
</code></pre></div>
<p>Now let go ahead and create a model named <code>hardware</code>. This model will be our central entity, which we will need to have a function to list all the hardwares on our home page, let user to view, create, update and remove individually. To start with this, let&#39;s create a Repo file to interface with postgres database:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/models/repo.ex
</code></pre></div>
<p>And copy the below code into this file. Remember to change <code>postgresuser</code> and <code>password</code> to the correct username and password of your postgres database:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">HardwareZone.Repo</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Ecto.Repo</span><span class="p">,</span> <span class="ss">adapter</span><span class="p">:</span> <span class="nc">Ecto.Adapters.Postgres</span>

  <span class="kd">def</span> <span class="n">conf</span> <span class="k">do</span>
    <span class="n">parse_url</span> <span class="s2">&quot;ecto://postgresuser:password@localhost/hardware_zone&quot;</span>
  <span class="k">end</span> 

  <span class="kd">def</span> <span class="n">priv</span> <span class="k">do</span>
    <span class="n">app_dir</span><span class="p">(</span><span class="ss">:hardware_zone</span><span class="p">,</span> <span class="s2">&quot;priv/repo&quot;</span><span class="p">)</span>
  <span class="k">end</span> 
<span class="k">end</span>
</code></pre></div>
<p>Now, we will need to make sure this <code>Repo</code> module to be started with our application and supervised. We can do this by editing <code>lib/hardware_zone.ex</code> and add in the worker to the list of supervised children. It is line 7 in the code below:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">def</span> <span class="n">start</span><span class="p">(</span><span class="n">_type</span><span class="p">,</span> <span class="n">_args</span><span class="p">)</span> <span class="k">do</span>
  <span class="kn">import</span> <span class="nc">Supervisor.Spec</span><span class="p">,</span> <span class="ss">warn</span><span class="p">:</span> <span class="no">false</span>

  <span class="n">children</span> <span class="p">=</span> <span class="p">[</span> 
    <span class="c1"># Define workers and child supervisors to be supervised</span>
    <span class="c1"># worker(TestApp.Worker, [arg1, arg2, arg3])</span>
    <span class="n">worker</span><span class="p">(</span><span class="nc">HardwareZone.Repo</span><span class="p">,</span> <span class="p">[])</span>
  <span class="p">]</span>   

  <span class="n">opts</span> <span class="p">=</span> <span class="p">[</span><span class="ss">strategy</span><span class="p">:</span> <span class="ss">:one_for_one</span><span class="p">,</span> <span class="ss">name</span><span class="p">:</span> <span class="nc">HardwareZone.Supervisor</span><span class="p">]</span>
  <span class="nc">Supervisor</span><span class="p">.</span><span class="n">start_link</span><span class="p">(</span><span class="n">children</span><span class="p">,</span> <span class="n">opts</span><span class="p">)</span>
<span class="k">end</span> 
</code></pre></div>
<p>Next, we will need to manually create a postgres database named <code>hardware_zone</code> by typing the following into your terminal:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>createdb hardware_zone --encoding<span class="o">=</span><span class="s1">&#39;utf-8&#39;</span> --locale<span class="o">=</span>en_US.UTF-8 --template<span class="o">=</span>template0<span class="p">;</span> 
</code></pre></div>
<p>This will create <code>hardware_zone</code> postgres database with utf8 encoding</p>

<p>Let&#39;s move on by creating a <code>hardware</code> model now:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/models/hardware.ex
</code></pre></div>
<p>And paste in the following code:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">HardwareZone.Hardware</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Ecto.Model</span>
  <span class="n">validate</span> <span class="n">hardware</span><span class="p">,</span> <span class="ss">name</span><span class="p">:</span> <span class="n">present</span><span class="p">()</span>

  <span class="n">schema</span> <span class="s2">&quot;hardwares&quot;</span> <span class="k">do</span>
    <span class="n">field</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:string</span>
    <span class="n">field</span> <span class="ss">:description</span><span class="p">,</span> <span class="ss">:string</span>
    <span class="n">field</span> <span class="ss">:manufacturer</span><span class="p">,</span> <span class="ss">:string</span>
    <span class="n">field</span> <span class="ss">:sale_contact_number</span><span class="p">,</span> <span class="ss">:string</span>
  <span class="k">end</span> 
<span class="k">end</span>
</code></pre></div>
<p>Next, generate a migration script by the following in command in your terminal</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix ecto.gen.migration HardwareZone.Repo create_hardware
</code></pre></div>
<p>This command will create a folder <code>migrations</code> under <code>priv/repo</code> and the migration file under this newly created <code>migrations</code> folder. You can go ahead and edit this migration file. In my case, it is <code>20141019010800_create_hardware.exs</code></p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim priv/repo/migrations/20141019010800_create_hardware.exs
</code></pre></div>
<p>then paste in the following code</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">HardwareZone.Repo.Migrations.CreateHardware</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Ecto.Migration</span>

  <span class="kd">def</span> <span class="n">up</span> <span class="k">do</span>
    <span class="s2">&quot;CREATE TABLE hardwares( </span><span class="err">\</span><span class="s2"></span>
<span class="s2">            id serial primary key, </span><span class="err">\</span><span class="s2"></span>
<span class="s2">            name varchar(255), </span><span class="err">\</span><span class="s2"></span>
<span class="s2">            description text, </span><span class="err">\</span><span class="s2"></span>
<span class="s2">            manufacturer varchar(255), </span><span class="err">\</span><span class="s2"></span>
<span class="s2">            sale_contact_number varchar(255))&quot;</span>
  <span class="k">end</span> 

  <span class="kd">def</span> <span class="n">down</span> <span class="k">do</span>
    <span class="s2">&quot;DROP TABLE hardwares&quot;</span>
  <span class="k">end</span> 
<span class="k">end</span>
</code></pre></div>
<p>In <code>up</code> function we are creating a table <code>hardwares</code>. This <code>up</code> function will run when we run the migration. In <code>down</code> function, we will drop the table that we create in <code>up</code> function, this will run when we rollback this migration. Let&#39;s move on by running this migration:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix ecto.migrate HardwareZone.Repo
</code></pre></div>
<p>In case that you make a mistake and would like to rollback, you can run the following command:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix ecto.rollback HardwareZone.Repo
</code></pre></div>
<p>Next, we will need to create a module to store all the hardwares database queries. Let&#39;s create <code>web/models/queries.ex</code></p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/models/queries.ex 
</code></pre></div>
<p>and paste in the following code:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">HardwareZone.Queries</span> <span class="k">do</span>
  <span class="kn">import</span> <span class="nc">Ecto.Query</span>

  <span class="kd">def</span> <span class="n">all_hardwares</span> <span class="k">do</span>
    <span class="n">query</span> <span class="p">=</span> <span class="n">from</span> <span class="n">hardware</span> <span class="ow">in</span> <span class="nc">HardwareZone.Hardware</span><span class="p">,</span> <span class="err">\</span>
            <span class="ss">select</span><span class="p">:</span> <span class="n">hardware</span>

    <span class="nc">HardwareZone.Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
  <span class="k">end</span> 
<span class="k">end</span>
</code></pre></div>
<p>Next, edit <code>web/router.ex</code> to include RESTful routes to the approriate controller:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/router.ex 
</code></pre></div>
<p>and paste in the source code below</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">HardwareZone.Router</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Phoenix.Router</span>

  <span class="n">scope</span> <span class="s2">&quot;/&quot;</span> <span class="k">do</span>
    <span class="n">pipe_through</span> <span class="ss">:browser</span>

    <span class="n">get</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="nc">HardwareZone.HardwaresController</span><span class="p">,</span> <span class="ss">:index</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:root</span>
    <span class="n">resources</span> <span class="s2">&quot;/hardwares&quot;</span><span class="p">,</span> <span class="nc">HardwareZone.HardwaresController</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>We have added 2 routes, the first <code>get</code> line is to route the user to the index page of all the hardwares, i.e. it is the index page. On the second route, we are using <code>resources</code> function to route all the 7 RESTful actions to the approriate action in <code>HardwareZone.HardwaresController</code> that we are going to create. To verify all the routes are in, let&#39;s run the following command to check:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix phoenix.routes
</code></pre></div>
<p>The following should come out from your terminal</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">         root_path  GET     /                    HardwareZone.HardwaresController.index/2
hardwares_path  GET     /hardwares           HardwareZone.HardwaresController.index/2
hardwares_path  GET     /hardwares/:id/edit  HardwareZone.HardwaresController.edit/2
hardwares_path  GET     /hardwares/new       HardwareZone.HardwaresController.new/2
hardwares_path  GET     /hardwares/:id       HardwareZone.HardwaresController.show/2
hardwares_path  POST    /hardwares           HardwareZone.HardwaresController.create/2
hardwares_path  PUT     /hardwares/:id       HardwareZone.HardwaresController.update/2
                    PATCH   /hardwares/:id       HardwareZone.HardwaresController.update/2
hardwares_path  DELETE  /hardwares/:id       HardwareZone.HardwaresController.destroy/2
</code></pre></div>
<p>The first column is the helper function name, which we will come back to it shortly. The second column is the HTTP web action that needs to be triggered. The third column is the relative URL to our application that needs to be trigger and the last column is the corresponding action to serve the triggered route.</p>

<p>Let try to start the phoenix server by running the following command from your terminal</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix phoenix.start
</code></pre></div>
<p>At this point of time, if you visit <a href="http://localhost:4000">http://localhost:4000</a>, it will show you the following error</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">(</span>UndefinedFunctionError<span class="o">)</span> undefined <span class="k">function</span>: HardwareZone.HardwaresController.call/2 
<span class="o">(</span>module HardwareZone.HardwaresController is not available<span class="o">)</span>
</code></pre></div>
<p>The reason why is because we have not create any controller and index action to cater for root routes. Let&#39;s create <code>HardwareZone.HardwaresController</code> now</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/controller/hardwares_controller.ex
</code></pre></div>
<p>and paste in the following initial code</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">HardwareZone.HardwaresController</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Phoenix.Controller</span>
  <span class="kn">alias</span> <span class="nc">HardwareZone.Hardware</span>
  <span class="kn">alias</span> <span class="nc">HardwareZone.Repo</span>
  <span class="kn">import</span> <span class="nc">HardwareZone.Router.Helpers</span>
<span class="k">end</span>
</code></pre></div>
<p>Next, let clean up a bit on the application view layout by editing file <code>web/templates/layout/application.html.eex</code></p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/templates/layout/application.html.eex
</code></pre></div>
<p>and replace by the following code. Note that I have removed the phoenix default header and footer</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;X-UA-Compatible&quot;</span> <span class="na">content=</span><span class="s">&quot;IE=edge&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width, initial-scale=1&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;description&quot;</span> <span class="na">content=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;author&quot;</span> <span class="na">content=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;title&gt;</span>Hardware Zone<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> 
          <span class="na">href=</span><span class="s">&quot;//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> 
          <span class="na">href=</span><span class="s">&quot;http://learnelixir.com/css/app.css&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://code.jquery.com/jquery-1.11.1.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://raw.githubusercontent.com/rails/jquery-ujs/master/src/rails.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
  <span class="nt">&lt;/head&gt;</span>

  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;navbar navbar-inverse navbar-fixed-top&quot;</span> <span class="na">role=</span><span class="s">&quot;navigation&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container-fluid&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;navbar-header&quot;</span><span class="nt">&gt;</span>
          <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> 
                  <span class="na">class=</span><span class="s">&quot;navbar-toggle&quot;</span> 
                  <span class="na">data-toggle=</span><span class="s">&quot;collapse&quot;</span> 
                  <span class="na">data-target=</span><span class="s">&quot;.navbar-collapse&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;sr-only&quot;</span><span class="nt">&gt;</span>Toggle navigation<span class="nt">&lt;/span&gt;</span>
            <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;icon-bar&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
            <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;icon-bar&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
            <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;icon-bar&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
          <span class="nt">&lt;/button&gt;</span>
          <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;navbar-brand&quot;</span> <span class="na">href=</span><span class="s">&quot;http://learnelixir.com/&quot;</span><span class="nt">&gt;</span>Hardware Zone<span class="nt">&lt;/a&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;collapse navbar-collapse&quot;</span><span class="nt">&gt;</span>
          <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;nav navbar-nav&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;&lt;%= HardwareZone.Router.hardwares_path(:new) %&gt;&quot;</span><span class="nt">&gt;</span>+ New Hardware<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
          <span class="nt">&lt;/ul&gt;</span>
        <span class="nt">&lt;/div&gt;</span><span class="c">&lt;!--/.nav-collapse --&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container-fluid&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;starter-template&#39;</span><span class="nt">&gt;</span>
        <span class="err">&lt;</span>%= @inner %&gt;
      <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span> <span class="c">&lt;!-- /container --&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div>
<ul>
<li>On line 38, we are making use of the Router helper to link to the New hardware page.</li>
<li>On line 45, the code <code>&lt;%= @inner %&gt;</code> is used to render the content that you create in order view. </li>
<li>On line 15 and 17, note that I have added in <code>jquery</code> library and borrow <code>jquery-ujs</code> from rails to support the delete function later on. </li>
</ul>

<p>Now, replace the content in file <code>priv/static/css/app.css</code> by</p>
<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nt">body</span> <span class="p">{</span>
  <span class="k">padding</span><span class="o">:</span> <span class="m">50px</span> <span class="m">15px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">div</span><span class="nc">.hardware-box</span> <span class="p">{</span>
  <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="m">#ccc</span><span class="p">;</span>
  <span class="k">padding</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
  <span class="k">height</span><span class="o">:</span> <span class="m">135px</span><span class="p">;</span>
  <span class="k">background</span><span class="o">:</span> <span class="m">#efefef</span><span class="p">;</span>
  <span class="k">margin-top</span><span class="o">:</span> <span class="m">30px</span><span class="p">;</span>
  <span class="k">cursor</span><span class="o">:</span> <span class="k">pointer</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">div</span><span class="nc">.hardware-box</span> <span class="nt">div</span><span class="nc">.title</span> <span class="p">{</span>
  <span class="k">font-weight</span><span class="o">:</span> <span class="k">bold</span><span class="p">;</span>
  <span class="k">font-size</span><span class="o">:</span> <span class="m">14px</span><span class="p">;</span>
  <span class="k">height</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
  <span class="k">overflow</span><span class="o">:</span> <span class="k">hidden</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">div</span><span class="nc">.hardware-box</span> <span class="nt">div</span><span class="nc">.manufacturer</span> <span class="p">{</span>
  <span class="k">color</span><span class="o">:</span> <span class="m">#999</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">div</span><span class="nc">.hardware-box</span> <span class="nt">div</span><span class="nc">.description</span> <span class="p">{</span>
  <span class="k">margin-top</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
  <span class="k">height</span><span class="o">:</span> <span class="m">60px</span><span class="p">;</span>
  <span class="k">overflow</span><span class="o">:</span> <span class="k">hidden</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">div</span><span class="nf">#error_explanation</span> <span class="p">{</span>
  <span class="k">background</span><span class="o">:</span> <span class="m">#BA5353</span><span class="p">;</span>
  <span class="k">color</span><span class="o">:</span> <span class="m">#fff</span><span class="p">;</span>
  <span class="k">padding</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
  <span class="k">margin-bottom</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
  <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">5px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">div</span><span class="nf">#error_explanation</span> <span class="nt">div</span><span class="nc">.error-title</span> <span class="p">{</span>
  <span class="k">padding</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="k">margin-bottom</span><span class="o">:</span> <span class="m">5px</span><span class="p">;</span>
  <span class="k">font-weight</span><span class="o">:</span> <span class="k">bold</span><span class="p">;</span>
  <span class="k">margin-left</span><span class="o">:</span> <span class="m">-10px</span><span class="p">;</span>
  <span class="k">margin-top</span><span class="o">:</span> <span class="m">-10px</span><span class="p">;</span>
  <span class="k">margin-right</span><span class="o">:</span> <span class="m">-10px</span><span class="p">;</span>
  <span class="k">padding</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
  <span class="k">background</span><span class="o">:</span> <span class="m">#AD2020</span><span class="p">;</span>
  <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">5px</span> <span class="m">5px</span> <span class="m">0</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">div</span><span class="nf">#error_explanation</span> <span class="nt">ul</span> <span class="p">{</span>
  <span class="k">list-style-type</span><span class="o">:</span> <span class="k">decimal</span><span class="p">;</span>
  <span class="k">padding-left</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
  <span class="k">margin-bottom</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>Now, we are ready. It&#39;s time for us to create 7 actions. Let&#39;s start with index action&#8230;</p>

<h3>1 - Index action</h3>

<p>Start by editing <code>hardwares_controller</code>:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/controller/hardwares_controller.ex
</code></pre></div>
<p>and paste in the following <code>index</code> action</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">def</span> <span class="n">index</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="n">_params</span><span class="p">)</span> <span class="k">do</span>
  <span class="n">hardwares</span> <span class="p">=</span> <span class="nc">HardwareZone.Queries</span><span class="p">.</span><span class="n">all_hardwares</span>
  <span class="n">render</span> <span class="n">conn</span><span class="p">,</span> <span class="s2">&quot;index&quot;</span><span class="p">,</span> <span class="ss">hardwares</span><span class="p">:</span> <span class="n">hardwares</span>
<span class="k">end</span> 
</code></pre></div>
<p>In this <code>index</code> action, what we have done is querying all the hardwares from our database and render these structs objects inside <code>index</code> view using the <code>render</code> command. Since we do not have an <code>index</code> page at the moment, let&#39;s create one by first creating <code>hardware_view.ex</code> in <code>web/views</code> folder:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/views/hardwares_view.ex
</code></pre></div>
<p>with the following code:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">HardwareZone.HardwaresView</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">HardwareZone.Views</span>
<span class="k">end</span>
</code></pre></div>
<p>Then create the hardwares template folder:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mkdir -p web/templates/hardwares
</code></pre></div>
<p>Then create file <code>web/templates/hardwares/index.html.eex</code>:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/templates/hardwares/index.html.eex
</code></pre></div>
<p>paste in the following code</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
  <span class="err">&lt;</span>%= for hardware <span class="nt">&lt;-</span> <span class="err">@</span><span class="na">hardwares</span> <span class="na">do</span> <span class="err">%</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-xs-6 col-md-4&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;hardware-box&#39;</span> 
           <span class="na">data-url=</span><span class="s">&#39;&lt;%= hardwares_path(:show, hardware.id) %&gt;&#39;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;title&#39;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= hardware.name %&gt;<span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;manufacturer&#39;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= hardware.manufacturer %&gt;<span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;description&#39;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= hardware.description %&gt;<span class="nt">&lt;/div&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="err">&lt;</span>% end %&gt;

  <span class="nt">&lt;script </span><span class="na">language=</span><span class="s">&#39;javascript&#39;</span><span class="nt">&gt;</span>
    <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">).</span><span class="nx">delegate</span><span class="p">(</span><span class="s2">&quot;div.hardware-box&quot;</span><span class="p">,</span> <span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;data-url&quot;</span><span class="p">);</span>
      <span class="p">});</span>
    <span class="p">});</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div>
<p>It is a loop though all <code>@hardwares</code> object and render out the corresponing HTML. Note that you will need <code>&lt;%=</code> in <code>for</code> loop so that your content can be printed out correctly.</p>

<p>Now visit <a href="http://localhost:4000">http://localhost:4000</a>. What you can see will just be the navigation bar. This is because we do not have any hardwares in our database yet. Let&#39;s create a seeds file to add some initial hardwares. You will need to create file <code>seeds.ex</code> on the application root folder:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim seeds.ex
</code></pre></div>
<p>with the following code:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">hardwares</span> <span class="p">=</span> <span class="p">[</span> 
  <span class="p">%{</span>
    <span class="ss">name</span><span class="p">:</span> <span class="s2">&quot;Macbook Pro&quot;</span><span class="p">,</span> 
    <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Looks like new, in good condition, used for 1.5 years&quot;</span><span class="p">,</span> 
    <span class="ss">manufacturer</span><span class="p">:</span> <span class="s2">&quot;Apple&quot;</span><span class="p">,</span> 
    <span class="ss">sale_contact_number</span><span class="p">:</span> <span class="s2">&quot;912345678&quot;</span> 
  <span class="p">},</span> 
  <span class="p">%{</span>
    <span class="ss">name</span><span class="p">:</span> <span class="s2">&quot;Toshiba CB35-B3340 Chromebook 2&quot;</span><span class="p">,</span>
    <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;This is thinner and lighter than its predecessor. Used for 2 years&quot;</span><span class="p">,</span>
    <span class="ss">manufacturer</span><span class="p">:</span> <span class="s2">&quot;Toshiba&quot;</span><span class="p">,</span>
    <span class="ss">sale_contact_number</span><span class="p">:</span> <span class="s2">&quot;987654321&quot;</span>
  <span class="p">},</span>
  <span class="p">%{</span>
    <span class="ss">name</span><span class="p">:</span> <span class="s2">&quot;HP Chromebook 11 (Verizon LTE)&quot;</span><span class="p">,</span>
    <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;The design and construction of the laptop still looks good. Used for 1 year&quot;</span><span class="p">,</span>
    <span class="ss">manufacturer</span><span class="p">:</span> <span class="s2">&quot;HP&quot;</span><span class="p">,</span>
    <span class="ss">sale_contact_number</span><span class="p">:</span> <span class="s2">&quot;998765432&quot;</span>
  <span class="p">}</span>
<span class="p">]</span>

<span class="k">for</span> <span class="n">hardware</span> <span class="p">&lt;-</span> <span class="n">hardwares</span> <span class="k">do</span>
  <span class="n">new_hardware</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">merge</span><span class="p">(%</span><span class="nc">HardwareZone.Hardware</span><span class="p">{},</span> <span class="n">hardware</span><span class="p">)</span>
  <span class="nc">HardwareZone.Repo</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">new_hardware</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<p>Then run this seeds file from your terminal:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix run seeds.ex
</code></pre></div>
<p>Now refresh the page, you should already see some hardwares displayed on the index page. Let&#39;s move on to create a hardware.</p>

<h3>2 - New Action</h3>

<p>As usual, let&#39;s start by editing <code>hardwares_controller.ex</code>:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/controller/hardwares_controller.ex
</code></pre></div>
<p>Add in the following function: </p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">def</span> <span class="n">new</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="n">_params</span><span class="p">)</span> <span class="k">do</span>
  <span class="n">render</span> <span class="n">conn</span><span class="p">,</span> <span class="s2">&quot;new&quot;</span><span class="p">,</span> <span class="ss">hardware</span><span class="p">:</span> <span class="p">%</span><span class="nc">Hardware</span><span class="p">{}</span>
<span class="k">end</span> 
</code></pre></div>
<p>Next, create <code>new.html.eex</code> file:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/templates/hardwares/new.html.eex
</code></pre></div>
<p>with the following content:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;h1&gt;</span>New Hardware <span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;br/&gt;</span>
<span class="err">&lt;</span>%= render &quot;form.html&quot;, hardware: @hardware, errors: @errors %&gt;
</code></pre></div>
<p>As we are trying to render a form view from this view, we will need to create a view named <code>web/templates/hardwares/form.html.eex</code>. This is different from Rails, where you will need to create this partial view file name with under score (<code>_</code>). The partial view file does not to be suffixed with underscore (<code>_</code>).</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/templates/hardwares/form.html.eex
</code></pre></div>
<p>and use following code content:</p>

<p>Note that line 1 to 13 are for errors displaying. In addition, in this form&#39;s action, we are actually checking if the hardware is a new record by looking into its id. If it is, we will just render the create path. otherwise, the update path will be used. Anoter note is from line 21 - 23 where we need to put extra hidden field with <code>PATCH</code> method so that it can be sent over the HTTP request. For <code>PATCH</code>, <code>PUT</code> and <code>DELETE</code> methods, they cannot be specified inside a HTML form method attribute.</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="err">&lt;</span>%= if @errors do %&gt;
  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&#39;error_explanation&#39;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;error-title&#39;</span><span class="nt">&gt;</span>
      This form contains <span class="err">&lt;</span>%= errors_count = Enum.count(@errors) %&gt; 
      <span class="err">&lt;</span>%= if errors_count == 1, do: &quot;error&quot;, else: &quot;errors&quot; %&gt;:
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;ul&gt;</span>
      <span class="err">&lt;</span>%= for {key, value} <span class="nt">&lt;-</span> <span class="err">@</span><span class="na">errors</span> <span class="na">do</span> <span class="err">%</span><span class="nt">&gt;</span>
        <span class="nt">&lt;li&gt;</span><span class="err">&lt;</span>%= String.capitalize(Atom.to_string(key)) %&gt; <span class="err">&lt;</span>%= value %&gt;<span class="nt">&lt;/li&gt;</span> 
      <span class="err">&lt;</span>% end %&gt;
    <span class="nt">&lt;/ul&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="err">&lt;</span>% end %&gt;
<span class="nt">&lt;form</span> 
  <span class="na">action=</span><span class="s">&quot;&lt;%= if @hardware.id, </span>
<span class="s">     do: hardwares_path(:update, @hardware.id), </span>
<span class="s">     else: hardwares_path(:create) %&gt;&quot;</span> 
  <span class="na">method=</span><span class="s">&quot;post&quot;</span> 
  <span class="na">enctype=</span><span class="s">&quot;multipart/form-data&quot;</span><span class="nt">&gt;</span>

  <span class="err">&lt;</span>%= if @hardware.id do %&gt; 
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">name=</span><span class="s">&quot;_method&quot;</span> <span class="na">value=</span><span class="s">&quot;PATCH&quot;</span> <span class="nt">/&gt;</span>
  <span class="err">&lt;</span>% end %&gt;

  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;form-group&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;hardware[name]&quot;</span><span class="nt">&gt;</span>Name<span class="nt">&lt;/label&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;hardware[name]&quot;</span> <span class="na">class=</span><span class="s">&quot;form-control&quot;</span> <span class="na">value=</span><span class="s">&#39;&lt;%= @hardware.name %&gt;&#39;</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;form-group&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;hardware[description]&quot;</span><span class="nt">&gt;</span>Description<span class="nt">&lt;/label&gt;</span>
    <span class="nt">&lt;textarea</span> 
      <span class="na">name=</span><span class="s">&quot;hardware[description]&quot;</span> 
      <span class="na">class=</span><span class="s">&quot;form-control&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= @hardware.description %&gt;<span class="nt">&lt;/textarea&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;form-group&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;hardware[manufacturer]&quot;</span><span class="nt">&gt;</span>Manufacturer<span class="nt">&lt;/label&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> 
           <span class="na">name=</span><span class="s">&quot;hardware[manufacturer]&quot;</span> 
           <span class="na">class=</span><span class="s">&quot;form-control&quot;</span> 
           <span class="na">value=</span><span class="s">&#39;&lt;%= @hardware.manufacturer %&gt;&#39;</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;form-group&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;hardware[sale_contact_number]&quot;</span><span class="nt">&gt;</span>Sale Contact Numbner<span class="nt">&lt;/label&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> 
           <span class="na">name=</span><span class="s">&quot;hardware[sale_contact_number]&quot;</span> 
           <span class="na">class=</span><span class="s">&quot;form-control&quot;</span> 
           <span class="na">value=</span><span class="s">&#39;&lt;%= @hardware.sale_contact_number %&gt;&#39;</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/div&gt;</span>

  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">class=</span><span class="s">&quot;btn btn-primary&quot;</span><span class="nt">&gt;</span>Save<span class="nt">&lt;/button&gt;</span>
  <span class="ni">&amp;nbsp;&amp;nbsp;</span>or
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&#39;&lt;%= HardwareZone.Router.hardwares_path(:index) %&gt;&#39;</span><span class="nt">&gt;</span>Cancel<span class="nt">&lt;/a&gt;</span>
<span class="nt">&lt;/form&gt;</span>
<span class="nt">&lt;br/&gt;</span>
</code></pre></div>
<p>Now if you visit <a href="http://localhost:4000/hardwares/new">http://localhost:4000/hardwares/new</a>, you should see the form. In order to create a hardware, let&#39;s move to create a <code>create</code> action to save this form.</p>

<h4>3 - Create Action</h4>

<p>Let&#39;s start with controller <code>hardwares_controller.ex</code>:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/controller/hardwares_controller.ex
</code></pre></div>
<p>and add in the following functions:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">def</span> <span class="n">create</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="p">%{</span><span class="s2">&quot;hardware&quot;</span> <span class="p">=&gt;</span> <span class="n">params</span><span class="p">})</span> <span class="k">do</span>
  <span class="n">hardware</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">merge</span><span class="p">(%</span><span class="nc">Hardware</span><span class="p">{},</span> <span class="n">atomize_keys</span><span class="p">(</span><span class="n">params</span><span class="p">))</span>
  <span class="k">case</span> <span class="nc">Hardware</span><span class="p">.</span><span class="n">validate</span><span class="p">(</span><span class="n">hardware</span><span class="p">)</span> <span class="k">do</span>
    <span class="p">[]</span> <span class="p">-&gt;</span>
      <span class="n">hardware</span> <span class="p">=</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">hardware</span><span class="p">)</span>
      <span class="n">redirect</span> <span class="n">conn</span><span class="p">,</span> <span class="n">hardwares_path</span><span class="p">(</span><span class="ss">:show</span><span class="p">,</span> <span class="n">hardware</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
    <span class="n">errors</span> <span class="p">-&gt;</span>
      <span class="n">render</span> <span class="n">conn</span><span class="p">,</span> <span class="s2">&quot;new&quot;</span><span class="p">,</span> <span class="ss">hardware</span><span class="p">:</span> <span class="n">hardware</span><span class="p">,</span> <span class="ss">errors</span><span class="p">:</span> <span class="n">errors</span>
  <span class="k">end</span> 
<span class="k">end</span>

<span class="kd">defp</span> <span class="n">atomize_keys</span><span class="p">(</span><span class="n">struct</span><span class="p">)</span> <span class="k">do</span>
  <span class="nc">Enum</span><span class="p">.</span><span class="n">reduce</span> <span class="n">struct</span><span class="p">,</span> <span class="p">%{},</span> <span class="k">fn</span><span class="p">({</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">},</span> <span class="n">map</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nc">Map</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">map</span><span class="p">,</span> <span class="nc">String</span><span class="p">.</span><span class="n">to_atom</span><span class="p">(</span><span class="n">k</span><span class="p">),</span> <span class="n">v</span><span class="p">)</span> <span class="k">end</span> 
<span class="k">end</span> 
</code></pre></div>
<p>We have defined another helper private function <code>atomize_keys</code> (<code>defp</code> stands for private definition) which is responsible for converting a struct with string key to a struct with atom key. We then merge the atomized params with the empty <code>Hardware</code> struct, validate the Hardware at line 3, insert at line 5 before redirect the page to <code>show</code> action. If the hardware has validation errors, it will render back the <code>new</code> action at line 8. Let&#39;s move on to show action before we can try out the create function.</p>

<h4>4 - Show Action</h4>

<p>Again, let add the following <code>show</code> action in controller <code>web/controller/hardware_controller.ex</code></p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/controller/hardware_controller.ex
</code></pre></div>
<p>The <code>show</code> action code is as below:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">def</span> <span class="n">show</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="p">%{</span><span class="s2">&quot;id&quot;</span> <span class="p">=&gt;</span> <span class="n">id</span><span class="p">})</span> <span class="k">do</span>
  <span class="k">case</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nc">Hardware</span><span class="p">,</span> <span class="nc">String</span><span class="p">.</span><span class="n">to_integer</span><span class="p">(</span><span class="n">id</span><span class="p">))</span> <span class="k">do</span>
    <span class="n">hardware</span> <span class="ow">when</span> <span class="n">is_map</span><span class="p">(</span><span class="n">hardware</span><span class="p">)</span> <span class="p">-&gt;</span>
      <span class="n">render</span> <span class="n">conn</span><span class="p">,</span> <span class="s2">&quot;show&quot;</span><span class="p">,</span> <span class="ss">hardware</span><span class="p">:</span> <span class="n">hardware</span>
    <span class="bp">_</span> <span class="p">-&gt;</span>  
      <span class="n">redirect</span> <span class="n">conn</span><span class="p">,</span> <span class="n">hardwares_path</span><span class="p">(</span><span class="ss">:index</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<p>The code above starts by checking for the existence of the hardware with given parameter name <code>id</code>. By using the <code>case</code> condition on line 2 and the guard condition <code>is_map(hardware)</code> on line 3, it is guaranteed that the hardware does exist to show on line 4. Otherwise, it will redirect to the hardware index page.</p>

<p>Because we are rendering a <code>show</code> view on line 4, let&#39;s add <code>show</code> view by creating file <code>web/templates/hardwares/show.html.eex</code></p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/templates/hardwares/show.html.eex
</code></pre></div>
<p>with the following code content</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;br/&gt;</span>
<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&#39;&lt;%= hardwares_path(:index) %&gt;&#39;</span><span class="nt">&gt;</span><span class="ni">&amp;larr;</span> List of Hardwares<span class="nt">&lt;/a&gt;</span>

<span class="nt">&lt;h1&gt;</span><span class="err">&lt;</span>%= @hardware.name %&gt;<span class="nt">&lt;/h1&gt;</span>

<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&#39;manufacturer&#39;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= @hardware.manufacturer %&gt;<span class="nt">&lt;/span&gt;</span>

<span class="nt">&lt;br/&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;description&#39;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= @hardware.description %&gt;<span class="nt">&lt;/div&gt;</span>

<span class="err">&lt;</span>%= if @hardware.sale_contact_number do %&gt;
  Want to buy, contact me at: <span class="err">&lt;</span>%= @hardware.sale_contact_number %&gt;
<span class="err">&lt;</span>% end %&gt;
<span class="nt">&lt;br/&gt;&lt;br/&gt;</span>

<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&#39;&lt;%= hardwares_path(:edit, @hardware.id) %&gt;&#39;</span> 
   <span class="na">class=</span><span class="s">&#39;btn btn-primary&#39;</span><span class="nt">&gt;</span>Edit<span class="nt">&lt;/a&gt;</span> 
<span class="ni">&amp;nbsp;</span> 
<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&#39;&lt;%= hardwares_path(:destroy, @hardware.id) %&gt;&#39;</span> 
   <span class="na">class=</span><span class="s">&#39;btn btn-danger&#39;</span>
   <span class="na">data-confirm=</span><span class="s">&quot;Are you sure that you want to delete this hardware?&quot;</span> 
   <span class="na">data-method=</span><span class="s">&quot;DELETE&quot;</span><span class="nt">&gt;</span>Remove<span class="nt">&lt;/a&gt;</span>
</code></pre></div>
<p>Take note that line 19 to 22 are for the delete button with <code>data-confirm</code> and <code>data-method</code> attribute. If you click on it, it will trigger the confirm window and submit with <code>DELETE</code> HTTP method to that link URL. This can be achieved thank to the <code>jquery-ujs</code> that we put inside <code>head</code> tag earlier.</p>

<p>Now let&#39;s move on to <code>edit</code> action.</p>

<h4>5 - Edit Action</h4>

<p>Start with controller code <code>web/controllers/hardwares_controller.ex</code></p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/controllers/hardwares_controller.ex
</code></pre></div>
<p>and add in <code>edit</code> action</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">def</span> <span class="n">edit</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="p">%{</span><span class="s2">&quot;id&quot;</span> <span class="p">=&gt;</span> <span class="n">id</span><span class="p">})</span> <span class="k">do</span>
  <span class="k">case</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nc">Hardware</span><span class="p">,</span> <span class="nc">String</span><span class="p">.</span><span class="n">to_integer</span><span class="p">(</span><span class="n">id</span><span class="p">))</span> <span class="k">do</span>
    <span class="n">hardware</span> <span class="ow">when</span> <span class="n">is_map</span><span class="p">(</span><span class="n">hardware</span><span class="p">)</span> <span class="p">-&gt;</span>
      <span class="n">render</span> <span class="n">conn</span><span class="p">,</span> <span class="s2">&quot;edit&quot;</span><span class="p">,</span> <span class="ss">hardware</span><span class="p">:</span> <span class="n">hardware</span>
    <span class="bp">_</span> <span class="p">-&gt;</span>
      <span class="n">redirect</span> <span class="n">conn</span><span class="p">,</span> <span class="n">hardwares_path</span><span class="p">(</span><span class="ss">:index</span><span class="p">)</span>
  <span class="k">end</span> 
<span class="k">end</span> 
</code></pre></div>
<p>This is quite similar to <code>show</code> action whereby a query for the Hardware using parameter id happens on line 2 and after that a rendering <code>edit</code> view if there is such a hardware. Otherwise, it redirects to index action. Now, let&#39;s create <code>edit</code> view for this action:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/templates/hardwares/edit.html.eex
</code></pre></div>
<p>and paste in the code below:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;h2&gt;</span>Edit Hardware<span class="nt">&lt;/h2&gt;</span>
<span class="nt">&lt;br/&gt;</span>
<span class="err">&lt;</span>%= render &quot;form.html&quot;, hardware: @hardware, errors: @errors %&gt;
</code></pre></div>
<p>As you notice, the same form view except the header can be employed for the <code>edit</code> action by using <code>render</code>. Now, to make this <code>edit</code> form be able to save the data, let&#39;s create <code>update</code> action. </p>

<h4>6 - Update Action</h4>

<p>First, edit <code>web/controllers/hardwares_controller.ex</code>:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/controllers/hardwares_controller.ex
</code></pre></div>
<p>and add in the <code>update</code> function as below:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">def</span> <span class="n">update</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="p">%{</span><span class="s2">&quot;id&quot;</span> <span class="p">=&gt;</span> <span class="n">id</span><span class="p">,</span> <span class="s2">&quot;hardware&quot;</span> <span class="p">=&gt;</span> <span class="n">params</span><span class="p">})</span> <span class="k">do</span>
  <span class="k">case</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nc">Hardware</span><span class="p">,</span> <span class="nc">String</span><span class="p">.</span><span class="n">to_integer</span><span class="p">(</span><span class="n">id</span><span class="p">))</span> <span class="k">do</span>
    <span class="n">hardware</span> <span class="ow">when</span> <span class="n">is_map</span><span class="p">(</span><span class="n">hardware</span><span class="p">)</span> <span class="p">-&gt;</span>
      <span class="n">hardware</span> <span class="p">=</span> <span class="nc">Map</span><span class="p">.</span><span class="n">merge</span><span class="p">(</span><span class="n">hardware</span><span class="p">,</span> <span class="n">atomize_keys</span><span class="p">(</span><span class="n">params</span><span class="p">))</span>
      <span class="k">case</span> <span class="nc">Hardware</span><span class="p">.</span><span class="n">validate</span><span class="p">(</span><span class="n">hardware</span><span class="p">)</span> <span class="k">do</span>
        <span class="p">[]</span> <span class="p">-&gt;</span>  
          <span class="nc">Repo</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">hardware</span><span class="p">)</span>
          <span class="n">redirect</span> <span class="n">conn</span><span class="p">,</span> <span class="n">hardwares_path</span><span class="p">(</span><span class="ss">:show</span><span class="p">,</span> <span class="n">hardware</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
        <span class="n">errors</span> <span class="p">-&gt;</span>  
          <span class="n">render</span> <span class="n">conn</span><span class="p">,</span> <span class="s2">&quot;edit&quot;</span><span class="p">,</span> <span class="ss">hardware</span><span class="p">:</span> <span class="n">hardware</span><span class="p">,</span> <span class="ss">errors</span><span class="p">:</span> <span class="n">errors</span>
      <span class="k">end</span> 
    <span class="bp">_</span> <span class="p">-&gt;</span>
      <span class="n">redirect</span> <span class="n">conn</span><span class="p">,</span> <span class="n">hardwares_path</span><span class="p">(</span><span class="ss">:index</span><span class="p">)</span>
  <span class="k">end</span> 
<span class="k">end</span>
</code></pre></div>
<p>Since there are a few things happening here, let&#39;s go through this piece of code line by line so that we can understand more:</p>

<ul>
<li>On line 1, as usual it is the function with the second parameters which are the parameters sent from front end. We will need to split these parameters to <code>id</code> and the <code>hardware</code> struct.</li>
<li>On line 2, we will then try to get the corresponding database record. Note that you will need to convert <code>id</code> to integer before you can use <code>Repo.get</code>.</li>
<li>On line 3, the <code>case</code> code will only go to this branch if the result of <code>Repo.get</code> is a map, which implies that there is such record inside our database.</li>
<li>On line 4, we then merge the current database record with the keys atomized <code>hardware</code> data sent from front end.</li>
<li>On line 5, validation kicks in to validate the updated <code>hardware</code></li>
<li>On line 6, the <code>case</code> code will only go to this branch if no errors are detected</li>
<li>On line 7, trigger the actual update using <code>Repo.update</code></li>
<li>On line 8, after update, it redirects back to show the hardware.</li>
<li>On line 9, the <code>case</code> code will go to this branch if errors occur during validation</li>
<li>On line 10, because of the error, we will re-render <code>edit</code> action with the attached <code>errors</code> </li>
</ul>

<p>That&#39;s it for update action. Now let&#39;s move on to destroy or delete action</p>

<h4>7 - Destroy action</h4>

<p>We only need to add in destroy function inside <code>web/controllers/hardwares_controller.ex</code></p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim web/controllers/hardwares_controller.ex
</code></pre></div>
<p>and add this the destroy action as below:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">def</span> <span class="n">destroy</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="p">%{</span><span class="s2">&quot;id&quot;</span> <span class="p">=&gt;</span> <span class="n">id</span><span class="p">})</span> <span class="k">do</span>
  <span class="k">case</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nc">Hardware</span><span class="p">,</span> <span class="nc">String</span><span class="p">.</span><span class="n">to_integer</span><span class="p">(</span><span class="n">id</span><span class="p">))</span> <span class="k">do</span>
    <span class="n">hardware</span> <span class="ow">when</span> <span class="n">is_map</span><span class="p">(</span><span class="n">hardware</span><span class="p">)</span> <span class="p">-&gt;</span>
      <span class="nc">Repo</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="n">hardware</span><span class="p">)</span>
      <span class="n">redirect</span> <span class="n">conn</span><span class="p">,</span> <span class="n">hardwares_path</span><span class="p">(</span><span class="ss">:index</span><span class="p">)</span>
    <span class="bp">_</span> <span class="p">-&gt;</span>
      <span class="n">redirect</span> <span class="n">conn</span><span class="p">,</span> <span class="n">hardwares_path</span><span class="p">(</span><span class="ss">:index</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<h3>Wrap Up</h3>

<p>I hope you have enjoyed building a 7 action Phoenix app with Elixir. If you want to extend this basic app, it will play as a good exercise for you to understand more about Elixir and Phoenix :-).</p>
]]></content>
  </entry>
  
</feed>

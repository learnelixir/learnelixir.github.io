<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ecto | Learn Elixir Language]]></title>
  <link href="http://learnelixir.com/blog/categories/ecto/atom.xml" rel="self"/>
  <link href="http://learnelixir.com/"/>
  <updated>2014-11-26T21:18:49+08:00</updated>
  <id>http://learnelixir.com/</id>
  <author>
    <name><![CDATA[Learn Elixir]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ecto vs Active Record]]></title>
    <link href="http://learnelixir.com/blog/2014/10/11/ecto-vs-active-record/"/>
    <updated>2014-10-11T21:37:22+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/11/ecto-vs-active-record</id>
    <content type="html"><![CDATA[<p>This post is about comparing the feature and performance between Elixir&#39;s Ecto library - database wrapper and languge integrated query for Elixir and Ruby on Rails Active Record.</p>

<!-- more -->

<h3>Round 1: Database Migration</h3>

<h4>Active Record</h4>

<p>In Ruby on Rails Active Record, we can generate a migration for a model by following these steps:</p>

<h5><em>Step 1</em>: Generate model file and migration file</h5>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>rails g model book title:string description:text author:string publisher:string
</code></pre></div>
<p>And the content of the migration file is as following</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">CreateBooks</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
  <span class="k">def</span> <span class="nf">change</span>
    <span class="n">create_table</span> <span class="ss">:books</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:name</span>
      <span class="n">t</span><span class="o">.</span><span class="n">text</span> <span class="ss">:description</span>
      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:author</span>
      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:publisher</span>

      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<h5><em>Step 2</em>: Create the database</h5>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">bundle <span class="nb">exec </span>rake db:create
</code></pre></div>
<h5><em>Step 3</em>: Run the migration</h5>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>bundle <span class="nb">exec </span>rake db:migrate
</code></pre></div>
<p>That&#39;s all for Active Record</p>

<h4>Ecto</h4>

<p>Assuming that you have already put in <code>ecto</code> and <code>postgrex</code> dependencies and already run <code>mix deps.get</code>, here are the steps:</p>

<h5><em>Step 1</em>: Create Repo file by manually adding web/models/repo.ex file witht the following content</h5>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">BookStoreElixir.Repo</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Ecto.Repo</span><span class="p">,</span> <span class="ss">adapter</span><span class="p">:</span> <span class="nc">Ecto.Adapters.Postgres</span>

  <span class="kd">def</span> <span class="n">conf</span> <span class="k">do</span>
    <span class="n">parse_url</span> <span class="s2">&quot;ecto://postgresuser:password@localhost/book_store_elixir&quot;</span>
  <span class="k">end</span>

  <span class="kd">def</span> <span class="n">priv</span> <span class="k">do</span>
    <span class="n">app_dir</span><span class="p">(</span><span class="ss">:book_store_elixir</span><span class="p">,</span> <span class="s2">&quot;priv/repo&quot;</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<h5><em>Step 2</em>: Create the Postgres Database</h5>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>createdb book_store_elixir --encoding<span class="o">=</span><span class="s1">&#39;utf-8&#39;</span> --locale<span class="o">=</span>en_US.UTF-8 --template<span class="o">=</span>template0
</code></pre></div>
<h5><em>Step 3</em>: Create model file <code>web/models/book.ex</code> with the following code:</h5>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">BookStoreElixir.Book</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Ecto.Model</span>

  <span class="n">schema</span> <span class="s2">&quot;books&quot;</span> <span class="k">do</span>
    <span class="n">field</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:string</span>
    <span class="n">field</span> <span class="ss">:description</span><span class="p">,</span> <span class="ss">:string</span>
    <span class="n">field</span> <span class="ss">:author</span><span class="p">,</span> <span class="ss">:string</span>
    <span class="n">field</span> <span class="ss">:publisher</span><span class="p">,</span> <span class="ss">:string</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<h5><em>Step 4</em>: Generate a migration file from terminal</h5>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix ecto.gen.migration BookStoreElixir.Repo create_book
</code></pre></div>
<h5><em>Step 5</em>: Edit the newly generated migration file</h5>

<p>There is a need a type the SQL to create the table here:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim priv/repo/migrations/20141011143244_create_book.exs
</code></pre></div><div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">BookStoreElixir.Repo.Migrations.CreateBook</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Ecto.Migration</span>

  <span class="kd">def</span> <span class="n">up</span> <span class="k">do</span>
    <span class="s2">&quot;CREATE TABLE books(id serial primary key, title varchar(125), </span>
<span class="s2">                  description text, author varchar(255), publisher varchar(255))&quot;</span>
  <span class="k">end</span>

  <span class="kd">def</span> <span class="n">down</span> <span class="k">do</span>
    <span class="s2">&quot;DROP TABLE books&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<h5><em>Step 6</em>: Run the migration file</h5>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix ecto.migrate BookStoreElixir.Repo
</code></pre></div>
<h5><em>Step 7</em>: Add <code>BookStoreElixir.Repo</code> as a worker in line 11 of <code>lib/book_store_elixir.ex</code></h5>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">BookStoreElixir</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Application</span>

  <span class="c1"># See http://elixir-lang.org/docs/stable/elixir/Application.html</span>
  <span class="c1"># for more information on OTP Applications</span>
  <span class="kd">def</span> <span class="n">start</span><span class="p">(</span><span class="n">_type</span><span class="p">,</span> <span class="n">_args</span><span class="p">)</span> <span class="k">do</span>
    <span class="kn">import</span> <span class="nc">Supervisor.Spec</span><span class="p">,</span> <span class="ss">warn</span><span class="p">:</span> <span class="no">false</span>

    <span class="n">children</span> <span class="p">=</span> <span class="p">[</span>
      <span class="c1"># Define workers and child supervisors to be supervised</span>
      <span class="n">worker</span><span class="p">(</span><span class="nc">BookStoreElixir.Repo</span><span class="p">,</span> <span class="p">[])</span>
    <span class="p">]</span>

    <span class="n">opts</span> <span class="p">=</span> <span class="p">[</span><span class="ss">strategy</span><span class="p">:</span> <span class="ss">:one_for_one</span><span class="p">,</span> <span class="ss">name</span><span class="p">:</span> <span class="nc">BookStoreElixir.Supervisor</span><span class="p">]</span>
    <span class="nc">Supervisor</span><span class="p">.</span><span class="n">start_link</span><span class="p">(</span><span class="n">children</span><span class="p">,</span> <span class="n">opts</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<h5>Conclusion for Database Migration:</h5>

<p>Active Record wins as there are fewer number of steps (3 steps in Active Record vs 7 steps in Ecto). Ecto will need to have more mix tasks in order to be more on par with Active Record.</p>

<h3>Round 2: Database CRUD (Create, Read, Update, Delete) operations Syntax</h3>

<h4>1 - Create</h4>

<h5>Active Record</h5>

<p>To create a new record in Active Record, we will use <code>create</code> command on <code>Book</code> model 
<code>ruby
irb&gt; Book.create({title: &quot;Programming Ruby 1.9 &amp; 2.0&quot;, \
          author: &quot;Dave Thomas, with Chad Fowler and Andy Hunt&quot;, \
          publisher: &quot;The Pragmatic Bokshelf&quot;, \
          description: &quot;Ruby is the fastest growing and most exciting dynamic language out there. \
                        If you need to get working programs delivered fast, \
                        you should add Ruby to your toolbox.&quot;}) 
</code></p>

<h5>Ecto</h5>

<p>To create a new record in Ecto, we will use <code>insert</code> command on Book <code>Repo</code></p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Repo</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Book</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="nc">BookStoreElixir.Repo</span><span class="p">.</span><span class="n">insert</span><span class="p">({</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Ruby 1.9 &amp; 2.0&quot;</span><span class="p">,</span> <span class="err">\</span>
          <span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas, with Chad Fowler and Andy Hunt&quot;</span><span class="p">,</span> <span class="err">\</span>
          <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bokshelf&quot;</span><span class="p">,</span> 
          <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Ruby is the fastest growing and most exciting dynamic language out there. </span><span class="err">\</span><span class="s2"></span>
<span class="s2">                        If you need to get working programs delivered fast, </span><span class="err">\</span><span class="s2"></span>
<span class="s2">                        you should add Ruby to your toolbox.&quot;</span><span class="p">})</span>
</code></pre></div>
<p>Syntax wise, they are quite similar. Although Active Record code seems to be a bit neater but it can be considered a draw for creation syntax.</p>

<h4>2 - Read</h4>

<h5>Active Record</h5>

<p>In Active Record, you can perform quite an entensive list of queries by using <code>where</code>, <code>order</code>, <code>limit</code>, <code>offset</code>, <code>group</code>, <code>join</code>, <code>having</code>, <code>select</code>, <code>pluck</code>, <code>includes</code>. For instance</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">irb</span><span class="o">&gt;</span> <span class="no">Book</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;title LIKE ?&quot;</span><span class="p">,</span> <span class="s2">&quot;%Programming%&quot;</span><span class="p">)</span> <span class="p">\</span>
         <span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="ss">:desc</span><span class="p">)</span> <span class="p">\</span>
         <span class="o">.</span><span class="n">limit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">\</span>
         <span class="o">.</span><span class="n">offset</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">\</span>
         <span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="s2">&quot;id&quot;</span><span class="p">)</span> <span class="p">\</span>
         <span class="o">.</span><span class="n">having</span><span class="p">(</span><span class="s2">&quot;books.id &gt;= 1&quot;</span><span class="p">)</span> <span class="p">\</span>
         <span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span> <span class="p">\</span>
         <span class="o">.</span><span class="n">pluck</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span>
</code></pre></div>
<p>Pretty amazing that Active Record can do chaining in combine into 1 single query. </p>

<h5>Ecto</h5>

<p>There are 2 types of writing Query in Ecto</p>

<ul>
<li><em>First Way</em>: Using query syntax provide by Ecto</li>
</ul>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Book</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Repo</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="kn">import</span> <span class="nc">Ecto.Query</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">from</span> <span class="n">book</span> <span class="ow">in</span> <span class="nc">BookStoreElixir.Book</span><span class="p">,</span> <span class="ss">select</span><span class="p">:</span> <span class="n">book</span><span class="p">.</span><span class="n">id</span><span class="p">,</span> <span class="err">\</span>
                                        <span class="ss">where</span><span class="p">:</span> <span class="n">like</span><span class="p">(</span><span class="n">book</span><span class="p">.</span><span class="n">title</span><span class="p">,</span> <span class="s2">&quot;%Programming%&quot;</span><span class="p">),</span> <span class="err">\</span>
                                        <span class="ss">order_by</span><span class="p">:</span> <span class="p">[</span><span class="ss">desc</span><span class="p">:</span> <span class="n">book</span><span class="p">.</span><span class="n">id</span><span class="p">],</span> <span class="err">\</span>
                                        <span class="ss">limit</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="err">\</span>
                                        <span class="ss">offset</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="err">\</span>
                                        <span class="ss">group_by</span><span class="p">:</span> <span class="n">book</span><span class="p">.</span><span class="n">id</span><span class="p">,</span> <span class="err">\</span>
                                        <span class="ss">having</span><span class="p">:</span> <span class="n">book</span><span class="p">.</span><span class="n">id</span> <span class="o">&gt;=</span> <span class="mi">1</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="n">query</span><span class="p">)</span> 
</code></pre></div>
<ul>
<li><em>Second Way</em>: Using chaining by utilising Elixir Pipe will make query just like Active Record:</li>
</ul>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Book</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Repo</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="kn">import</span> <span class="nc">Ecto.Query</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">query</span> <span class="p">=</span> <span class="nc">Book</span> <span class="o">|&gt;</span> <span class="n">select</span><span class="p">([</span><span class="n">book</span><span class="p">],</span> <span class="n">book</span><span class="p">.</span><span class="n">id</span><span class="p">)</span> <span class="err">\</span>
                  <span class="o">|&gt;</span> <span class="n">where</span><span class="p">([</span><span class="n">book</span><span class="p">],</span> <span class="n">like</span><span class="p">(</span><span class="n">book</span><span class="p">.</span><span class="n">title</span><span class="p">,</span> <span class="s2">&quot;%Programming%&quot;</span><span class="p">))</span> <span class="err">\</span>
                  <span class="o">|&gt;</span> <span class="n">order_by</span><span class="p">([</span><span class="n">book</span><span class="p">],</span> <span class="ss">desc</span><span class="p">:</span> <span class="n">book</span><span class="p">.</span><span class="n">id</span><span class="p">)</span> <span class="err">\</span>
                  <span class="o">|&gt;</span> <span class="n">limit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="err">\</span>
                  <span class="o">|&gt;</span> <span class="n">offset</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="err">\</span>
                  <span class="o">|&gt;</span> <span class="n">group_by</span><span class="p">([</span><span class="n">book</span><span class="p">],</span> <span class="n">book</span><span class="p">.</span><span class="n">id</span><span class="p">)</span> <span class="err">\</span>
                  <span class="o">|&gt;</span> <span class="n">having</span><span class="p">([</span><span class="n">book</span><span class="p">],</span> <span class="n">book</span><span class="p">.</span><span class="n">id</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</code></pre></div>
<p>Syntax wise, both Ecto and Active Record have shown that they are quite expressive in showing the data transformation through a series of query functions. However, Active Record syntax is still considered better in this Round as it is showing an easier approach. Although, the second way of query that we use for Elixir Ecto is pretty closed to Active Record syntax, it still exhibits a more wordy syntax than Active Record. Albeit, Elixir Ecto is using a nice approach by letting programmer to have access to a &quot;so called&quot; object instance in the query - <code>having[book, book.id &gt;= 1)</code> vs <code>&quot;having(&quot;books.id &gt;= 1&quot;)</code></p>

<h4>3 - Update</h4>

<h4>Active Record</h4>

<p>To update a record, we will use <code>update_attributes</code> on <code>Book</code> instance </p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">irb</span><span class="o">&gt;</span> <span class="n">book</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">first</span>
<span class="n">irb</span><span class="o">&gt;</span> <span class="n">book</span><span class="o">.</span><span class="n">update_attributes</span><span class="p">({</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Ruby9 &amp;ss 2.0 (4th edition)&quot;</span><span class="p">})</span>
</code></pre></div>
<h4>Ecto</h4>

<p>To update a record, we will use `<code>update</code> on <code>BookStoreElixir.Repo</code></p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Book</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Repo</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">book</span> <span class="p">=</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">one</span><span class="p">(</span><span class="nc">Book</span><span class="p">)</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">update</span><span class="p">(%{</span><span class="n">book</span> <span class="p">|</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Ruby9 &amp;ss 2.0 (4th edition)&quot;</span><span class="p">})</span> 
</code></pre></div>
<p>Both Ecto and Active Record have exhibited almost the same level of code when updating a record. Hence, it is a draw.</p>

<h4>4 - Delete</h4>

<h4>Active Record</h4>

<p>To delete a record, we will use <code>destroy</code> on a <code>Book</code> instance</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">irb</span><span class="o">&gt;</span> <span class="n">book</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">first</span>
<span class="n">irb</span><span class="o">&gt;</span> <span class="n">book</span><span class="o">.</span><span class="n">destroy</span>
</code></pre></div>
<h4>Ecto</h4>

<p>To delete a record, we will use <code>delete</code> on <code>BookStoreElixir.repo</code></p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Book</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStoreElixir.Repo</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">book</span> <span class="p">=</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">one</span><span class="p">(</span><span class="nc">Book</span><span class="p">)</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="n">book</span><span class="p">)</span>
</code></pre></div>
<p>Both Ecto and Active Record have exhibited almost the same level of code when delete a record. Hence, it is a draw.</p>

<p>So for this Round 2, Active Record is the <strong>winner</strong> (1 vs 0).</p>

<h3>Round 3: Speed of Creation</h3>

<p>Note that this is tested on my local machine. The result here is just for your reference, and should not be treated as an official benchmark.
I am using Ruby 2.1.2, running on Rails 4.1.4 and Elixir 1.0.0. Both Rails and Elixir application are running with Postgres 9.3.5. For Rails, environment in Rails 4.1.4 has been preloaded with Spring, hence there is a not a need for system to spend time to load the Rails environment. Further more, the Rails code was run with the log mode the same as on production - i.e. no query log was printed out.</p>

<h4>Active Record</h4>

<p>Here is the code inside <code>db/seeds.rb</code></p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># first round 100, second round 10,000, third round 1,000,000</span>
<span class="n">number_of_records</span> <span class="o">=</span> <span class="mi">100</span>
<span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">.</span><span class="n">.number_of_records</span>
  <span class="no">Book</span><span class="o">.</span><span class="n">create</span><span class="p">({</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Book Title </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="p">\</span>
               <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Description </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="p">\</span>
               <span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Author </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="p">\</span>
               <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;Publisher </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">})</span>
<span class="k">end</span>
</code></pre></div>
<p>Here is how I run it:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">time </span>bundle <span class="nb">exec </span>rake db:seed
</code></pre></div>
<p>Here are the results of 3 running rounds (with creating 100, 10,000 records and 1 million records). Each time database drop, creation and migration were performed before hand.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">real0m1.706s
user0m1.401s
sys0m0.229s     

real  0m12.328s
user  0m7.820s
sys 0m1.041s

real  17m52.272s
user  10m41.534s
sys 1m20.044s
</code></pre></div>
<p>Active Record took <strong>1.706 seconds</strong>,  <strong>12.328 seconds</strong> and a whooping <strong>17 minutes 52.272 seconds</strong> to complete 100, 10,000 and 1 million record creation run.</p>

<h4>Ecto</h4>

<p>I create a file seeds.ex inside the elixir project folder with the following content</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kn">alias</span> <span class="nc">BookStoreElixir.Book</span>
<span class="kn">alias</span> <span class="nc">BookStoreElixir.Repo</span>

<span class="c1"># First round 100, second round 10,000, third round 1,000,000</span>
<span class="n">number_of_records</span> <span class="p">=</span> <span class="mi">100</span>
<span class="n">range</span> <span class="p">=</span> <span class="mi">1</span><span class="p">..</span><span class="mi">100</span>
<span class="k">for</span> <span class="n">i</span> <span class="p">&lt;-</span> <span class="n">range</span> <span class="k">do</span>
  <span class="n">book</span> <span class="p">=</span> <span class="p">%</span><span class="nc">Book</span><span class="p">{</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Book Title </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="err">\</span>
               <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Description </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="err">\</span>
               <span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Author </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="err">\</span>
               <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;Publisher </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}</span>
  <span class="nc">Repo</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">book</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<p>Then run this seeds</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">time </span>mix run seeds.ex 
</code></pre></div>
<p>And here is the reusult of 3 runs:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">real  0m0.624s
user  0m0.513s
sys 0m0.187s

real  0m5.109s
user  0m2.459s
sys 0m1.002s

real  6m15.161s
user  3m19.126s
sys 2m53.117s
</code></pre></div>
<p>Ecto took merely <strong>0.624 seconds</strong>, <strong>5.109 seconds</strong> and <strong>6 minutes 15.161 seconds</strong> to complete the same 3 runs of creation 100, 10,000 and 1 million records. </p>

<p>Here is the chart that shows the performance of Ecto vs Active Record through 3 runs:</p>

<p><img class="center" src="/images/ecto<em>vs</em>active<em>record/creation</em>chart.png&#8221; width=&#8221;710&#8221; height=&#8221;467&#8221; title=&#8221;&#39;image&#39; &#39;images&#39;&#8221; ></p>

<p>Ecto is approximately <strong>62%</strong> faster than Active Record. Hence, Ecto is the winner in this round.</p>

<h4>Round 4: Speed of Updating</h4>

<p>We will now run updating on 100, 10,000 and 1 million records in each database each. We will update the records, one by one to have a new book title. As usual, let&#39;s start with Active Record first</p>

<h5>Active Record</h5>

<p>Now in my <code>db/seeds.rb</code> file, I will change it like following:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">Book</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">book</span><span class="o">|</span>
  <span class="n">book</span><span class="o">.</span><span class="n">update_attributes</span><span class="p">({</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;New Book Title </span><span class="si">#{</span><span class="n">book</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<p>And run this file:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">time </span>bundle <span class="nb">exec </span>rake db:seed
</code></pre></div><div class="highlight"><pre><code class="language-bash" data-lang="bash">real  0m1.725s
user  0m1.423s
sys 0m0.243s

real  0m12.414s
user  0m6.936s
sys 0m1.109s

real  23m30.364s
user  15m22.126s
sys 1m26.698s
</code></pre></div>
<p>Active Record took <strong>1.725 seconds</strong>, <strong>12.414 seconds</strong> and <strong>23 minutes, 30.364 seconds</strong> to update all 100, 10,000 and 1 million records respectively.</p>

<h5>Ecto</h5>

<p>We will change the <code>seeds.ex</code> file to following</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kn">alias</span> <span class="nc">BookStoreElixir.Book</span>
<span class="kn">alias</span> <span class="nc">BookStoreElixir.Repo</span>

<span class="c1"># range = 1..10000</span>
<span class="c1"># for i &lt;- range do</span>
<span class="c1">#  book = %Book{title: &quot;Book Title #{i}&quot;, \</span>
                <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Description </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="err">\</span>
                <span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Author </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="err">\</span>
                <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;Publisher </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}</span>
<span class="c1">#  Repo.insert(book)</span>
<span class="c1"># end</span>

<span class="k">for</span> <span class="n">book</span> <span class="p">&lt;-</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="nc">Book</span><span class="p">)</span> <span class="k">do</span>
  <span class="n">book</span> <span class="p">=</span> <span class="p">%{</span><span class="n">book</span> <span class="p">|</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;New Book Title </span><span class="si">#{</span><span class="n">book</span><span class="p">.</span><span class="n">id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}</span>
  <span class="nc">Repo</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">book</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<p>Before you can run this file, you will need to do a bit modification on <code>postgrex</code> library as this library is throwing a time out if a query spends more than 5 seconds to complete. <code>Repo.all(Book)</code> will definitely take up more than 5 seconds to load up the entire collection of books into the memory</p>

<p>From the project folder, what I did was edit file <code>deps/ecto/lib/ecto/adapters/postgres.ex</code></p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vim deps/ecto/lib/ecto/adapters/postgres.ex 
</code></pre></div>
<p>Then search for <code>@timeout 5000</code> and replace by <code>@timeout :infinity</code></p>

<p>Now you can run and time the running time of this file</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">time </span>mix run seeds.ex
</code></pre></div>
<p>Here are the result of 3 runs:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">real  0m0.606s
user  0m0.509s
sys 0m0.184s

real  0m5.495s
user  0m2.515s
sys 0m1.071s

real  7m12.016s
user  3m49.446s
sys 3m7.004s
</code></pre></div>
<p>Ecto took merely <strong>0.606 seconds</strong>, <strong>5.495 seconds</strong> and <strong>7 minutes, 12 seconds</strong> to update 100, 10,000 records and 1 million records respectively. Apparently, Ecto is the winner.</p>

<p>Here is the chart showing the above elapsed time:</p>

<p><img class="center" src="/images/ecto<em>vs</em>active<em>record/update</em>chart.png&#8221; width=&#8221;633&#8221; height=&#8221;444&#8221; title=&#8221;&#39;image&#39; &#39;images&#39;&#8221; ></p>

<h3>Conclusion</h3>

<p>With the fact that Active Record and Ecto each has 2 wons, it is concluded to be a draw between Active Record and Ecto. Ecto seems to be very promising library, which provides a very interesting way to write a database query. The steps to setup and the syntax of Ecto will definitely improve in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing With Model in Elixir Phoenix Console]]></title>
    <link href="http://learnelixir.com/blog/2014/10/08/playing-with-model-in-elixir-phoenix-console/"/>
    <updated>2014-10-08T07:20:21+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/08/playing-with-model-in-elixir-phoenix-console</id>
    <content type="html"><![CDATA[<p>You will need to have the source code of this article http://learnelixir.com/blog/2014/10/04/build-web-app-with-elixir/ before being able to follow this article. So basically, after you finish that article, you will have a model Book. Let turn on elixir console to play around with this model. To turn on elixir console with phoenix, type the following command</p>

<!-- more -->
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>iex -S mix
</code></pre></div>
<p>Now you are inside elixir console mode, let&#39;s start with retrieve our first book</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">BookStore.Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nc">BookStore.Books</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="p">%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
 <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: Functional |&gt; Concurrent |&gt; Pragmatic |&gt; Fun&quot;</span><span class="p">,</span>
  <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir&quot;</span><span class="p">}</span>
</code></pre></div>
<p>As you can see, we can use <code>BookStore.Repo</code> to retrieve a book. Here is the review of <code>BookStore.Repo</code> code</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">BookStore.Repo</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Ecto.Repo</span><span class="p">,</span> <span class="ss">adapter</span><span class="p">:</span> <span class="nc">Ecto.Adapters.Postgres</span>

  <span class="kd">def</span> <span class="n">conf</span> <span class="k">do</span>
    <span class="n">parse_url</span> <span class="s2">&quot;ecto://postgresuser:password@localhost/book_store&quot;</span>
  <span class="k">end</span> 

  <span class="kd">def</span> <span class="n">priv</span> <span class="k">do</span>
    <span class="n">app_dir</span><span class="p">(</span><span class="ss">:book_store</span><span class="p">,</span> <span class="s2">&quot;priv/repo&quot;</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>From the elixir console, we also can retrieve all books just like what we did in the controller</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">BookStore.Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="nc">BookStore.Books</span><span class="p">)</span>
<span class="p">[%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
 <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: Functional |&gt; Concurrent |&gt; Pragmatic |&gt; Fun&quot;</span><span class="p">,</span>
  <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir&quot;</span><span class="p">}]</span>
</code></pre></div>
<p>As you can see, this time round, it returns you an array of Books. Up to this point, I feel a bit annoying every time I need to type <code>BookStore.Books</code>, <code>BookStore.Repo</code>, then I find out that <code>alias</code> in Elixir can help to shorten this syntax by just calling <code>Books</code> and <code>Repo</code>. So now, what you need to do is</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStore.Repo</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="nc">Repo</span>
<span class="no">nil</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStore.Books</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="nc">Books</span>
</code></pre></div>
<p>By default <code>alias</code>, if you call <code>alias</code> without supplying <code>as</code>, it will automatically set the alias to the last part of the module name. Hence in this case, you can just simply call</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStore.Repo</span>
<span class="no">nil</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStore.Books</span>
<span class="no">nil</span>
</code></pre></div>
<p>So now, it will be much pleasure to write the command in the console</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="nc">Books</span><span class="p">)</span>
<span class="p">[%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
 <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: Functional |&gt; Concurrent |&gt; Pragmatic |&gt; Fun&quot;</span><span class="p">,</span>
  <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir&quot;</span><span class="p">}]</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nc">Books</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="p">%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
 <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: Functional |&gt; Concurrent |&gt; Pragmatic |&gt; Fun&quot;</span><span class="p">,</span>
  <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir&quot;</span><span class="p">}</span>
</code></pre></div>
<p>Next, you can assign a book from the database call inside the console:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="n">book</span> <span class="p">=</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">books</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="p">%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
 <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: Functional |&gt; Concurrent |&gt; Pragmatic |&gt; Fun&quot;</span><span class="p">,</span>
  <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir&quot;</span><span class="p">}</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="n">book</span><span class="p">.</span><span class="n">author</span>
<span class="s2">&quot;Dave Thomas&quot;</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="n">book</span><span class="p">.</span><span class="n">description</span>
<span class="s2">&quot;Programming Elixir: Functional |&gt; Concurrent |&gt; Pragmatic |&gt; Fun&quot;</span>
</code></pre></div>
<p>To update this book, you will need to reassign the book with itself plus the updated properties and let <code>Repo</code> handle the update by calling <code>update</code> function on Repor</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span>  <span class="n">book</span> <span class="p">=</span> <span class="p">%{</span><span class="n">book</span> <span class="p">|</span> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: a lot more fun&quot;</span><span class="p">,</span> <span class="err">\</span>
                      <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir with fun&quot;</span><span class="p">}</span>
<span class="p">%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
 <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: a lot more fun&quot;</span><span class="p">,</span> <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir with fun&quot;</span><span class="p">}</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">book</span><span class="p">)</span>
<span class="ss">:ok</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nc">Books</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="p">%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
 <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: a lot more fun&quot;</span><span class="p">,</span> <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir with fun&quot;</span><span class="p">}</span>
</code></pre></div>
<p>Next, you also can create a new book by calling <code>insert</code> command on <code>Repo</code>. Pretty straight forward.</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">insert</span><span class="p">(%</span><span class="nc">Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Simon St. Laurent, J. David Eisenberg&quot;</span><span class="p">,</span> <span class="err">\</span>
                        <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Elixir is an excellent language if you want to </span><span class="err">\</span><span class="s2"></span>
<span class="s2">                                      learn about functional programming, and with this hands-on </span><span class="err">\</span><span class="s2"></span>
<span class="s2">                                      introduction&quot;</span><span class="p">,</span> 
                        <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;O&#39;Reilly&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Introducing Elixir&quot;</span><span class="p">})</span>
<span class="p">%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Simon St. Laurent, J. David Eisenberg&quot;</span><span class="p">,</span>
                 <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Elixir is an excellent language if you want to learn about </span><span class="err">\</span><span class="s2"></span>
<span class="s2">                               functional programming, and with this hands-on introduction&quot;</span><span class="p">,</span> <span class="err">\</span>
                 <span class="ss">id</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;O&#39;Reilly&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Introducing Elixir&quot;</span><span class="p">}</span>
</code></pre></div>
<p>Now try to get all books again</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="nc">Books</span><span class="p">)</span>
<span class="p">[%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
  <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: a lot more fun&quot;</span><span class="p">,</span> <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir with fun&quot;</span><span class="p">},</span>
 <span class="p">%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Simon St. Laurent, J. David Eisenberg&quot;</span><span class="p">,</span>
  <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Elixir is an excellent language if you want to learn about </span><span class="err">\</span><span class="s2"></span>
<span class="s2">                functional programming, and with this hands-on introduction&quot;</span><span class="p">,</span>
  <span class="ss">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;O&#39;Reilly&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Introducing Elixir&quot;</span><span class="p">}]</span>
</code></pre></div>
<p>Note this book is created with id <code>2</code>. Now we can delete this book by calling <code>delete</code> command on <code>Repo</code>. </p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="n">introducing_elixir_book</span> <span class="p">=</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nc">Books</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="p">%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Simon St. Laurent, J. David Eisenberg&quot;</span><span class="p">,</span>
 <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Elixir is an excellent language if you want to learn </span><span class="err">\</span><span class="s2"></span>
<span class="s2">               about functional programming, and with this hands-on introduction&quot;</span><span class="p">,</span>
  <span class="ss">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;O&#39;Reilly&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Introducing Elixir&quot;</span><span class="p">}</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="n">introducing_elixir_book</span><span class="p">)</span>
<span class="ss">:ok</span>
</code></pre></div>
<p>Retrieving all books again, you will see the deleted book is really deleted.</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="nc">Books</span><span class="p">)</span>
<span class="p">[%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
 <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: Functional |&gt; Concurrent |&gt; Pragmatic |&gt; Fun&quot;</span><span class="p">,</span>
  <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir&quot;</span><span class="p">}]</span>
</code></pre></div>
<p>That&#39;s all for this article. I really hope you enjoy it. These basic command on the model will play a very important role when you need to build a RESTful controller, which will be cover in the near future article :-) </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Listing App With Elixir, Phoenix, Postgres and Ecto]]></title>
    <link href="http://learnelixir.com/blog/2014/10/05/build-web-app-with-elixir/"/>
    <updated>2014-10-05T23:22:42+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/05/build-web-app-with-elixir</id>
    <content type="html"><![CDATA[<p><strong>UPDATE</strong> on 26th Nov 14: I have updated this article in order to work with Phoenix framework version 0.6.0. Previously the Phoenix framework used in this article was 0.5.0.
<hr/><br/>
<strong>UPDATE</strong> on 26th Oct 14: I have updated this article in order to work with Phoenix framework version 0.5.0. Previously the Phoenix framework used in this article was 0.4.1
<hr/><br/>
In this article, let&#39;s go through the process of creating and build a simple web app which lists a set of books using Elixir, Phoenix, Postgres and Ecto. I hope you will enjoy :-)</p>

<!--more-->

<h3>Create Elixir Book Store Project</h3>

<p>From the phoenix installation folder, run the following command:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix phoenix.new book_store ../
</code></pre></div>
<p>Now enter the project folder and get all the dependencies and start the phoenix project:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">cd</span> ../book_store
<span class="nv">$ </span>mix <span class="k">do</span> deps.get, compile
<span class="nv">$ </span>mix phoenix.start
</code></pre></div>
<p>Open the browser, and go to the url <code>http://localhost:4000</code></p>

<p><img class="left" src="/images/build-web-app-with-elixir/phoenix_page.png" width="800" height="510" title="&#39;image&#39; &#39;images&#39;" ></p>

<h3>Add Ecto To The Project</h3>

<p>From the project root folder, open file <code>mix.exs</code>, scroll down to the end of the file, then you will see <code>defp deps do</code> function definition. You will need to add in <code>postgrex</code> and <code>ecto</code> dependencies</p>

<ul>
<li><code>postgrex</code> (https://github.com/ericmj/postgrex) is the PostgresSQL driver for Elixir</li>
<li><code>ecto</code> (https://github.com/elixir-lang/ecto) is a database wrapper and language integrated query for Elixir </li>
</ul>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defp</span> <span class="n">deps</span> <span class="k">do</span>
  <span class="p">[</span>
    <span class="p">{</span><span class="ss">:phoenix</span><span class="p">,</span> <span class="s2">&quot;0.6.0&quot;</span><span class="p">},</span>
    <span class="p">{</span><span class="ss">:cowboy</span><span class="p">,</span> <span class="s2">&quot;~&gt; 1.0.0&quot;</span><span class="p">},</span>
    <span class="p">{</span><span class="ss">:postgrex</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.5&quot;</span><span class="p">},</span>
    <span class="p">{</span><span class="ss">:ecto</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.2.0&quot;</span><span class="p">}</span>
  <span class="p">]</span>
<span class="k">end</span>
</code></pre></div>
<p>In the same file, you will also need to update the application function definition to include <code>postgrex</code> and <code>ecto</code></p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">def</span> <span class="n">application</span> <span class="k">do</span>
  <span class="p">[</span> 
    <span class="ss">mod</span><span class="p">:</span> <span class="p">{</span> <span class="nc">BookStore</span><span class="p">,</span> <span class="p">[]</span> <span class="p">},</span>
    <span class="ss">applications</span><span class="p">:</span> <span class="p">[</span><span class="ss">:phoenix</span><span class="p">,</span> <span class="ss">:cowboy</span><span class="p">,</span> <span class="ss">:logger</span><span class="p">,</span> <span class="ss">:postgrex</span><span class="p">,</span> <span class="ss">:ecto</span><span class="p">]</span>
  <span class="p">]</span> 
<span class="k">end</span> 
</code></pre></div>
<p>Run the following commands in the terminal to get all the dependencies.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix deps.get
</code></pre></div>
<h3>Create A Repo</h3>

<p>A repo is a basic interfacte to a database (which is postgres). Open <code>web/models/repo.ex</code> and add the following code</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">BookStore.Repo</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Ecto.Repo</span><span class="p">,</span> <span class="ss">adapter</span><span class="p">:</span> <span class="nc">Ecto.Adapters.Postgres</span>

  <span class="kd">def</span> <span class="n">conf</span> <span class="k">do</span>
    <span class="n">parse_url</span> <span class="s2">&quot;ecto://postgresuser:password@localhost/book_store&quot;</span>
  <span class="k">end</span>

  <span class="kd">def</span> <span class="n">priv</span> <span class="k">do</span>
    <span class="n">app_dir</span><span class="p">(</span><span class="ss">:book_store</span><span class="p">,</span> <span class="s2">&quot;priv/repo&quot;</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>We have defined PostgreSQL connection with a URL format. What you will need to do is changing the <code>postgresuser</code> and <code>password</code> to be the real postgres username and password on your database.</p>

<p>The next step that we need to do is to make sure that our Repo module is started with our application, and is supervised. You can do this by opening file <code>lib/book_store.ex</code>.</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">BookStore</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Application</span>

  <span class="c1"># See http://elixir-lang.org/docs/stable/elixir/Application.html</span>
  <span class="c1"># for more information on OTP Applications</span>
  <span class="kd">def</span> <span class="n">start</span><span class="p">(</span><span class="n">_type</span><span class="p">,</span> <span class="n">_args</span><span class="p">)</span> <span class="k">do</span>
    <span class="kn">import</span> <span class="nc">Supervisor.Spec</span><span class="p">,</span> <span class="ss">warn</span><span class="p">:</span> <span class="no">false</span>

    <span class="n">children</span> <span class="p">=</span> <span class="p">[</span>
      <span class="c1"># Define workers and child supervisors to be supervised</span>
      <span class="n">worker</span><span class="p">(</span><span class="nc">BookStore.Repo</span><span class="p">,</span> <span class="p">[])</span>
    <span class="p">]</span>

    <span class="n">opts</span> <span class="p">=</span> <span class="p">[</span><span class="ss">strategy</span><span class="p">:</span> <span class="ss">:one_for_one</span><span class="p">,</span> <span class="ss">name</span><span class="p">:</span> <span class="nc">BookStore.Supervisor</span><span class="p">]</span>
    <span class="nc">Supervisor</span><span class="p">.</span><span class="n">start_link</span><span class="p">(</span><span class="n">children</span><span class="p">,</span> <span class="n">opts</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Line number 11 is the only line that we add inside this file.</p>

<p>To make sure that everything is good, let&#39;s compile the project:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix compile
</code></pre></div>
<p>Next, let&#39;s create the <code>book_store</code> database in postgres</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>createdb book_store --encoding<span class="o">=</span><span class="s1">&#39;utf-8&#39;</span> --locale<span class="o">=</span>en_US.UTF-8 --template<span class="o">=</span>template0<span class="p">;</span>
</code></pre></div>
<h3>Create a model</h3>

<p>Create a model file <code>web/models/books.ex</code> with the following code:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">BookStore.Books</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Ecto.Model</span>

  <span class="n">schema</span> <span class="s2">&quot;books&quot;</span> <span class="k">do</span>
    <span class="n">field</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:string</span>
    <span class="n">field</span> <span class="ss">:description</span><span class="p">,</span> <span class="ss">:string</span>
    <span class="n">field</span> <span class="ss">:author</span><span class="p">,</span> <span class="ss">:string</span>
    <span class="n">field</span> <span class="ss">:publisher</span><span class="p">,</span> <span class="ss">:string</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<h3>Generate Migration Script</h3>

<p>We will also need to create a database migration for books model by using the following command:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix ecto.gen.migration BookStore.Repo create_book
Compiled lib/book_store.ex
Compiled web/models/repo.ex
Generated book_store.app
* creating priv/repo/migrations
* creating priv/repo/migrations/20141005013526_create_book.exs
</code></pre></div>
<p>Now open the just generated migration file <code>priv/repo/migrations/20141005013526_create_book.exs</code> and change with the following code</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">BookStore.Repo.Migrations.CreateBook</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Ecto.Migration</span>

  <span class="kd">def</span> <span class="n">up</span> <span class="k">do</span>
    <span class="p">[</span><span class="s2">&quot;CREATE TABLE books(</span><span class="err">\</span><span class="s2"></span>
<span class="s2">        id serial primary key, </span><span class="err">\</span><span class="s2"></span>
<span class="s2">        title varchar(125), </span><span class="err">\</span><span class="s2"></span>
<span class="s2">        description text, </span><span class="err">\</span><span class="s2"></span>
<span class="s2">        author varchar(255), </span><span class="err">\</span><span class="s2"></span>
<span class="s2">        publisher varchar(255))&quot;</span><span class="p">,</span><span class="err">\</span>

     <span class="s2">&quot;INSERT INTO books(title, description, author, publisher) </span><span class="err">\</span><span class="s2"></span>
<span class="s2">             VALUES ( </span><span class="err">\</span><span class="s2"></span>
<span class="s2">                &#39;Programming Elixir&#39;, </span><span class="err">\</span><span class="s2"></span>
<span class="s2">                &#39;Programming Elixir: Functional |&gt; Concurrent |&gt; Pragmatic |&gt; Fun&#39;, </span><span class="err">\</span><span class="s2"></span>
<span class="s2">                &#39;Dave Thomas&#39;, </span><span class="err">\</span><span class="s2"></span>
<span class="s2">                &#39;The Pragmatic Bookshelf&#39;)&quot;</span>
    <span class="p">]</span>
  <span class="k">end</span>

  <span class="kd">def</span> <span class="n">down</span> <span class="k">do</span>
    <span class="s2">&quot;DROP TABLE books&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Inside this migration file, you will see up and down function. <code>up</code> function is run when you run the database migration, <code>down</code> function is run when you revert or rollback this database migration</p>

<p>Now run the migration</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix ecto.migrate BookStore.Repo
* running UP _build/dev/lib/book_store/priv/repo/migrations/20141005013526_create_book.exs<span class="sb">``</span>
</code></pre></div>
<h3>Create A Query</h3>

<p>Create <code>web/models/queries.ex</code> folder. </p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">BookStore.Queries</span> <span class="k">do</span>
  <span class="kn">import</span> <span class="nc">Ecto.Query</span>

  <span class="kd">def</span> <span class="n">books_query</span> <span class="k">do</span>
    <span class="n">query</span> <span class="p">=</span> <span class="n">from</span> <span class="n">book</span> <span class="ow">in</span> <span class="nc">BookStore.Books</span><span class="p">,</span>
            <span class="ss">select</span><span class="p">:</span> <span class="n">book</span> 
    <span class="nc">BookStore.Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<h3>Route books index page to Book controller index action</h3>

<p>Open file <code>web/router.ex</code>, we will need to map the root route to <code>BookController</code>. Note that in Phoenix, controller name is singular + <code>Controller</code> whereas in Rails, it is <code>BooksController</code></p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">BookStore.Router</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Phoenix.Router</span>

  <span class="n">pipeline</span> <span class="ss">:browser</span> <span class="k">do</span>
    <span class="n">plug</span> <span class="ss">:accepts</span><span class="p">,</span> <span class="sx">~w(html)</span>
    <span class="n">plug</span> <span class="ss">:fetch_session</span>
  <span class="k">end</span> 

  <span class="n">pipeline</span> <span class="ss">:api</span> <span class="k">do</span>
    <span class="n">plug</span> <span class="ss">:accepts</span><span class="p">,</span> <span class="sx">~w(json)</span>
  <span class="k">end</span> 

  <span class="n">scope</span> <span class="s2">&quot;/&quot;</span> <span class="k">do</span>
    <span class="n">pipe_through</span> <span class="ss">:browser</span> <span class="c1"># Use the default browser stack</span>

    <span class="n">get</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="nc">BookStore.BookController</span><span class="p">,</span> <span class="ss">:index</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:books</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<h3>Create BookController and get all books</h3>

<p>Create a file called <code>book_controller.ex</code> inside <code>web/controllers</code> folder with the following source code:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">BookStore.BookController</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Phoenix.Controller</span>

  <span class="n">plug</span> <span class="ss">:action</span>

  <span class="kd">def</span> <span class="n">index</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="n">_params</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">books</span> <span class="p">=</span> <span class="nc">BookStore.Queries</span><span class="p">.</span><span class="n">books_query</span>
    <span class="n">render</span> <span class="n">conn</span><span class="p">,</span> <span class="s2">&quot;index.html&quot;</span><span class="p">,</span> <span class="ss">books</span><span class="p">:</span> <span class="n">books</span> 
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<h3>Create books index page view</h3>

<p>Next thing that we will need to do is to create an index page for books listing. First, create folder <code>book</code> inside <code>web/template</code>. </p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">mkdir web/templates/book
</code></pre></div>
<p>Second, create a book view file - <code>web/views/book_view.ex</code> with the following content</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">BookStore.BookView</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Phoenix.View</span><span class="p">,</span> <span class="ss">root</span><span class="p">:</span> <span class="s2">&quot;web/templates&quot;</span>
<span class="k">end</span>
</code></pre></div>
<p>Finally, create file <code>web/template/book/index.html.eex</code> and paste in the following code:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;h1&gt;</span>Our Books<span class="nt">&lt;/h1&gt;</span>

<span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">&#39;table table-bodered table-striped&#39;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;thead&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
      <span class="nt">&lt;th&gt;</span>#<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th&gt;</span>Title<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th&gt;</span>Description<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th&gt;</span>Author<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th&gt;</span>Publisher<span class="nt">&lt;/th&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
  <span class="nt">&lt;/thead&gt;</span>
  <span class="nt">&lt;tbody&gt;</span>
    <span class="err">&lt;</span>%= for book <span class="nt">&lt;-</span> <span class="err">@</span><span class="na">books</span> <span class="na">do</span> <span class="err">%</span><span class="nt">&gt;</span>
      <span class="nt">&lt;tr&gt;</span>
        <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= book.id %&gt;<span class="nt">&lt;/td&gt;</span>
        <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= book.title %&gt;<span class="nt">&lt;/td&gt;</span>
        <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= book.description %&gt;<span class="nt">&lt;/td&gt;</span>
        <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= book.author %&gt;<span class="nt">&lt;/td&gt;</span>
        <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= book.publisher %&gt;<span class="nt">&lt;/td&gt;</span>
      <span class="nt">&lt;/tr&gt;</span>
    <span class="err">&lt;</span>% end %&gt;
  <span class="nt">&lt;/tbody&gt;</span>
<span class="nt">&lt;/table&gt;</span>
</code></pre></div>
<p>Refresh the browser and voila, this is what we will get:</p>

<p><img class="left" src="/images/build-web-app-with-elixir/complete.png" width="800" height="346" title="&#39;image&#39; &#39;images&#39;" ></p>

<h3>Common Pitfall</h3>

<p>I seldom hit the following error when trying to restart phoenix although all the codes are correct 
<code>bash
=INFO REPORT==== 5-Oct-2014::09:57:47 ===
    application: logger
    exited: stopped
    type: temporary
** (Mix) Could not start application book_store: exited in: BookStore.start(:normal, [])
    ** (EXIT) an exception was raised:
        ** (UndefinedFunctionError) undefined function: BookStore.start/2 
          (module BookStore is not available)
            BookStore.start(:normal, [])
            (kernel) application_master.erl:272: :application_master.start_it_old/4
</code></p>

<p>To fix this, you will need to clean compile all your elixir code: </p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix clean
<span class="nv">$ </span>mix compile
<span class="nv">$ </span>mix phoenix.start
</code></pre></div>]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Postgres | Learn Elixir Language]]></title>
  <link href="http://learnelixir.com/blog/categories/postgres/atom.xml" rel="self"/>
  <link href="http://learnelixir.com/"/>
  <updated>2014-10-30T07:27:15+08:00</updated>
  <id>http://learnelixir.com/</id>
  <author>
    <name><![CDATA[Learn Elixir]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Book Listing App With Elixir, Phoenix, Postgres and Ecto]]></title>
    <link href="http://learnelixir.com/blog/2014/10/05/build-web-app-with-elixir/"/>
    <updated>2014-10-05T23:22:42+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/05/build-web-app-with-elixir</id>
    <content type="html"><![CDATA[<p><strong>UPDATE</strong> on 26th Oct 14: I have updated this article in order to work with Phoenix framework version 0.5.0. Previously the Phoenix framework used in this article was 0.4.1
<hr/><br/></p>

<p>In this article, let&#39;s go through the process of creating and build a simple web app which lists a set of books using Elixir, Phoenix, Postgres and Ecto. I hope you will enjoy :-)</p>

<!--more-->

<h3>Create Elixir Book Store Project</h3>

<p>From the phoenix installation folder, run the following command:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix phoenix.new book_store ../
</code></pre></div>
<p>Now enter the project folder and get all the dependencies and start the phoenix project:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">cd</span> ../book_store
<span class="nv">$ </span>mix <span class="k">do</span> deps.get, compile
<span class="nv">$ </span>mix phoenix.start
</code></pre></div>
<p>Open the browser, and go to the url <code>http://localhost:4000</code></p>

<p>{% img left /images/build-web-app-with-elixir/phoenix_page.png 800 510 &#39;image&#39; &#39;images&#39; %}</p>

<h3>Add Ecto To The Project</h3>

<p>From the project root folder, open file <code>mix.exs</code>, scroll down to the end of the file, then you will see <code>defp deps do</code> function definition. You will need to add in <code>postgrex</code> and <code>ecto</code> dependencies</p>

<ul>
<li><code>postgrex</code> (https://github.com/ericmj/postgrex) is the PostgresSQL driver for Elixir</li>
<li><code>ecto</code> (https://github.com/elixir-lang/ecto) is a database wrapper and language integrated query for Elixir </li>
</ul>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defp</span> <span class="n">deps</span> <span class="k">do</span>
  <span class="p">[</span>
    <span class="p">{</span><span class="ss">:phoenix</span><span class="p">,</span> <span class="s2">&quot;0.5.0&quot;</span><span class="p">},</span>
    <span class="p">{</span><span class="ss">:cowboy</span><span class="p">,</span> <span class="s2">&quot;~&gt; 1.0.0&quot;</span><span class="p">},</span>
    <span class="p">{</span><span class="ss">:postgrex</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.5&quot;</span><span class="p">},</span>
    <span class="p">{</span><span class="ss">:ecto</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.2.0&quot;</span><span class="p">}</span>
  <span class="p">]</span>
<span class="k">end</span>
</code></pre></div>
<p>In the same file, you will also need to update the application function definition to include <code>postgrex</code> and <code>ecto</code></p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">def</span> <span class="n">application</span> <span class="k">do</span>
  <span class="p">[</span> 
    <span class="ss">mod</span><span class="p">:</span> <span class="p">{</span> <span class="nc">BookStore</span><span class="p">,</span> <span class="p">[]</span> <span class="p">},</span>
    <span class="ss">applications</span><span class="p">:</span> <span class="p">[</span><span class="ss">:phoenix</span><span class="p">,</span> <span class="ss">:cowboy</span><span class="p">,</span> <span class="ss">:logger</span><span class="p">,</span> <span class="ss">:postgrex</span><span class="p">,</span> <span class="ss">:ecto</span><span class="p">]</span>
  <span class="p">]</span> 
<span class="k">end</span> 
</code></pre></div>
<p>Run the following commands in the terminal to get all the dependencies.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix deps.get
</code></pre></div>
<h3>Create A Repo</h3>

<p>A repo is a basic interfacte to a database (which is postgres). Open <code>web/models/repo.ex</code> and add the following code</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">BookStore.Repo</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Ecto.Repo</span><span class="p">,</span> <span class="ss">adapter</span><span class="p">:</span> <span class="nc">Ecto.Adapters.Postgres</span>

  <span class="kd">def</span> <span class="n">conf</span> <span class="k">do</span>
    <span class="n">parse_url</span> <span class="s2">&quot;ecto://postgresuser:password@localhost/book_store&quot;</span>
  <span class="k">end</span>

  <span class="kd">def</span> <span class="n">priv</span> <span class="k">do</span>
    <span class="n">app_dir</span><span class="p">(</span><span class="ss">:book_store</span><span class="p">,</span> <span class="s2">&quot;priv/repo&quot;</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>We have defined PostgreSQL connection with a URL format. What you will need to do is changing the <code>postgresuser</code> and <code>password</code> to be the real postgres username and password on your database.</p>

<p>The next step that we need to do is to make sure that our Repo module is started with our application, and is supervised. You can do this by opening file <code>lib/book_store.ex</code>.</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">BookStore</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Application</span>

  <span class="c1"># See http://elixir-lang.org/docs/stable/elixir/Application.html</span>
  <span class="c1"># for more information on OTP Applications</span>
  <span class="kd">def</span> <span class="n">start</span><span class="p">(</span><span class="n">_type</span><span class="p">,</span> <span class="n">_args</span><span class="p">)</span> <span class="k">do</span>
    <span class="kn">import</span> <span class="nc">Supervisor.Spec</span><span class="p">,</span> <span class="ss">warn</span><span class="p">:</span> <span class="no">false</span>

    <span class="n">children</span> <span class="p">=</span> <span class="p">[</span>
      <span class="c1"># Define workers and child supervisors to be supervised</span>
      <span class="n">worker</span><span class="p">(</span><span class="nc">BookStore.Repo</span><span class="p">,</span> <span class="p">[])</span>
    <span class="p">]</span>

    <span class="n">opts</span> <span class="p">=</span> <span class="p">[</span><span class="ss">strategy</span><span class="p">:</span> <span class="ss">:one_for_one</span><span class="p">,</span> <span class="ss">name</span><span class="p">:</span> <span class="nc">BookStore.Supervisor</span><span class="p">]</span>
    <span class="nc">Supervisor</span><span class="p">.</span><span class="n">start_link</span><span class="p">(</span><span class="n">children</span><span class="p">,</span> <span class="n">opts</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Line number 11 is the only line that we add inside this file.</p>

<p>To make sure that everything is good, let&#39;s compile the project:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix compile
</code></pre></div>
<p>Next, let&#39;s create the <code>book_store</code> database in postgres</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>createdb book_store --encoding<span class="o">=</span><span class="s1">&#39;utf-8&#39;</span> --locale<span class="o">=</span>en_US.UTF-8 --template<span class="o">=</span>template0<span class="p">;</span>
</code></pre></div>
<h3>Create a model</h3>

<p>Create a model file <code>web/models/books.ex</code> with the following code:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">BookStore.Books</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Ecto.Model</span>

  <span class="n">schema</span> <span class="s2">&quot;books&quot;</span> <span class="k">do</span>
    <span class="n">field</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:string</span>
    <span class="n">field</span> <span class="ss">:description</span><span class="p">,</span> <span class="ss">:string</span>
    <span class="n">field</span> <span class="ss">:author</span><span class="p">,</span> <span class="ss">:string</span>
    <span class="n">field</span> <span class="ss">:publisher</span><span class="p">,</span> <span class="ss">:string</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<h3>Generate Migration Script</h3>

<p>We will also need to create a database migration for books model by using the following command:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix ecto.gen.migration BookStore.Repo create_book
Compiled lib/book_store.ex
Compiled web/models/repo.ex
Generated book_store.app
* creating priv/repo/migrations
* creating priv/repo/migrations/20141005013526_create_book.exs
</code></pre></div>
<p>Now open the just generated migration file <code>priv/repo/migrations/20141005013526_create_book.exs</code> and change with the following code</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">BookStore.Repo.Migrations.CreateBook</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Ecto.Migration</span>

  <span class="kd">def</span> <span class="n">up</span> <span class="k">do</span>
    <span class="p">[</span><span class="s2">&quot;CREATE TABLE books(</span><span class="err">\</span><span class="s2"></span>
<span class="s2">        id serial primary key, </span><span class="err">\</span><span class="s2"></span>
<span class="s2">        title varchar(125), </span><span class="err">\</span><span class="s2"></span>
<span class="s2">        description text, </span><span class="err">\</span><span class="s2"></span>
<span class="s2">        author varchar(255), </span><span class="err">\</span><span class="s2"></span>
<span class="s2">        publisher varchar(255))&quot;</span><span class="p">,</span><span class="err">\</span>

     <span class="s2">&quot;INSERT INTO books(title, description, author, publisher) </span><span class="err">\</span><span class="s2"></span>
<span class="s2">             VALUES ( </span><span class="err">\</span><span class="s2"></span>
<span class="s2">                &#39;Programming Elixir&#39;, </span><span class="err">\</span><span class="s2"></span>
<span class="s2">                &#39;Programming Elixir: Functional |&gt; Concurrent |&gt; Pragmatic |&gt; Fun&#39;, </span><span class="err">\</span><span class="s2"></span>
<span class="s2">                &#39;Dave Thomas&#39;, </span><span class="err">\</span><span class="s2"></span>
<span class="s2">                &#39;The Pragmatic Bookshelf&#39;)&quot;</span>
    <span class="p">]</span>
  <span class="k">end</span>

  <span class="kd">def</span> <span class="n">down</span> <span class="k">do</span>
    <span class="s2">&quot;DROP TABLE books&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Inside this migration file, you will see up and down function. <code>up</code> function is run when you run the database migration, <code>down</code> function is run when you revert or rollback this database migration</p>

<p>Now run the migration</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix ecto.migrate BookStore.Repo
* running UP _build/dev/lib/book_store/priv/repo/migrations/20141005013526_create_book.exs<span class="sb">``</span>
</code></pre></div>
<h3>Create A Query</h3>

<p>Create <code>web/models/queries.ex</code> folder. </p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">BookStore.Queries</span> <span class="k">do</span>
  <span class="kn">import</span> <span class="nc">Ecto.Query</span>

  <span class="kd">def</span> <span class="n">books_query</span> <span class="k">do</span>
    <span class="n">query</span> <span class="p">=</span> <span class="n">from</span> <span class="n">book</span> <span class="ow">in</span> <span class="nc">BookStore.Books</span><span class="p">,</span>
            <span class="ss">select</span><span class="p">:</span> <span class="n">book</span> 
    <span class="nc">BookStore.Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<h3>Route books index page to Book controller index action</h3>

<p>Open file <code>web/router.ex</code>, we will need to map the root route to <code>BookController</code>. Note that in Phoenix, controller name is singular + <code>Controller</code> whereas in Rails, it is <code>BooksController</code></p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">BookStore.Router</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Phoenix.Router</span>

  <span class="n">scope</span> <span class="s2">&quot;/&quot;</span> <span class="k">do</span>
    <span class="n">pipe_through</span> <span class="ss">:browser</span>

    <span class="n">get</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="nc">BookStore.BookController</span><span class="p">,</span> <span class="ss">:index</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:books</span>
  <span class="k">end</span> 
<span class="k">end</span>
</code></pre></div>
<h3>Create BookController and get all books</h3>

<p>Create a file called <code>book_controller.ex</code> inside <code>web/controllers</code> folder with the following source code:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">BookStore.BookController</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Phoenix.Controller</span>

  <span class="n">plug</span> <span class="ss">:action</span>

  <span class="kd">def</span> <span class="n">index</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="n">_params</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">books</span> <span class="p">=</span> <span class="nc">BookStore.Queries</span><span class="p">.</span><span class="n">books_query</span>
    <span class="n">render</span> <span class="n">conn</span><span class="p">,</span> <span class="s2">&quot;index&quot;</span><span class="p">,</span> <span class="ss">books</span><span class="p">:</span> <span class="n">books</span> 
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<h3>Create books index page view</h3>

<p>Next thing that we will need to do is to create an index page for books listing. First, create folder <code>book</code> inside <code>web/template</code>. </p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">mkdir web/templates/book
</code></pre></div>
<p>Second, create a book view file - <code>web/views/book_view.ex</code> with the following content</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">BookStore.BookView</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">BookStore.Views</span>
<span class="k">end</span>
</code></pre></div>
<p>Finally, create file <code>web/template/book/index.html.eex</code> and paste in the following code:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;h1&gt;</span>Our Books<span class="nt">&lt;/h1&gt;</span>

<span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">&#39;table table-bodered table-striped&#39;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;thead&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
      <span class="nt">&lt;th&gt;</span>#<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th&gt;</span>Title<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th&gt;</span>Description<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th&gt;</span>Author<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th&gt;</span>Publisher<span class="nt">&lt;/th&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
  <span class="nt">&lt;/thead&gt;</span>
  <span class="nt">&lt;tbody&gt;</span>
    <span class="err">&lt;</span>%= for book <span class="nt">&lt;-</span> <span class="err">@</span><span class="na">books</span> <span class="na">do</span> <span class="err">%</span><span class="nt">&gt;</span>
      <span class="nt">&lt;tr&gt;</span>
        <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= book.id %&gt;<span class="nt">&lt;/td&gt;</span>
        <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= book.title %&gt;<span class="nt">&lt;/td&gt;</span>
        <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= book.description %&gt;<span class="nt">&lt;/td&gt;</span>
        <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= book.author %&gt;<span class="nt">&lt;/td&gt;</span>
        <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= book.publisher %&gt;<span class="nt">&lt;/td&gt;</span>
      <span class="nt">&lt;/tr&gt;</span>
    <span class="err">&lt;</span>% end %&gt;
  <span class="nt">&lt;/tbody&gt;</span>
<span class="nt">&lt;/table&gt;</span>
</code></pre></div>
<p>Refresh the browser and voila, this is what we will get:</p>

<p>{% img left /images/build-web-app-with-elixir/complete.png 800 346 &#39;image&#39; &#39;images&#39; %}</p>

<h3>Common Pitfall</h3>

<p>I seldom hit the following error when trying to restart phoenix although all the codes are correct 
<code>bash
=INFO REPORT==== 5-Oct-2014::09:57:47 ===
    application: logger
    exited: stopped
    type: temporary
** (Mix) Could not start application book_store: exited in: BookStore.start(:normal, [])
    ** (EXIT) an exception was raised:
        ** (UndefinedFunctionError) undefined function: BookStore.start/2 
          (module BookStore is not available)
            BookStore.start(:normal, [])
            (kernel) application_master.erl:272: :application_master.start_it_old/4
</code></p>

<p>To fix this, you will need to clean compile all your elixir code: </p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mix clean
<span class="nv">$ </span>mix compile
<span class="nv">$ </span>mix phoenix.start
</code></pre></div>]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Console | Learn Elixir Language]]></title>
  <link href="http://learnelixir.com/blog/categories/console/atom.xml" rel="self"/>
  <link href="http://learnelixir.com/"/>
  <updated>2014-12-06T00:32:16+08:00</updated>
  <id>http://learnelixir.com/</id>
  <author>
    <name><![CDATA[Learn Elixir]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Playing With Model in Elixir Phoenix Console]]></title>
    <link href="http://learnelixir.com/blog/2014/10/08/playing-with-model-in-elixir-phoenix-console/"/>
    <updated>2014-10-08T07:20:21+08:00</updated>
    <id>http://learnelixir.com/blog/2014/10/08/playing-with-model-in-elixir-phoenix-console</id>
    <content type="html"><![CDATA[<p>You will need to have the source code of this article http://learnelixir.com/blog/2014/10/04/build-web-app-with-elixir/ before being able to follow this article. So basically, after you finish that article, you will have a model Book. Let turn on elixir console to play around with this model. To turn on elixir console with phoenix, type the following command</p>

<!-- more -->
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>iex -S mix
</code></pre></div>
<p>Now you are inside elixir console mode, let&#39;s start with retrieve our first book</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">BookStore.Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nc">BookStore.Books</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="p">%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
 <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: Functional |&gt; Concurrent |&gt; Pragmatic |&gt; Fun&quot;</span><span class="p">,</span>
  <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir&quot;</span><span class="p">}</span>
</code></pre></div>
<p>As you can see, we can use <code>BookStore.Repo</code> to retrieve a book. Here is the review of <code>BookStore.Repo</code> code</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">BookStore.Repo</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="nc">Ecto.Repo</span><span class="p">,</span> <span class="ss">adapter</span><span class="p">:</span> <span class="nc">Ecto.Adapters.Postgres</span>

  <span class="kd">def</span> <span class="n">conf</span> <span class="k">do</span>
    <span class="n">parse_url</span> <span class="s2">&quot;ecto://postgresuser:password@localhost/book_store&quot;</span>
  <span class="k">end</span> 

  <span class="kd">def</span> <span class="n">priv</span> <span class="k">do</span>
    <span class="n">app_dir</span><span class="p">(</span><span class="ss">:book_store</span><span class="p">,</span> <span class="s2">&quot;priv/repo&quot;</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>From the elixir console, we also can retrieve all books just like what we did in the controller</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">BookStore.Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="nc">BookStore.Books</span><span class="p">)</span>
<span class="p">[%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
 <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: Functional |&gt; Concurrent |&gt; Pragmatic |&gt; Fun&quot;</span><span class="p">,</span>
  <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir&quot;</span><span class="p">}]</span>
</code></pre></div>
<p>As you can see, this time round, it returns you an array of Books. Up to this point, I feel a bit annoying every time I need to type <code>BookStore.Books</code>, <code>BookStore.Repo</code>, then I find out that <code>alias</code> in Elixir can help to shorten this syntax by just calling <code>Books</code> and <code>Repo</code>. So now, what you need to do is</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStore.Repo</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="nc">Repo</span>
<span class="no">nil</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStore.Books</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="nc">Books</span>
</code></pre></div>
<p>By default <code>alias</code>, if you call <code>alias</code> without supplying <code>as</code>, it will automatically set the alias to the last part of the module name. Hence in this case, you can just simply call</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStore.Repo</span>
<span class="no">nil</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="kn">alias</span> <span class="nc">BookStore.Books</span>
<span class="no">nil</span>
</code></pre></div>
<p>So now, it will be much pleasure to write the command in the console</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="nc">Books</span><span class="p">)</span>
<span class="p">[%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
 <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: Functional |&gt; Concurrent |&gt; Pragmatic |&gt; Fun&quot;</span><span class="p">,</span>
  <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir&quot;</span><span class="p">}]</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nc">Books</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="p">%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
 <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: Functional |&gt; Concurrent |&gt; Pragmatic |&gt; Fun&quot;</span><span class="p">,</span>
  <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir&quot;</span><span class="p">}</span>
</code></pre></div>
<p>Next, you can assign a book from the database call inside the console:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="n">book</span> <span class="p">=</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">books</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="p">%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
 <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: Functional |&gt; Concurrent |&gt; Pragmatic |&gt; Fun&quot;</span><span class="p">,</span>
  <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir&quot;</span><span class="p">}</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="n">book</span><span class="p">.</span><span class="n">author</span>
<span class="s2">&quot;Dave Thomas&quot;</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="n">book</span><span class="p">.</span><span class="n">description</span>
<span class="s2">&quot;Programming Elixir: Functional |&gt; Concurrent |&gt; Pragmatic |&gt; Fun&quot;</span>
</code></pre></div>
<p>To update this book, you will need to reassign the book with itself plus the updated properties and let <code>Repo</code> handle the update by calling <code>update</code> function on Repor</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span>  <span class="n">book</span> <span class="p">=</span> <span class="p">%{</span><span class="n">book</span> <span class="p">|</span> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: a lot more fun&quot;</span><span class="p">,</span> <span class="err">\</span>
                      <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir with fun&quot;</span><span class="p">}</span>
<span class="p">%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
 <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: a lot more fun&quot;</span><span class="p">,</span> <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir with fun&quot;</span><span class="p">}</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">book</span><span class="p">)</span>
<span class="ss">:ok</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nc">Books</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="p">%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
 <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: a lot more fun&quot;</span><span class="p">,</span> <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir with fun&quot;</span><span class="p">}</span>
</code></pre></div>
<p>Next, you also can create a new book by calling <code>insert</code> command on <code>Repo</code>. Pretty straight forward.</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">insert</span><span class="p">(%</span><span class="nc">Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Simon St. Laurent, J. David Eisenberg&quot;</span><span class="p">,</span> <span class="err">\</span>
                        <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Elixir is an excellent language if you want to </span><span class="err">\</span><span class="s2"></span>
<span class="s2">                                      learn about functional programming, and with this hands-on </span><span class="err">\</span><span class="s2"></span>
<span class="s2">                                      introduction&quot;</span><span class="p">,</span> 
                        <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;O&#39;Reilly&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Introducing Elixir&quot;</span><span class="p">})</span>
<span class="p">%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Simon St. Laurent, J. David Eisenberg&quot;</span><span class="p">,</span>
                 <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Elixir is an excellent language if you want to learn about </span><span class="err">\</span><span class="s2"></span>
<span class="s2">                               functional programming, and with this hands-on introduction&quot;</span><span class="p">,</span> <span class="err">\</span>
                 <span class="ss">id</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;O&#39;Reilly&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Introducing Elixir&quot;</span><span class="p">}</span>
</code></pre></div>
<p>Now try to get all books again</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="nc">Books</span><span class="p">)</span>
<span class="p">[%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
  <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: a lot more fun&quot;</span><span class="p">,</span> <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir with fun&quot;</span><span class="p">},</span>
 <span class="p">%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Simon St. Laurent, J. David Eisenberg&quot;</span><span class="p">,</span>
  <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Elixir is an excellent language if you want to learn about </span><span class="err">\</span><span class="s2"></span>
<span class="s2">                functional programming, and with this hands-on introduction&quot;</span><span class="p">,</span>
  <span class="ss">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;O&#39;Reilly&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Introducing Elixir&quot;</span><span class="p">}]</span>
</code></pre></div>
<p>Note this book is created with id <code>2</code>. Now we can delete this book by calling <code>delete</code> command on <code>Repo</code>. </p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="n">introducing_elixir_book</span> <span class="p">=</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nc">Books</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="p">%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Simon St. Laurent, J. David Eisenberg&quot;</span><span class="p">,</span>
 <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Elixir is an excellent language if you want to learn </span><span class="err">\</span><span class="s2"></span>
<span class="s2">               about functional programming, and with this hands-on introduction&quot;</span><span class="p">,</span>
  <span class="ss">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;O&#39;Reilly&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Introducing Elixir&quot;</span><span class="p">}</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="n">introducing_elixir_book</span><span class="p">)</span>
<span class="ss">:ok</span>
</code></pre></div>
<p>Retrieving all books again, you will see the deleted book is really deleted.</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="nc">Repo</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="nc">Books</span><span class="p">)</span>
<span class="p">[%</span><span class="nc">BookStore.Books</span><span class="p">{</span><span class="ss">author</span><span class="p">:</span> <span class="s2">&quot;Dave Thomas&quot;</span><span class="p">,</span>
 <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir: Functional |&gt; Concurrent |&gt; Pragmatic |&gt; Fun&quot;</span><span class="p">,</span>
  <span class="ss">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">publisher</span><span class="p">:</span> <span class="s2">&quot;The Pragmatic Bookshelf&quot;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Programming Elixir&quot;</span><span class="p">}]</span>
</code></pre></div>
<p>That&#39;s all for this article. I really hope you enjoy it. These basic command on the model will play a very important role when you need to build a RESTful controller, which will be cover in the near future article :-) </p>
]]></content>
  </entry>
  
</feed>
